<?php
#****************************************#
# * @Author: lehieu008                   #
# * @Email: lehieu008@gmail.com          #
# * @Website: http://www.iscvietnam.net  #
# * @Copyright: 2008 - 2009              #
#****************************************#
class Account extends MY_Controller
{
    function __construct()
    {
        parent::__construct();
        #CHECK SETTINGstatisticlistshopinvite_tree
        if ((int)settingStopSite == 1) {
            $this->lang->load('home/common');
            show_error($this->lang->line('stop_site_main'));
            die();
        }
        #END CHECK SETTING
        #BEGIN: CHECK LOGIN
        if (!$this->check->is_logined($this->session->userdata('sessionUser'), $this->session->userdata('sessionGroup'), 'home')) {
            redirect(base_url() . 'login', 'location');
            die();
        }
        #END CHECK LOGIN
        #Load language
        $this->lang->load('home/common');
        $this->lang->load('home/account');
        $this->load->model('user_model');
        $this->load->model('category_model');
        $this->load->model('showcart_model');
        $this->load->model('province_model');
        $this->load->model('district_model');
        $this->load->model('shop_model');
        $this->load->model('package_user_model');
        // $this->load->model('product_model'); // Model auto loaded
        $this->load->model('order_model');
        $this->load->model('common_model');
        $this->load->model('af_order_model');
        $this->load->model('product_promotion_model');
        $this->load->model('detail_product_model');
        $this->load->model('user_emp_role_model');
        $data = $this->common_model->getPackageAccount();

        #BEGIN Eye
        if ($this->session->userdata('sessionUser') > 0) {
            # Check user actived
            $cur_user = $this->user_model->get('use_id,use_username,avatar,af_key', 'use_id = ' . (int)$this->session->userdata('sessionUser') . ' AND use_status = 1');
            if (in_array($this->session->userdata('sessionGroup'), json_decode(ListGroupAff, true))) {
                $myshop        = $this->shop_model->get("sho_link, domain", "sho_user = " . $this->session->userdata('sessionUser'));
                $data['af_id'] = $cur_user->af_key;
            } else {
                $parentUser = $this->user_model->get("parent_id", "use_id = " . $this->session->userdata('sessionUser'));
                $myshop     = $this->shop_model->get("sho_link, domain", "sho_user = " . $parentUser->parent_id);
            }
            $data['myshop']      = $myshop;
            $data['currentuser'] = $cur_user;

            if ($cur_user && count($cur_user) === 1 && (int)$cur_user->use_id > 0) {
                /**/
            } else {
                redirect(base_url() . 'logout', 'location');
                die;
            }

            $this->load->model('eye_model');
            $data['listeyeproduct'] = $this->eye_model->geteyetype('product', $this->session->userdata('sessionUser'));
            $data['listeyeraovat']  = $this->eye_model->geteyetype('raovat', $this->session->userdata('sessionUser'));
            $data['listeyehoidap']  = $this->eye_model->geteyetype('hoidap', $this->session->userdata('sessionUser'));

        } else {
            array_values($this->session->userdata['arrayEyeSanpham']);
            array_values($this->session->userdata['arrayEyeRaovat']);
            array_values($this->session->userdata['arrayEyeHoidap']);
            $this->load->model('eye_model');
            $data['listeyeproduct'] = $this->eye_model->geteyetypenologin('product');
            $data['listeyeraovat']  = $this->eye_model->geteyetypenologin('raovat');
            $data['listeyehoidap']  = $this->eye_model->geteyetypenologin('hoidap');
        }
        $this->load->model('ads_model');
        $this->load->model('notify_model');
        $currentDate                 = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        $adsTaskbar                  = $this->ads_model->fetch("ads_id, ads_title, ads_category, ads_descr", "ads_status = 1 AND ads_enddate >= $currentDate AND ads_reliable = 1", "rand()", "DESC", 0, (int)settingAdsNew_Home);
        $data['adsTaskbarGlobal']    = $adsTaskbar;
        $notifyTaskbar               = $this->notify_model->fetch("not_id, not_title, not_begindate", "not_group = '0,1,2,3' AND not_status = 1 AND not_enddate >= $currentDate", "not_id", "DESC", 0, 4);
        $data['notifyTaskbarGlobal'] = $notifyTaskbar;
        #BEGIN: Notify
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        $select      = "not_id, not_title, not_detail, not_degree";
        $this->db->limit(settingNotify);
        $this->db->order_by("not_id", "DESC");

        $data['listNotify'] = $this->notify_model->fetch($select, "not_status = 1 AND not_group = '0,1,2,3'", "not_degree", "DESC");
        #END Notify

        $data['productCategoryRoot'] = $this->loadCategoryRoot(0, 0);
        $data['productCategoryHot']  = $this->loadCategoryHot(0, 0);

        $data['isMobile'] = 0;
        $this->load->library('Mobile_Detect');
        $detect = new Mobile_Detect();
        if ($detect->isAndroidOS() || $detect->isiOS() || $detect->isMobile()) {
            $data['isMobile'] = 1;
        }

        # Tin tức
        $this->load->model('content_model');
        $select           = "not_id, not_title, not_image,not_dir_image, not_begindate";
        $data['listNews'] = $this->content_model->fetch($select, "not_status = 1 AND cat_type = 1", "not_id", "DESC", 0, 10);
        # Hàng gợi ý
        $select           = "pro_id, pro_name, pro_cost, pro_image, pro_dir,pro_category, ";
        $whereTmp         = "pro_status = 1  and is_asigned_by_admin = 0";
        $products         = $this->product_model->fetch($select, $whereTmp, "pro_id", "DESC", 0, 10);
        $data['products'] = $products;
        # Hàng yêu thích
        $this->load->model('product_favorite_model');
        $select              = 'prf_id, prf_product, prf_user, pro_id, pro_name, pro_descr, pro_dir, pro_image, pro_category, pro_cost ';
        $join                = 'INNER';
        $table               = 'tbtt_product';
        $on                  = 'tbtt_product_favorite.prf_product = tbtt_product.pro_id';
        $where               = 'prf_user = ' . (int)$this->session->userdata('sessionUser');
        $data['favoritePro'] = $this->product_favorite_model->fetch_join($select, $join, $table, $on, $where, 0, 10);

        $ssuser             = (int)$this->session->userdata('sessionUser');
        $shop               = $this->shop_model->get("sho_link, sho_package", "sho_user = " . $ssuser);
        $data['shoplink']   = $shop->sho_link;
        $this->sho_package  = $data['sho_package'];
        $current_day        = strtotime(date("Y-m-d", mktime(0, 0, 0, date("n", time()), date("j", time()) - TimeMemberStatic, date("Y", time()))));
        $data['totamember'] = count($this->user_model->fetch('*', 'use_group IN (2,3,4,5,6) AND use_regisdate > ' . $current_day . ' AND parent_id = ' . (int)$this->session->userdata('sessionUser')));

        $data['listComplaintsOrders'] = $this->order_model->getListComplaintsOrders(array('status_id_delivery' => TRUE, 'user_id' => (int)$this->session->userdata('sessionUser')));
        $user_current                 = $this->user_model->get("*", "use_id = " . (int)$this->session->userdata('sessionUser'));
        $user_parent                  = !empty($user_current) ? ($this->user_model->get("*", "use_id = " . (int)$user_current->parent_id)) : 0;
        $shop_parent                  = !empty($user_parent) ? ($this->shop_model->get("*", "sho_user = " . (int)$user_parent->use_id)) : 0;
        $data['domain']               = !empty($shop_parent) ? $shop_parent->domain : '';
        $data['shoplinkparent']       = !empty($shop_parent) ? $shop_parent->sho_link : '';
        $data['user']                 = !empty($shop_parent) ? $user_parent->use_mobile :'';

        #BEGIN: Load menu for Branch, Quản lý nhân viên hiển thị theo gói của GH
        if ($this->session->userdata('sessionGroup') == BranchUser) {
            $UserID = (int)$this->session->userdata('sessionUser');
            $u_pa   = $this->user_model->get("use_id, use_group, parent_id", "use_id = " . $UserID . " AND use_status = 1 AND use_group = " . BranchUser);
            $u_pa1  = $this->user_model->get("use_id, use_group, parent_id", "use_id = " . $u_pa->parent_id . " AND use_status = 1");
            if ($u_pa) {
                $data['sho_pack_bran'] = $this->package_user_model->getCurrentPackage($u_pa->parent_id);
                if ($u_pa1->use_group == StaffStoreUser) {
                    $data['sho_pack_bran'] = $this->package_user_model->getCurrentPackage($u_pa1->parent_id);
                }
            }
        }
        $this->load->model('grouptrade_model');
        $list_grouptrade = $this->grouptrade_model->fetch('grt_id, grt_name', 'grt_admin = ' . $this->session->userdata('sessionUser'));
        if (!empty($list_grouptrade)) {
            foreach ($list_grouptrade as $key => $value) {
                $this->session->set_userdata('sessionGrt_' . $value->grt_id, $value->grt_id);
            }
        }
        $data['list_grouptrade'] = $list_grouptrade;
        #BEGIN: Load menu for Branch
        $data['mainURL'] = $this->getMainDomain();

        /*Invite*/
        $array_invite = explode(',', $user_current->use_invite);
        $ar_name      = array();
        foreach ($array_invite as $k => $v) {
            $grt       = $this->grouptrade_model->get('grt_id, grt_name, grt_admin', 'grt_id = ' . (int)$v);
            $ar_name[] = $grt;
        }
        if ($user_current->use_invite != '') {
            $to_invite = count($array_invite);
        } else {
            $to_invite = 0;
        }
        $data['array_invite'] = $ar_name;

        $data['to_invite'] = $to_invite;
        /**/

        $this->load->vars($data);
    }

    function index() {
        $data['user_group'] = (int)$this->session->userdata('sessionGroup');
        //print_r($data['user_group']);die();
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuSelected'] = 'index';
        $data['menuType'] = 'account';
        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position, adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter        
        $this->load->model('notify_model');
        $this->load->model('contact_model');
        $this->load->model('staff_model');

        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
        #BEGIN: Fetch id notify for group
        $notify = $this->notify_model->fetch('not_id, not_group', 'not_status = 1 AND category = 0 AND not_view NOT LIKE "%['. (string)$this->session->userdata('sessionUser') .']%"'); //AND not_enddate >= $currentDate
        $notifyID = array();
        foreach ($notify as $notifyArray) {
            if (trim($notifyArray->not_group) != '' && stristr($notifyArray->not_group, (string)$this->session->userdata('sessionGroup'))) {
                $notifyID[] = $notifyArray->not_group;
            }
        }
        //Count notify
        $data['notify'] = count($notifyID);
        $share = $this->notify_model->fetch('not_id, not_group', 'not_status = 1 AND category = 1 AND not_view NOT LIKE "%['. (string)$this->session->userdata('sessionUser') .']%"'); //AND not_enddate >= $currentDate
        $shareID = array();
        foreach ($share as $shareitem) {
            if (trim($shareitem->not_group) != '' && stristr($shareitem->not_group, (string)$this->session->userdata('sessionGroup'))) {
                $shareID[] = $shareitem->not_group;
            }
        }
        // Count sharelink
        $data['sharelink'] = count($shareID);        
        $contact = $this->contact_model->fetch("*", "con_user_recieve = " . (int)$this->session->userdata('sessionUser') . " OR con_user = ". (int)$this->session->userdata('sessionUser') ." AND con_status = 1");

        $new_messa = 0;
        foreach ($contact as $key) {
            if ($key->con_user == (int)$this->session->userdata('sessionUser') && $key->con_in_usend > 0) {
                $new_messa += $key->con_in_usend;
            }

            if ($key->con_user_recieve == (int)$this->session->userdata('sessionUser') && $key->con_in_urecei > 0) {
                $new_messa += $key->con_in_urecei;
            }

        }
        $data['contact'] = $new_messa;

        #Count total record Order
        $where = "shc_saler = " . (int)$this->session->userdata('sessionUser');
        $where1 = "order_user = " . (int)$this->session->userdata('sessionUser');
        $params = array(
            'select' => 'tbtt_showcart.*, tbtt_order.*, tbtt_user.use_id, tbtt_user.use_username, tbtt_user.use_fullname',
            'shc_saler' => $this->session->userdata('sessionUser'),
            'where' => $where
        );

        $totalOrder = $this->order_model->list_order_by_id_shop($params);
        $data['totalOrder'] = count($totalOrder);
        $this->db->select('*');
        $this->db->where("order_status = '01' AND order_user = " . $this->session->userdata('sessionUser'));
        $query = $this->db->get("tbtt_order");
        $result = $query->result();
        $data['totalOrderUser'] = count($result);
        // Count task
        $tasklist = $this->staff_model->fetch('*', ('status < 2 AND asigned_user = '. (int)$this->session->userdata('sessionUser')) .' OR '. ('status = 1 AND store_id = '. (int)$this->session->userdata('sessionUser')));
        foreach ($tasklist as $task) {
            $daytask = date('d-m-Y', $task->created_date);
            if ($daytask == date('d-m-Y')) {
                $data['tasklist'] = count($tasklist);
            }
        }
        #Load view
        $data['flash_message'] = ($this->session->flashdata('updateSuccess')) ? $this->session->flashdata('updateSuccess') : '';
        $this->load->view('home/account/defaults/defaults', $data);
    }

    function checkid()
    {
        $this->load->model('uptin_model');
        $id = $this->uri->segment(4);
        $type = $this->uri->segment(3);

        $count = count($this->uptin_model->checkid($type, $id));

        if ($count == 0) echo "0";
        else echo "1";
        exit();
    }

    function setup_up()
    {
        $this->load->model('uptin_model');
        $rate = $this->uptin_model->GetGiaTienUpTin();
        $data['chiphiuptin'] = $rate;
        $this->load->model('uptin_model');
        $user_id = (int)$this->session->userdata('sessionUser');

        if ($this->input->post('submit_form') == 1) {
            $currentDate = date('Y-m-d H:i:s', time());
            $dataAdd = array(
                'tin_id' => trim($this->filter->injection_html($this->input->post('matinup'))),
                'type' => trim($this->filter->injection_html($this->input->post('loaiUpTin'))),
                'so_lan_up' => trim($this->filter->injection_html($this->input->post('num_up'))),
                'thu' => implode(",", $this->input->post('thungay')),
                'gio' => implode(",", $this->input->post('thoigian')),
                'use_id' => $user_id,
                'date_time' => $currentDate
            );
            $user = $this->uptin_model->add($dataAdd);

            $amount = ((int)$this->input->post("num_up")) * $rate;
            $comment = "";
            $user = $this->uptin_model->withdrawal($user_id, $amount, $comment, trim($this->filter->injection_html($this->input->post('loaiUpTin'))));

            redirect(base_url() . 'account/history_up', 'location');
        }
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'setup_up';

        $data['balance'] = $this->uptin_model->getBalanceByUserId((int)$this->session->userdata('sessionUser'));
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuSelected'] = 'setup_up';
        $data['menuType'] = 'account';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        $this->load->view('home/account/uptin/setup_up', $data);
    }

    function history_up()
    {
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'history_up';
        $this->load->model('uptin_model');
        $user_id = (int)$this->session->userdata('sessionUser');
        $data['lichup'] = $this->uptin_model->getLichUpTin($user_id);
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuSelected'] = 'history_up';
        $data['menuType'] = 'account';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        $this->load->view('home/account/uptin/history_up', $data);
    }

    function chitietup()
    {
        $this->load->model('uptin_model');
        $lich_id = $this->uri->segment(3);
        $user_id = (int)$this->session->userdata('sessionUser');
        $data['tinup'] = $this->uptin_model->getChiTietUpTin($lich_id);
        $this->load->view('home/account/uptin/chitietup', $data);
    }

    function uptin()
    {
        $this->load->model('uptin_model');
        $rate = $this->uptin_model->GetGiaTienUpTin();
        $this->load->model('uptin_model');
        $this->load->model('ads_model');
        $this->load->model('product_model');
        $data['balance'] = $this->uptin_model->getBalanceByUserId((int)$this->session->userdata('sessionUser'));
        if ($data['balance'] < 500) {
            $data['error'] = 1;
        } else {
            $data['error'] = 0;
            $user_id = (int)$this->session->userdata('sessionUser');
            $type = $this->uri->segment(4);
            $tin_id = $this->uri->segment(3);
            $comment = "";
            if ($type == 1) {
                $pro = $this->product_model->get("*", "pro_id='$tin_id'");

                $comment = "Up Tin " . $pro->pro_name;
            } else {
                $ads = $this->ads_model->get("*", "ads_id='$tin_id'");

                $comment = "Up Tin " . $ads->ads_title;
            }
            $this->uptin_model->withdrawal($user_id, $rate, $comment, $type);
            $user = $this->uptin_model->uptin($tin_id, $type);
        }
        $this->load->view('home/account/uptin/uptin', $data);
    }

    function naptien()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'naptien';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        //$this->load->view('home/account/uptin/naptien', $data);
        $this->load->view('home/account/uptin/naptien_b1', $data);
    }

    function noi_quy_giang_hang()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuType'] = 'account';
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'shop';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        //$this->load->view('home/account/uptin/naptien', $data);
        $this->load->view('home/account/shop/noiquygianhang', $data);
    }

    function yeucautamgiu()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'tamgiu';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter      

        $shop = $this->shop_model->get("*", "sho_user = " . $this->session->userdata('sessionUser'));

        $listuser = substr($shop->sho_users_required, 1);

        if ($listuser != "") {
            $data['users'] = $this->user_model->fetch("*", "use_id IN (" . $listuser . ")", "", "");
        }
        $this->load->view('home/account/uptin/yeucautamgiu', $data);
    }

    function naptienb2()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'naptien';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        $this->load->view('home/account/uptin/naptien_b2', $data);
    }

    /* Nap tien SOHAPAY */

    function naptienb3_tai_tru_so()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'naptien';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        $this->load->view('home/account/uptin/naptien_b3_sohapay', $data);
    }

    function naptienb3sohapay()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'naptien';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        $data['type'] = $this->input->post('pay_method');
        if ($this->input->post('pay_method') == "atm") {
            $data['NganHangChuyenKhoan'] = $this->input->post('FlagBank');
        }
        #END Counter
        $this->load->view('home/account/uptin/naptien_b3_sohapay', $data);
    }

    function naptienb4sohapay()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'naptien';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        $data['type'] = $this->input->post('type');
        $data['gold_money'] = $this->input->post('gold_money');
        if ($this->input->post('gold_money') == '') {
            redirect(base_url() . 'account/naptien', 'location');
        }

        $data['userinfo'] = $this->user_model->get("*", "use_id = " . (int)$this->session->userdata('sessionUser'));

        if ($this->input->post('type') == 'card') {
            $this->load->view('home/account/uptin/naptien_b4_sohapay', $data);
        }

        if ($this->input->post('type') == 'codtannoi') {

            $this->load->view('home/account/uptin/naptien_b4_thutientannoi', $data);
            //$this->load->view('home/account/uptin/naptien_b4_thutaitruso', $data);
        }

        if ($this->input->post('type') == 'codtruso') {
            $this->load->view('home/account/uptin/naptien_b4_thutaitruso', $data);
        }

        if ($this->input->post('type') == 'atm') {
            $data['NganHangChuyenKhoan'] = $this->input->post('NganHangChuyenKhoan');
            $this->load->view('home/account/uptin/naptien_b4_chuyenkhoan', $data);
        }
    }

    function naptienb5sohapay()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'naptien';
        $data['successEditShopAccount'] = false;
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        $data['type'] = $this->input->post('type');
        $data['gold_money'] = $this->input->post('gold_money');


        $this->user_model->update(array('use_fullname' => $this->input->post('ho_ten'), 'use_mobile' => $this->input->post('dien_thoai')), "use_id = " . (int)$this->session->userdata('sessionUser'));
        $data['userinfo'] = $this->user_model->get("*", "use_id = " . (int)$this->session->userdata('sessionUser'));
        #END Counter

        if ($this->input->post('type') == 'card') {
            $this->load->view('home/account/uptin/naptien_b5_sohapay', $data);
        }

        if ($this->input->post('type') == 'codtannoi') {
            $data['tn_ho_ten'] = $this->input->post('ho_ten');
            $data['tn_dien_thoai'] = $this->input->post('dien_thoai');
            $data['tn_dia_chi'] = $this->input->post('dia_chi');
            $data['tn_thanh_pho'] = $this->input->post('thanh_pho');
            $data['tn_ngay'] = $this->input->post('ngay');
            $data['tn_thoi_gian'] = $this->input->post('thoi_gian');
            $data['tn_thanh_pho'] = $this->input->post('thanh_pho');
            $this->load->view('home/account/uptin/naptien_b5_thutientannoi', $data);
        }

        if ($this->input->post('type') == 'codtruso') {
            //$this->load->view('home/account/uptin/naptien_b4_thutaitruso', $data);
        }
    }

    function thuchienthanhcong()
    {
        $currentDate = mktime(date('H') - 1, date('i'), 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'naptien';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        $data['type'] = $this->input->post('type');
        $data['gold_money'] = $this->input->post('gold_money');

        $this->user_model->update(array('use_fullname' => $this->input->post('ho_ten'), 'use_mobile' => $this->input->post('dien_thoai')), "use_id = " . (int)$this->session->userdata('sessionUser'));
        $thongtinUSer = $this->user_model->get("*", "use_id = " . (int)$this->session->userdata('sessionUser'));
        $data['userinfo'] = $thongtinUSer;
        if ($this->input->post('type') == 'card') {
            $this->load->view('home/account/uptin/naptien_b5_sohapay', $data);
        }

        $this->load->model('nap_tien_model');
        if ($this->input->post('type') == 'codtannoi') {
            $data['soh_userid'] = $this->input->post('soh_userid');
            $data['soh_username'] = $this->input->post('soh_username');
            $data['soh_phone'] = $this->input->post('soh_phone');
            $data['soh_address'] = $this->input->post('soh_address');
            $data['soh_province'] = $this->input->post('soh_province');
            $data['gold_money'] = $this->input->post('gold_money');
            $data['soh_ho_ten'] = $this->input->post('soh_ho_ten');
            $dataAdd = array(
                'soh_userid' => (int)$this->input->post('soh_userid'),
                'soh_username' => trim($this->input->post('soh_username')),
                'soh_name' => trim($this->input->post('soh_ho_ten')),
                'soh_phone' => trim($this->input->post('soh_phone')),
                'soh_address' => trim($this->input->post('soh_address')),
                'soh_province' => trim($this->input->post('soh_province')),
                'soh_money' => (int)$this->input->post('gold_money'),
                'soh_created_date' => $currentDate,
                'soh_am_pm' => trim($this->input->post('soh_am_pm')),
                'soh_week' => trim($this->input->post('soh_week')),
                'soh_type' => 2

            );

            if ($this->nap_tien_model->add($dataAdd)) {
                $data['tn_thanh_cong'] = 1;
            }

            $this->load->view('home/account/uptin/naptien_b5_thutientannoi', $data);;
        }

        if ($this->input->post('type') == 'codtruso') {
            $data['gold_money'] = $this->input->post('gold_money');
            $dataAdd = array(
                'soh_userid' => (int)$this->session->userdata('sessionUser'),
                'soh_username' => trim($this->input->post('soh_username')),
                'soh_money' => (int)$this->input->post('gold_money'),
                'soh_created_date' => $currentDate,
                'soh_type' => 3

            );

            if ($this->nap_tien_model->add($dataAdd)) {
                $data['tn_thanh_cong'] = 1;
            }

            $this->load->view('home/account/uptin/naptien_b4_thutaitruso', $data);
        }
        if ($this->input->post('type') == 'atm') {
            $data['gold_money'] = $this->input->post('gold_money');
            $dataAdd = array(
                'soh_userid' => (int)$this->session->userdata('sessionUser'),
                'soh_username' => trim($this->input->post('soh_username')),
                'soh_money' => (int)$this->input->post('gold_money'),
                'soh_created_date' => $currentDate,
                'soh_bank' => $this->input->post('NganHangChuyenKhoan'),
                'soh_type' => 4
            );

            if ($this->nap_tien_model->add($dataAdd)) {
                $data['tn_thanh_cong'] = 1;
            }

            $this->load->view('home/account/uptin/naptien_b4_chuyenkhoan', $data);
        }
    }

    /* Ket thuc nap tien SOHAPAY */

    /*Nap tien SMS*/
    function naptienb3sms()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'naptien';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        $this->load->view('home/account/uptin/naptien_b3_sms', $data);
    }
    /* Ket thuc nap tien SMS*/

    /*Nap tien  thu tan noi*/
    function buoc3thutientannoi()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'naptien';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        $this->load->view('home/account/uptin/naptien_b3_thutientannoi', $data);
    }

    function buoc4thutientannoi()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'naptien';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        $this->load->view('home/account/uptin/naptien_b4_thutientannoi', $data);
    }

    function buoc5thutientannoi()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'naptien';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");

        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        $this->load->view('home/account/uptin/naptien_b5_thutientannoi', $data);
    }
    /*Ket thuc nap tien thu tan noi*/

    /*Nap tien thu tai tru so*/
    function buoc3thutaitruso()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'naptien';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        $this->load->view('home/account/uptin/naptien_b3_thutaitruso', $data);
    }

    function buoc4thutaitruso()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'naptien';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = ". (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position, adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        $this->load->view('home/account/uptin/naptien_b4_thutaitruso', $data);
    }

    /*Ket thuc nap tien thu tai tru so*/

    /*Nap tien chuyen khoan*/
    function buoc3chuyenkhoan()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'naptien';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = ". (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position, adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        $this->load->view('home/account/uptin/naptien_b3_chuyenkhoan', $data);
    }

    function buoc4chuyenkhoan()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'naptien';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = ". (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position, adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        $this->load->view('home/account/uptin/naptien_b4_chuyenkhoan', $data);
    }

    /*Ket thuc nap tien thu tai tru so*/
    function gianhang()
    {
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'gianhang';
        $this->load->view('home/account/gianhang/gianhang', $data);
    }

    function get_position_advs()
    {
        if ($this->input->post('catid') && $this->input->post('catid') != '') {
            $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
            $this->load->model('advertise_model');
            $catid = (int)$this->input->post('catid');
            $ads = $this->advertise_model->fetch("adv_id, adv_page, adv_position, cat_id", "adv_status = 1 AND adv_enddate >= ". $currentDate ." AND cat_id = ". $catid, "adv_order", "ASC");
            if ($this->input->post('url') && $this->input->post('url') != '') {
                $url = $this->input->post('url');
            } else {
                $url = 0;
            }
            $this->load->model('advertise_config_model');
            $listpos = $this->advertise_config_model->fetch('*', 'adv_type = '. $url, 'adv_pos', 'ASC');
            echo '<option value="">--Chọn vị trí--</option>';
            foreach ($listpos as $item) {
                echo '<option value="'. $item->adv_pos .'">'. $item->adv_title .'</option>';
            }
        }
    }

    function smtpmailer($to, $from, $from_name, $subject, $body)
    {
        $mail = new PHPMailer();                // tạo một đối tượng mới từ class PHPMailer
        $mail->IsSMTP();
        $mail->CharSet = "utf-8";                    // bật chức năng SMTP
        $mail->SMTPDebug = 0;                    // kiểm tra lỗi : 1 là  hiển thị lỗi và thông báo cho ta biết, 2 = chỉ thông báo lỗi
        $mail->SMTPAuth = true;                // bật chức năng đăng nhập vào SMTP này
        $mail->SMTPSecure = SMTPSERCURITY;                // sử dụng giao thức SSL vì gmail bắt buộc dùng cái này
        $mail->Host = SMTPHOST;        // smtp của gmail
        $mail->Port = SMTPPORT;                        // port của smpt gmail
        $mail->Username = GUSER;
        $mail->Password = GPWD;
        $mail->SetFrom($from, $from_name);
        $mail->Subject = $subject;
        $mail->Body = $body;
        $mail->isHTML(true);
        $mail->AddAddress($to);
        if (!$mail->Send()) {
            $message = 'Gởi mail bị lỗi: ' . $mail->ErrorInfo;
            return false;
        } else {
            $message = 'Thư của bạn đã được gởi đi ';
            return true;
        }
    }

    function list_click()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id > 1) {

        } else {
            redirect(base_url(), 'location');
            die();
        }
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'advs';
        $this->load->model('district_model');
        $this->load->model('advertise_click_model');
        $this->load->model('advertise_model');

        $this->db->select("sum(number_click) as total, tbtt_advertise_click.*, tbtt_advertise.adv_title, tbtt_advertise.adv_link, tbtt_advertise.adv_dir, tbtt_advertise.adv_banner, tbtt_advertise.user_id, tbtt_advertise.adv_page, tbtt_advertise.adv_position,tbtt_advertise_config.adv_title as title");
        $this->db->where('tbtt_advertise.user_id', (int)$this->session->userdata('sessionUser'));
        $this->db->join('tbtt_advertise', 'tbtt_advertise_click.adv_id = tbtt_advertise.adv_id', 'INNER');
        $this->db->join('tbtt_advertise_config', 'tbtt_advertise_config.adv_pos = tbtt_advertise.adv_position', 'INNER');
        $this->db->order_by('tbtt_advertise_click.id', 'ASC');
        $this->db->group_by('tbtt_advertise_click.adv_id');
        $query = $this->db->get('tbtt_advertise_click');
        $result = $query->result();
        $data['totalclick'] = $result;
        #BEGIN: Advertise
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        $this->load->model('advertise_model');

        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        $this->load->view('home/account/advertise/click', $data);
    }

    function myads()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if (!in_array($group_id, array(AffiliateStoreUser))) {
            redirect(base_url() . "account", 'location');
        }

        $data['menuType'] = 'account';
        $data['menuSelected'] = 'advs';
        $this->load->model('advertise_model');
        $shop = $this->shop_model->fetch_join("tbtt_shop.*", "INNER", "tbtt_user", "tbtt_user.use_id = tbtt_shop.sho_user", "", "", "", "tbtt_user.use_group = 2", "sho_id", "DESC", 0, 1, false);
        $data['shop'] = $shop;

        $action = array('search', 'keyword', 'sort', 'by', 'page', 'status');
        $getVar = $this->uri->uri_to_assoc(3, $action);

        $sort = "id";
        $by = "DESC";
        $sortUrl = '';
        $pageSort = '';
        $pageUrl = '';
        $keyword = '';

        $statusUrl = $pageUrl . $pageSort;
        $data['statusUrl'] = base_url() .'account/myads'. $statusUrl;

        if ($getVar['status'] != FALSE && trim($getVar['status']) != '' && $getVar['id'] != FALSE && (int)$getVar['id'] > 0) {
            switch (strtolower($getVar['status'])) {
                case 'active':
                    $this->advertise_model->update(array('adv_status' => 1), "adv_id = " . (int)$getVar['id']);
                    break;
                case 'deactive':
                    $this->advertise_model->update(array('adv_status' => 0), "adv_id = " . (int)$getVar['id']);
                    break;
            }
            redirect($data['statusUrl'], 'location');
        }

        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #BEGIN: Pagination
        $this->load->library('pagination');
        $params = array(
            'user_id' => $this->session->userdata('sessionUser'),
            'order_by' => array('key' => 'adv_id', 'value' => 'DESC'),
            'start' => $start,
            'limit' => settingOtherAccount,
            'is_count' => true
        );

        $totalRecord = $this->advertise_model->listAds($params);
        $config['base_url'] = base_url() . 'account/myads/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        $params['is_count'] = false;
        $data['listAd'] = $this->advertise_model->listAds($params);

        $this->load->view('home/account/advertise/myads', $data);
    }

    function advs()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id > 1) {

        } else {
            redirect(base_url(), 'location');
            die();
        }
        $this->load->model('province_model');
        $data['province'] = $this->province_model->fetch("pre_id, pre_name", "pre_id != 1 AND pre_status = 1", "pre_order", "ASC");
        $province = $this->province_model->get("pre_name", "pre_id != 1 AND pre_status = 1 AND pre_id = " . (int)$this->input->post('province_shop'));
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'advs';
        $baner_size = trim($this->filter->injection_html($this->input->post('make_text')));
        $baner_size = explode('(', $baner_size);
        $baner_size = explode('x', $baner_size[0]);
        $width_allow = (int)$baner_size[0];
        $height_allow = (int)$baner_size[1];

        $this->load->model('district_model');
        if (count((int)$this->session->userdata('sessionUser')) > 0) {
            $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
            $userData = $this->user_model->get("*", "use_id = " . (int)$this->session->userdata('sessionUser'));
            $data['shop'] = $shop;
            if ($shop->sho_district > 0 && $shop->sho_province > 0) {
                $data['district'] = $this->district_model->get('*', 'DistrictCode = "' . $shop->sho_district . '" AND ProvinceCode = "' . $shop->sho_province . '"');
            }
        }
        $url1 = $this->uri->segment(3);
        $url2 = $this->uri->segment(4);
        if ($url1 == 'buy' && $url2 == '1' || $url1 == 'buy' && $url2 == '2') {
            $this->load->model('category_model');
            $category = $this->category_model->fetch("*", "parent_id = 0");

            $catname = $this->category_model->get("cat_name", "cat_id = " . (int)$this->input->post('cat_id'));
            $url2 = $this->uri->segment(4);
            #END CHECK PERMISSION
            if ($this->session->flashdata('message')) {
                $data['successAdd'] = true;
            } else {
                $data['successAdd'] = false;
                #BEGIN: Set date
                if ((int)date('m') < 12) {
                    $data['nextMonth'] = (int)date('m') + 1;
                    $data['nextYear'] = (int)date('Y');
                } else {
                    $data['nextMonth'] = 1;
                    $data['nextYear'] = (int)date('Y') + 1;
                }
                #END: Set date
                $this->load->library('form_validation');
                #BEGIN: Set rules
                $this->form_validation->set_rules('title_adv', 'lang:title_label_add', 'trim|required|callback__exist_title');
                $this->form_validation->set_rules('position_adv', 'lang:position_label_add', 'trim|required');
                $this->form_validation->set_rules('link_adv', 'lang:link_label_add', 'trim|required');

                if ($url2 == '1')
                    $this->form_validation->set_rules('province_shop', 'lang:province_shop_label_add', 'trim|required');

                //$this->form_validation->set_rules('order_adv', 'lang:order_label_add', 'trim|required|is_natural_no_zero');
                $this->form_validation->set_rules('name_adv', 'lang:name_label_add', 'trim|required');

                if ($url2 == '1')
                    $this->form_validation->set_rules('cat_id', 'lang:cat_label_add', 'trim|required');

                $this->form_validation->set_rules('address_adv', 'lang:address_label_add', 'trim|required');
                // $this->form_validation->set_rules('phone_adv', 'lang:phone_label_add', 'trim|required|callback__is_phone');
                $this->form_validation->set_rules('mobile_adv', 'lang:mobile_label_add', 'trim|required|callback__is_phone');
                $this->form_validation->set_rules('email_adv', 'lang:email_label_add', 'trim|required|valid_email');
                $this->form_validation->set_rules('endday_adv', 'lang:enddate_label_add', 'callback__valid_enddate');
                $file = $_FILES["banner_adv"]['tmp_name'];
                list($width, $height) = getimagesize($file);
                if (!$_FILES["banner_adv"]['name']) {
                    $this->form_validation->set_rules('banner_adv', 'lang:banner_label_add', 'required|callback__banner_size_check');
                }
                #END Set rules
                if ($width != $width_allow && $height != $height_allow) {
                    $this->form_validation->set_rules('banner_adv', 'lang:size_label_add', 'required|callback__banner_size_check');
                }
                #BEGIN: Set message
                $this->form_validation->set_message('required', $this->lang->line('required_message'));
                $this->form_validation->set_message('valid_email', $this->lang->line('valid_email_message'));
                $this->form_validation->set_message('_exist_title', $this->lang->line('_exist_title_message_add'));
                $this->form_validation->set_message('_is_phone', $this->lang->line('_is_phone_message'));
                $this->form_validation->set_message('_valid_enddate', $this->lang->line('_valid_enddate_message'));
                $this->form_validation->set_message('_banner_size_check', $this->lang->line('size_label_add'));
                $this->form_validation->set_message('is_natural_no_zero', $this->lang->line('is_natural_no_zero_message'));
                $this->form_validation->set_error_delimiters('<div class="div_errorpost">', '</div>');
                #END Set message
                if ($this->form_validation->run() != FALSE) {
                    $pathMain = "media/banners/";
                    #Create folder
                    $dir_adv = date('dmY');
                    if (!is_dir($pathMain . $dir_adv)) {
                        @mkdir($pathMain . $dir_adv, 0777, true);
                        $this->load->helper('file');
                        @write_file($pathMain . $dir_adv . '/index.html', '<p>Directory access is forbidden.</p>');
                    }
                    #BEGIN: Upload image
                    $config['upload_path'] = $pathMain . $dir_adv . '/';
                    $config['allowed_types'] = 'gif|jpg|jpeg|png';
                    $config['max_size'] = 2048;
                    $config['max_width'] = 1024;
                    $config['max_height'] = 1024;
                    $config['encrypt_name'] = true;
                    $this->load->library('upload', $config);
                    $enddate = mktime(0, 0, 0, (int)$this->input->post('endmonth_adv'), (int)$this->input->post('endday_adv'), (int)$this->input->post('endyear_adv'));
                    if ($this->upload->do_upload('banner_adv')) {
                        $uploadData = $this->upload->data();

                        $banner_adv = $uploadData['file_name'];
                        $isUploaded = true;
                    } else {
                        $isUploaded = false;
                    }
                    if ($this->input->post('active_adv') == '1') {
                        $active_adv = 1;
                    } else {
                        $active_adv = 0;
                    }

                    if ($url2 == '1') {
                        $page_adv = 'home';
                    } else {
                        $page_adv = 'product_sub';
                    }
                    $dataAdd = array(
                        'adv_title' => trim($this->filter->injection_html($this->input->post('title_adv'))),
                        'adv_banner' => $banner_adv,
                        'adv_dir' => $dir_adv,
                        'adv_link' => trim($this->input->post('link_adv')),
                        'adv_province' => (int)$this->input->post('province_shop'),
                        'cat_id' => (int)$this->input->post('cat_id'),
                        'user_id' => (int)$this->session->userdata('sessionUser'),
                        'adv_fullname' => trim($this->filter->injection_html($this->input->post('name_adv'))),
                        'adv_address' => trim($this->filter->injection_html($this->input->post('address_adv'))),
                        'adv_email' => trim($this->filter->injection_html($this->input->post('email_adv'))),
                        'adv_phone' => trim($this->filter->injection_html($this->input->post('phone_adv'))),
                        'adv_mobile' => trim($this->filter->injection_html($this->input->post('mobile_adv'))),
                        'adv_begindate' => mktime(0, 0, 0, date('m'), date('d'), date('Y')),
                        'adv_enddate' => $enddate,
                        'adv_status' => $active_adv,
                        'adv_position' => (int)$this->input->post('position_adv'),
                        'adv_page' => trim($this->filter->injection($page_adv)),
                        'adv_order' => (int)$this->input->post('order_adv')
                    );

                    if ($this->advertise_model->add($dataAdd)) {
                        $this->session->set_flashdata('message', 1);
                        $folder = folderWeb;
                        require_once($_SERVER['DOCUMENT_ROOT'] . $folder . '/PHPMailer/class.phpmailer.php');
                        require_once($_SERVER['DOCUMENT_ROOT'] . $folder . '/PHPMailer/class.pop3.php');
                        $message = '';
                        $message .= '<p>Người mua: <b>' . $this->input->post('name_adv') . '</b></p>';
                        $message .= '<p>Điện thoại: <b>' . $this->input->post('mobile_adv') . '</b></p>';
                        $message .= '<p>Email: <b>' . $this->input->post('email_adv') . '</b></p>';
                        $message .= '<p>Vị trí đặt quảng cáo: <b>' . $this->input->post('make_text') . '</b></p>';
                        $message .= '<p>Thuộc tỉnh thành: <b>' . $province->pre_name . '</b></p>';
                        $message .= '<p>Thuộc danh mục: <b>' . $catname->cat_name . '</b></p>';
                        $message .= '<p>Link liên kết: <b>' . trim($this->input->post('link_adv')) . '</b></p>';
                        $message .= '<p>Ngày bắt đầu : <b>' . date('d/m/Y : H:m:i', time()) . '</b></p>';
                        $message .= '<p>Ngày kết thúc : <b>' . date('d/m/Y : H:m:i', $enddate) . '</b></p>';
                        $this->smtpmailer(settingEmail_Advs, $this->lang->line('EMAIL_MEMBER_TT24H'), "Azibai.com", 'Đăng ký quảng cáo', $message);
                    }
                    redirect(base_url() . 'account/advs/buy/' . $url2, 'location');
                } else {
                    $data['title_adv'] = $this->input->post('title_adv');
                    $data['link_adv'] = $this->input->post('link_adv');
                    $data['position_adv'] = $this->input->post('position_adv');
                    // $data['order_adv'] = $this->input->post('order_adv');
                    $data['name_adv'] = $this->input->post('name_adv');
                    $data['make_text'] = $this->input->post('make_text');
                    $data['address_adv'] = $this->input->post('address_adv');
                    $data['phone_adv'] = $this->input->post('phone_adv');
                    $data['mobile_adv'] = $this->input->post('mobile_adv');
                    $data['email_adv'] = $this->input->post('email_adv');
                    $data['endday_adv'] = $this->input->post('endday_adv');
                    $data['endmonth_adv'] = $this->input->post('endmonth_adv');
                    $data['endyear_adv'] = $this->input->post('endyear_adv');
                    $data['cat_id'] = $this->input->post('cat_id');
                    $data['active_adv'] = $this->input->post('active_adv');
                }
            }
            #BEGIN: Advertise
            $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
            $this->load->model('advertise_model');
            $data['advertisePage'] = 'account';
            $this->db->distinct('adv_position');
            $this->db->select('adv_id, adv_page, adv_position, count(DISTINCT adv_position) AS total_pos, cat_id');
            $this->db->where("adv_status = 1 AND adv_enddate >= $currentDate");
            // $this->db->group_by('cat_id');
            $query = $this->db->get('tbtt_advertise');
            $result = $query->result();
            $query->free_result();
            $data['advertise'] = $result;
            //  $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_page, adv_position", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
            #END Advertise
            $data['category'] = $category;
            $data['userData'] = $userData;
            $this->load->view('home/account/advertise/add', $data);
        } else {
            #BEGIN: Advertise
            $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
            $this->load->model('advertise_model');
            $data['advertisePage'] = 'account';
            $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
            #END Advertise
            $this->load->view('home/account/advertise/defaults', $data);
        }
    }

    function edit()
    {   
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $params1 = $this->uri->segment(3);       
        if ($_REQUEST['staff'] == 1 || ($params1 != FALSE && $params1 != '')) {
            $data['menuPanelGroup'] = 4;
	        $data['menuSelected'] = 'task';           
        } else {
            $data['menuSelected'] = 'edit';            
        }
        $data['menuPanelGroup'] = 1;
        $data['menuType'] = 'account';
        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position, adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", 'adv_order', 'ASC');
        #END Advertise                
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
        $iduser = strtolower($this->uri->segment(3));
        $message = '';
        $data['back_link'] = 'account';
        if (isset($iduser) && !empty($iduser)) {
            $iduser = $iduser;
            $message = $this->input->post('message_regis');
            $data['back_link'] = 'account/staffs/all';
        } else {
            $iduser = (int)$this->session->userdata('sessionUser');
        }

        #END Unlink captcha
        if ($this->session->flashdata('sessionSuccessEditAccount')) {
            $data['successEditAccount'] = true;
        } else {
            if ($this->input->post('isPostAccount') && time() - (int)$this->session->userdata('sessionTimePosted') <= (int)settingTimePost) {
                redirect(base_url() . 'account/edit', 'location');
                die();
            }
            $this->load->library('form_validation');
            $data['successEditAccount'] = false;
            #BEGIN: Fetch data
            $data['province'] = $this->province_model->fetch("pre_id, pre_name", "pre_id != 1 AND pre_status = 1", "pre_order", "ASC");
            #END Fetch data
            #BEGIN: Get user

            $user = $this->user_model->get("*", "use_id = ". $iduser ." AND use_status = 1 AND (use_enddate >= $currentDate OR use_enddate = 0)");
            #END Get user
            if ((int)$this->session->userdata('sessionGroup') > 2) {
                #BEGIN: Set rules
                $this->form_validation->set_rules('fullname_account', 'lang:fullname_account_label_edit_account', 'trim|required');
                $this->form_validation->set_rules('address_account', 'lang:address_account_label_edit_account', 'trim|required');
                $this->form_validation->set_rules('province_account', 'lang:province_account_label_edit_account', 'trim|required|callback__exist_province');
                $this->form_validation->set_rules('district_account', 'lang:district_account_label_edit_account', 'trim|required|callback__exist_district');
                $this->form_validation->set_rules('phone_account', 'lang:phone_account_label_edit_account', 'trim|callback__is_phone');
                $this->form_validation->set_rules('mobile_account', 'lang:mobile_account_label_edit_account', 'trim|required|callback__is_phone');
                $this->form_validation->set_rules('yahoo_account', 'lang:yahoo_account_label_edit_account', 'trim|callback__valid_nick');
                $this->form_validation->set_rules('skype_account', 'lang:skype_account_label_edit_account', 'trim|callback__valid_nick');
            }
            #END Set rules
            #BEGIN: Set message
            $this->form_validation->set_message('required', $this->lang->line('required_message'));
            $this->form_validation->set_message('_valid_nick', $this->lang->line('_valid_nick_message'));
            $this->form_validation->set_message('matches', $this->lang->line('matches_message'));
            $this->form_validation->set_message('valid_email', $this->lang->line('valid_email_message'));
            $this->form_validation->set_message('_exist_province', $this->lang->line('_exist_province_message'));
            $this->form_validation->set_message('_exist_district', $this->lang->line('_exist_district_message'));
            $this->form_validation->set_message('_is_phone', $this->lang->line('_is_phone_message'));
            $this->form_validation->set_error_delimiters('<div class="div_errorpost">', '</div>');
            #END Set message
            if (($this->form_validation->run() != FALSE && (int)$this->session->userdata('sessionGroup') > 2) || ($this->input->post('day_account') && (int)$this->session->userdata('sessionGroup') == 2)) {
                #BEGIN: Upload image
                $this->load->library('upload');
                $this->load->library('image_lib');
                
                $pathUpload = "media/images/avatar";
                $dirUpload = $this->session->userdata('sessionUser');
                if (!is_dir($pathUpload .'/'. $dirUpload)) {
                    @mkdir($pathUpload .'/'. $dirUpload, 0777, true);
                    $this->load->helper('file');
                    @write_file($pathUpload .'/'. $dirUpload .'/index.html', '<p>Directory access is forbidden.</p>');
                }
                
                $config['upload_path'] = $pathUpload .'/'. $dirUpload .'/';
                $config['allowed_types'] = 'gif|jpg|jpeg|png';
                $config['encrypt_name'] = true;
                $config['max_size'] = '10240';
                $this->upload->initialize($config);
                
                $this->load->library('ftp');                
                $configftp['hostname'] = IP_CLOUDSERVER;
                $configftp['username'] = USER_CLOUDSERVER;
                $configftp['password'] = PASS_CLOUDSERVER;
                $configftp['port'] = PORT_CLOUDSERVER;
                $configftp['debug'] = FALSE;
                $this->ftp->connect($configftp);
                
                $pathTarget = '/public_html/media/images/avatar';
                
                if ($this->upload->do_upload('avatar')) {
                    $uploadData = $this->upload->data();
		    
                    if ($uploadData['is_image'] == TRUE) {
                        $image = $uploadData['file_name'];
                        /* Create thumbnail 1:1 */
                        $w = $uploadData['image_width']; 
			            $h = $uploadData['image_height'];
			            if($w != $h){			    
                            if($w > $h) {
                                $width = $h;
                                $height = $h;
                                $y_axis = 0;
                                $x_axis = ($w-$width)/2;				
                            }
                            if($w < $h) {
                                $width = $w;
                                $height = $w;
                                $y_axis = ($h-$height)/2;
                                $x_axis = 0;
                            }			
                            $configCrop = array(
                                'source_image' => $pathUpload . '/' . $dirUpload . '/' . $image,
                                'new_image' => $pathUpload . '/' . $dirUpload . '/' . $image,
                                'maintain_ratio' => FALSE,
                                'width' => $width, 'height' => $height,
                                'x_axis' => $x_axis, 'y_axis' => $y_axis
                            );	
                            $this->image_lib->clear();
                            $this->image_lib->initialize($configCrop);
                            $this->image_lib->crop();
                            
                        }
                        /* RESIZE */
                        $configResize['source_image'] = $pathUpload . '/' . $dirUpload . '/' . $image;
                        $configResize['new_image'] = $pathUpload . '/' . $dirUpload . '/' . $image;
                        $configResize['maintain_ratio'] = TRUE;
                        $configResize['width'] = 120;
                        $configResize['height'] = 120; 
                        $this->image_lib->clear();
                        $this->image_lib->initialize($configResize);
                        $this->image_lib->resize();
                                                 
                    }
                    /* Upload this image to cloud server */
                    $source_path = $pathUpload .'/'. $dirUpload . '/' . $image;
                    $target_path = $pathTarget . '/' . $image;
                    $this->ftp->upload($source_path, $target_path, 'auto', 0775);
                    /* Delete file amd folder upload */
                    if (file_exists($pathUpload . '/' . $dirUpload . '/index.html')) {
                        @unlink($pathUpload . '/' . $dirUpload . '/index.html');
                    }
                    array_map('unlink', glob($pathUpload .'/' . $dirUpload . '/*'));
                    @rmdir($pathUpload . '/' . $dirUpload);
                    /* Close connect ftp */
                    $this->ftp->close();
                } else {
                    $image = $this->input->post('avatar_hidden');
                }
                #END Upload image
                if ($this->input->post('sex_account') == '1') {
                    $sex_account = 1;
                } else {
                    $sex_account = 0;
                }

                $dataEdit = array(
                    'use_email' => trim(strtolower($this->filter->injection_html($this->input->post('email_account')))),
                    'use_fullname' => trim($this->filter->injection_html($this->input->post('fullname_account'))),
                    'use_birthday' =>  date('Y-m-d', mktime(0, 0, 0, (int)$this->input->post('month_account'), (int)$this->input->post('day_account'), (int)$this->input->post('year_account'))),
                    
                    'use_sex' => $sex_account,
                    'id_card' => trim($this->filter->injection_html($this->input->post('idcard_account'))),
                    'use_address' => trim($this->filter->injection_html($this->input->post('address_account'))),
                    'use_province' => (int)$this->input->post('province_account'),
                    'user_district' => $this->input->post('district_account'),
                    'use_phone' => trim($this->filter->injection_html($this->input->post('phone_account'))),
                    'use_mobile' => trim($this->filter->injection_html($this->input->post('mobile_account'))),
                    'use_yahoo' => trim($this->filter->injection_html($this->input->post('yahoo_account'))),
                    'use_skype' => trim($this->filter->injection_html($this->input->post('skype_account'))),
                    'use_message' => trim($this->filter->injection_html($this->input->post('message_regis'))),
                    'fax' => trim($this->filter->injection_html($this->input->post('fax'))),
                    'tax_code' => trim($this->filter->injection_html($this->input->post('tax_code_account'))),
                    'company_position' => trim($this->filter->injection_html($this->input->post('company_position'))),
                    'company_address' => trim($this->filter->injection_html($this->input->post('company_address'))),
                    'website' => trim($this->filter->injection_html($this->input->post('website'))),
                    'business_field' => $this->input->post('business_field'),
                    'avatar' => $image
                );
                //dd($dataEdit); die;
                if ($this->user_model->update($dataEdit, "use_id = " . $iduser)) {
                    $this->session->set_flashdata('sessionSuccessEditAccount', 1);
                    $this->session->set_flashdata('updateSuccess', 'Cập nhập thông tin thành công');
                }
                
                $this->session->set_userdata('sessionTimePosted', time());
                if (isset($params1) && !empty($params1)) {
                    if ($this->uri->segment(2) == 'editsubadmin') {
                        redirect(base_url() . 'account/listsubadmin', 'location');
                    }else{
                        redirect(base_url() . 'account/staffs/all', 'location');
                    }
                } else {
                    redirect(base_url() . 'account', 'location');
                }
            } else {

                $get_user_parent = $this->user_model->get("use_group,parent_id", "use_id = " . $user->parent_id . " AND use_status = 1 AND (use_enddate >= $currentDate OR use_enddate=0)");

                if ($get_user_parent->use_group == StaffStoreUser || $get_user_parent->use_group == StaffUser) {
                    $get_shop_parent = $this->shop_model->get("sho_link,domain", "sho_user = " . $get_user_parent->parent_id);
                } else {
                    $get_shop_parent = $this->shop_model->get("sho_link,domain", "sho_user = " . $user->parent_id);
                }
                $get_shop = $this->shop_model->get("sho_link,domain", "sho_user = " . $iduser . " AND sho_status = 1");

                $data['username_account'] = $user->use_username;
                $data['domain_parent'] = $get_shop_parent->domain; // get domain parent user
                $data['shop_user'] = $get_shop->sho_link; // get sholink user
                $data['domain_user'] = $get_shop->domain; // get domain user
                $data['parent_group'] = $get_user_parent->use_group;  // get group parent user
                $data['user_group'] = $user->use_group;  // get group parent user
                $data['shop_link_parent'] = $get_shop_parent->sho_link;  // get group parent user
                $data['email_account'] = $user->use_email;
                $data['fullname_account'] = $user->use_fullname;
                $data['day_account'] = date('d', $user->use_birthday);
                $data['month_account'] = date('m', $user->use_birthday);
                $data['year_account'] = date('Y', $user->use_birthday);
                $data['sex_account'] = $user->use_sex;
                $data['idcard_account'] = $user->id_card;
                $data['address_account'] = $user->use_address;
                $data['province_account'] = $user->use_province;
                $data['district_account'] = $user->user_district;
                $data['phone_account'] = $user->use_phone;
                $data['mobile_account'] = $user->use_mobile;
                $data['yahoo_account'] = $user->use_yahoo;
                $data['skype_account'] = $user->use_skype;
                $data['fax'] = $user->fax;
                $data['tax_code'] = $user->tax_code;
                $data['tax_type'] = $user->tax_type;
                $data['company_name'] = $user->company_name;
                $data['company_position'] = $user->company_position;
                $data['company_address'] = $user->company_address;
                $data['website'] = $user->website;
                $data['use_message'] = $user->use_message;
                $data['business_field'] = $user->business_field;
                $data['avatar'] = $user->avatar;
                $data['use_religion'] = $user->use_religion;
                $data['use_favorites'] = $user->use_favorites;
                $data['use_marriage'] = $user->use_marriage;
            }

            $data['district'] = $this->district_model->find_by(array('ProvinceCode' => $data['province_account']));
        }

        #Load view
        $this->load->view('home/account/defaults/edit', $data);
    }

    function upgrade_af()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
	    $data['menuPanelGroup'] = 3;
        $data['menuSelected'] = 'affiliate';
        $data['menuType'] = 'account';
        #END Menu
        #BEGIN: Unlink captcha
        $this->load->helper('unlink');
        // unlink_captcha($this->session->flashdata('sessionPathCaptchaEditAccount'));
        $data['successEditShopAccount'] = false;
        $iduser = (int)$this->session->userdata('sessionUser');
        #END Unlink captcha
        if ($this->session->flashdata('sessionSuccessEditAccount')) {
            $data['successEditAccount'] = true;
        } else {
            if ($this->input->post('isPostAccount') && time() - (int)$this->session->userdata('sessionTimePosted') <= (int)settingTimePost) {
                redirect(base_url() . 'account/edit', 'location');
                die();
            }
            $this->load->library('form_validation');
            $data['successEditAccount'] = false;
            #BEGIN: Fetch data

            $data['province'] = $this->province_model->fetch("pre_id, pre_name", "pre_id != 1 AND pre_status = 1", "pre_order", "ASC");
            #END Fetch data
            #BEGIN: Get user

            $user = $this->user_model->get("*", "use_id = " . $iduser . " AND use_status = 1 AND (use_enddate >= $currentDate OR use_enddate=0)");

            #END Get user
            #BEGIN: Set rules
            if ((int)$this->session->userdata('sessionGroup') > 2) {
                //$this->form_validation->set_rules('reemail_account', 'lang:reemail_account_label_edit_account', 'trim|required|matches[email_account]');
                $this->form_validation->set_rules('fullname_account', 'lang:fullname_account_label_edit_account', 'trim|required');
                $this->form_validation->set_rules('address_account', 'lang:address_account_label_edit_account', 'trim|required');
                $this->form_validation->set_rules('province_account', 'lang:province_account_label_edit_account', 'trim|required|callback__exist_province');
                $this->form_validation->set_rules('district_account', 'lang:district_account_label_edit_account', 'trim|required|callback__exist_district');
                $this->form_validation->set_rules('phone_account', 'lang:phone_account_label_edit_account', 'trim|callback__is_phone');
                $this->form_validation->set_rules('mobile_account', 'lang:mobile_account_label_edit_account', 'trim|required|callback__is_phone');
                $this->form_validation->set_rules('email_account', 'lang:email_account_label_edit_account', 'trim|required|callback__exist_email_edit');
            }
            #BEGIN: Set message
            $this->form_validation->set_message('required', $this->lang->line('required_message'));
            $this->form_validation->set_message('_valid_nick', $this->lang->line('_valid_nick_message'));
            $this->form_validation->set_message('matches', $this->lang->line('matches_message'));
            $this->form_validation->set_message('valid_email', $this->lang->line('valid_email_message'));
            $this->form_validation->set_message('_exist_province', $this->lang->line('_exist_province_message'));
            $this->form_validation->set_message('_exist_district', $this->lang->line('_exist_district_message'));
            $this->form_validation->set_message('_exist_email_edit', $this->lang->line('_exist_email_edit_message_edit_account'));
            $this->form_validation->set_message('_is_phone', $this->lang->line('_is_phone_message'));
            $this->form_validation->set_error_delimiters('<div class="div_errorpost">', '</div>');
            #END Set message

            if (($this->form_validation->run() != FALSE && (int)$this->session->userdata('sessionGroup') > 2) || ((int)$this->session->userdata('sessionGroup') <= 2 && $this->input->post('email_account'))) {
                #BEGIN: Upload image
                $this->load->library('upload');
                $pathImage = "media/images/avatar/";
                #Create folder
                $image = 'none.gif';
                if (!is_dir($pathImage)) {
                    @mkdir($pathImage, 0777, true);
                    $this->load->helper('file');
                    @write_file($pathImage . '/index.html', '<p>Directory access is forbidden.</p>');
                }
                $config['upload_path'] = $pathImage;
                $config['allowed_types'] = 'gif|jpg|jpeg|png';
                $config['max_size'] = 10240;#KB
                $config['max_width'] = 10240;#px
                $config['max_height'] = 10240;#px
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if ($this->upload->do_upload('avatar')) {
                    $uploadData = $this->upload->data();
                    if ($uploadData['is_image'] == TRUE) {
                        $image = $uploadData['file_name'];
                        #BEGIN: Create thumbnail
                        $this->load->library('image_lib');
                        if (file_exists($pathImage . $image)) {
                            $maxWidth = 120;#px
                            $maxHeight = 120;#px
                            $sizeImage = size_thumbnail($pathImage . $image, $maxWidth, $maxHeight);
                            $configImage['source_image'] = $pathImage . $image;
                            $configImage['new_image'] = $pathImage . 'thumbnail_' . $image;
                            $configImage['maintain_ratio'] = TRUE;
                            $configImage['width'] = $sizeImage['width'];
                            $configImage['height'] = $sizeImage['height'];                                                 
                            $this->image_lib->initialize($configImage);                            
                            $this->image_lib->resize();
                        }
                        #END Create thumbnail
                    } elseif (file_exists($pathImage . $uploadData['file_name'])) {
                        @unlink($pathImage . $uploadData['file_name']);
                    }
                } else {
                    $image = $this->input->post('avatar_hidden');
                }
                #END Upload image
                if ($this->input->post('sex_account') == '1') {
                    $sex_account = 1;
                } else {
                    $sex_account = 0;
                }
                $dataEdit = array(
                    'use_email' => trim(strtolower($this->filter->injection_html($this->input->post('email_account')))),
                    'use_fullname' => trim($this->filter->injection_html($this->input->post('fullname_account'))),
                    'use_birthday' =>  date('Y-m-d', mktime(0, 0, 0, (int)$this->input->post('month_account'), (int)$this->input->post('day_account'), (int)$this->input->post('year_account'))),
                    'use_sex' => $sex_account,
                    'id_card' => trim($this->filter->injection_html($this->input->post('idcard_account'))),
                    'use_address' => trim($this->filter->injection_html($this->input->post('address_account'))),
                    'use_province' => (int)$this->input->post('province_account'),
                    'user_district' => (int)$this->input->post('district_account'),
                    'use_mobile' => trim($this->filter->injection_html($this->input->post('mobile_account'))),
                    'bank_name' => trim($this->filter->injection_html($this->input->post('namebank_regis'))),
                    'bank_add' => trim($this->filter->injection_html($this->input->post('addbank_regis'))),
                    'account_name' => trim($this->filter->injection_html($this->input->post('accountname_regis'))),
                    'num_account' => trim($this->filter->injection_html($this->input->post('accountnum_regis'))),
                    'use_group' => 2,
                    'tax_type' => 0,
                    'tax_code' => trim($this->filter->injection_html($this->input->post('tax_code_account'))),
                    'avatar' => $image
                );
                if ($this->user_model->update($dataEdit, "use_id = " . $iduser)) {
                    $this->session->set_flashdata('sessionSuccessEditAccount', 1);
                    $this->session->set_userdata('sessionGroup', 2);

                    //-----create af shop-----------

                    $shopCat = 1;
                    $shopDesc = "Gian hàng Cộng tác viên online azibai";
                    $ShopLink = 'store' . $iduser;
                    $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
                    $EndDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));

                    $dataShopRegister = array(
                        'sho_name' => 'Cộng tác viên online',
                        'sho_descr' => $shopDesc,
                        'sho_address' => '92 Trần Quốc Toản',
                        'sho_link' => $ShopLink,
                        'sho_logo' => 'default-logo.png',
                        'sho_dir_logo' => 'defaults',
                        'sho_banner' => 'default-banner.jpg',
                        'sho_dir_banner' => 'defaults',
                        'sho_province' => (int)$this->input->post('province_account'),
                        'sho_district' => (int)$this->input->post('district_account'),
                        'sho_category' => $shopCat,
                        'sho_phone' => trim($this->filter->injection_html($this->input->post('mobile_account'))),
                        'sho_mobile' => trim($this->filter->injection_html($this->input->post('mobile_account'))),
                        'sho_user' => $iduser,
                        'sho_begindate' => $currentDate,
                        'sho_enddate' => $EndDate,
                        'sho_view' => 1,
                        'sho_status' => 1,
                        'sho_style' => 'default',
                        'sho_email' => trim(strtolower($this->filter->injection_html($this->input->post('email_account'))))
                    );
                    $this->shop_model->add($dataShopRegister);

                    // -------end af shop--------
                }
                $this->session->set_userdata('sessionTimePosted', time());


                redirect(base_url() . trim(uri_string(), '/'), 'location');

            } else {
                $data['username_account'] = $user->use_username;
                $data['email_account'] = $user->use_email;
                $data['fullname_account'] = $user->use_fullname;
                $data['day_account'] = date('d', $user->use_birthday);
                $data['month_account'] = date('m', $user->use_birthday);
                $data['year_account'] = date('Y', $user->use_birthday);
                $data['sex_account'] = $user->use_sex;
                $data['idcard_account'] = $user->id_card;
                $data['address_account'] = $user->use_address;
                $data['province_account'] = $user->use_province;
                $data['district_account'] = $user->user_district;
                $data['mobile_account'] = $user->use_mobile;
                $data['tax_code'] = $user->tax_code;
                $data['tax_type'] = $user->tax_type;
                $data['bank_name'] = $user->bank_name;
                $data['bank_add'] = $user->bank_add;
                $data['account_name'] = $user->account_name;
                $data['num_account'] = $user->num_account;
                $data['avatar'] = $user->avatar;

                // post
                $data['email_post'] = trim($this->filter->injection_html($this->input->post('email_account')));
                $data['fullname_post'] = trim($this->filter->injection_html($this->input->post('fullname_account')));
                $data['day_post'] = trim($this->filter->injection_html($this->input->post('day_account')));
                $data['month_post'] = trim($this->filter->injection_html($this->input->post('month_account')));
                $data['year_post'] = trim($this->filter->injection_html($this->input->post('year_account')));
                $data['sex_post'] = trim($this->filter->injection_html($this->input->post('sex_account')));
                $data['idcard_post'] = trim($this->filter->injection_html($this->input->post('idcard_account')));
                $data['address_post'] = trim($this->filter->injection_html($this->input->post('address_account')));
                $data['province_post'] = trim($this->filter->injection_html($this->input->post('province_account')));
                $data['district_post'] = trim($this->filter->injection_html($this->input->post('district_account')));
                $data['mobile_post'] = trim($this->filter->injection_html($this->input->post('mobile_account')));
                $data['tax_code_post'] = trim($this->filter->injection_html($this->input->post('tax_code_account')));
                $data['bank_name_post'] = trim($this->filter->injection_html($this->input->post('namebank_regis')));
                $data['bank_add_post'] = trim($this->filter->injection_html($this->input->post('addbank_regis')));
                $data['account_name_post'] = trim($this->filter->injection_html($this->input->post('accountname_regis')));
                $data['num_account_post'] = trim($this->filter->injection_html($this->input->post('accountnum_regis')));
                $data['avatar_post'] = trim($this->filter->injection_html($this->input->post('avatar_hidden')));

            }
            #BEGIN: Create captcha
            //            $this->load->library('captcha');
            //            $codeCaptcha = $this->captcha->code(6);
            //            $this->session->set_flashdata('sessionCaptchaEditAccount', $codeCaptcha);
            //            $imageCaptcha = 'templates/captcha/' . md5(microtime()) . '.' . (int)$this->session->userdata('sessionUser') . 'edia.jpg';
            //            $this->session->set_flashdata('sessionPathCaptchaEditAccount', $imageCaptcha);
            //            $this->captcha->create($codeCaptcha, $imageCaptcha);
            //            if (file_exists($imageCaptcha)) {
            //                $data['imageCaptchaEditAccount'] = $imageCaptcha;
            //            }
            $this->load->model('district_model');
            $data['district'] = $this->district_model->find_by(array('ProvinceCode' => $data['province_account']));
        }
        #Load view
        $this->load->view('home/affiliate/upgradeaf', $data);
    }

    function changepassword()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuSelected'] = 'changepassword';
        $data['menuType'] = 'account';
	    $data['menuPanelGroup'] = 1;
        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #BEGIN: Unlink captcha
        $this->load->helper('unlink');
        unlink_captcha($this->session->flashdata('sessionPathCaptchaChangePasswordAccount'));
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Unlink captcha
        if ($this->session->flashdata('sessionSuccessChangePasswordAccount')) {
            $data['successChangePasswordAccount'] = true;
        } else {

            $this->load->library('form_validation');
            $data['successChangePasswordAccount'] = false;
            if ($this->input->post('captcha_changepass') && time() - (int)$this->session->userdata('sessionTimePosted') > (int)settingTimePost) {
                #BEGIN: Set rules
                $this->form_validation->set_rules('oldpassword_changepass', 'lang:oldpassword_changepass_label_change_password', 'trim|required|callback__valid_old_password');
                $this->form_validation->set_rules('password_changepass', 'lang:password_changepass_label_change_password', 'trim|required|min_length[6]|max_length[35]');
                $this->form_validation->set_rules('repassword_changepass', 'lang:repassword_changepass_label_change_password', 'trim|required|matches[password_changepass]');
                //$this->form_validation->set_rules('captcha_changepass', 'lang:captcha_changepass_label_change_password', 'required|callback__valid_captcha_changepassword');
                #END Set rules
                #BEGIN: Set message
                $this->form_validation->set_message('required', $this->lang->line('required_message'));
                $this->form_validation->set_message('matches', $this->lang->line('matches_message'));
                $this->form_validation->set_message('min_length', $this->lang->line('min_length_message'));
                $this->form_validation->set_message('max_length', $this->lang->line('max_length_message'));
                $this->form_validation->set_message('_valid_old_password', $this->lang->line('_valid_old_password_message_change_password'));
                $this->form_validation->set_message('_valid_captcha_changepassword', $this->lang->line('_valid_captcha_changepassword_message_change_password'));
                $this->form_validation->set_error_delimiters('<div class="div_errorpost">', '</div>');
                #END Set message
                if ($this->form_validation->run() != FALSE) {
                    $this->load->library('hash');

                    $salt = $this->hash->key(8);
                    $dataChange = array(
                        'use_password' => $this->hash->create($this->input->post('password_changepass'), $salt, 'md5sha512'),
                        'use_salt' => $salt
                    );
                    if ($this->user_model->update($dataChange, "use_id = " . (int)$this->session->userdata('sessionUser'))) {
                        $this->session->set_flashdata('sessionSuccessChangePasswordAccount', 1);
                    }
                    $this->session->set_userdata('sessionTimePosted', time());
                    redirect(base_url() . trim(uri_string(), '/'), 'location');
                }
            }

            #BEGIN: Create captcha
            $aCaptcha = $this->createCaptcha(md5(microtime()) . '.' . (int)$this->session->userdata('sessionUser') . 'chpa.jpg');
            if(!empty($aCaptcha)) {
                $data['codeCaptcha']                = $aCaptcha['captcha']; 
                $data['imageCaptchaChangePasswordAccount']    = $aCaptcha['imageCaptchaContact'];

                $this->session->set_userdata('sessionCaptchaChangePasswordAccount', $aCaptcha['captcha']);
                $this->session->set_userdata('sessionPathCaptchaChangePasswordAccount', $aCaptcha['imageCaptchaContact']); 
            }            
            #END Create captcha
        }
        #Load view
        $this->load->view('home/account/defaults/changepassword', $data);
    }

    function personaldomain() {
        $group_id = (int)$this->session->userdata('sessionGroup');
        $user_id = (int)$this->session->userdata('sessionUser');
            
        $data['menuPanelGroup'] = 4; 
        $data['menuSelected'] = 'personaldomain';
        $data['menuType'] = 'account';

        $this->load->model('domains_model');

        #BEGIN: Get shop
        $oUser = $this->user_model->get('*', 'use_id = '. $user_id);
        $result = $this->package_user_model->getPackageDomain($user_id,iDomainPerson);
 
        if(!empty($result)) {
            if ($this->input->post('txtdomain')) {
                $domain = trim($this->filter->injection_html($this->input->post('txtdomain')));
                
                $get_ip_domain = gethostbynamel($domain);
                foreach ($get_ip_domain as $v) {
                    $ip = $v;
                    break;
                }

                // Check env
                if (ENVIRONMENT == 'production') {                
                    if ($ip != SERVER_LOADBALANCER) {                
                        $data['msg'] = 'Tên miền của bạn chưa trỏ về Server có IP là: '. SERVER_LOADBALANCER;
                    } else {
                        $this->load->model('domains_model');
                        $_exist = $this->domains_model->get('*', 'domain = "'. $domain .'"');
                        if ($_exist) {
                            $data['msg'] = 'Tên miền này đã tồn tại trên hệ thống vui lòng kiểm tra lại!';                   
                        } else {
                            $dataDomain = array(
                                'domain'        => $domain,
                                'domain_type'   => 1,
                                'shoplink'      => 'profile/'.$user_id,
                                'status'        => 0,
                                'userid'        => $user_id,                
                                'shopid'        => 0,
                                'note'          => 'Chưa xử lý...'
                            );

                            if ($this->domains_model->add($dataDomain)) {
                                $this->user_model->update(array('domain_person' => $domain), "use_id = " . $user_id);
                                $data['msg'] = 'Cập nhật thành công !';
                            } else {
                                $data['msg'] = "Cập nhật không thành công. Vui lòng thử lại!";
                            }

                            /**
                                Continue, a script name "crossdomain.php" into root dir of server .48(loadbalancing), will run loop 5'/time to update.
                            **/
                        }
                    }   
                } else {
                    $ip = '::1';
                    if ($ip != $_SERVER['SERVER_ADDR']) {                    
                        $data['msg'] = 'Tên miền của bạn chưa trỏ về Server IP '.$_SERVER['SERVER_ADDR'];                    
                    } else {
                        $this->load->model('domains_model');
                        $_exist = $this->domains_model->get('*', 'domain = "'. $domain .'"');
                        if ($_exist) {
                            $data['msg'] = 'Tên miền này đã tồn tại trên hệ thống vui lòng kiểm tra lại!';                   
                        }else {
                            $check = preg_match(
                                '/^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+$/',
                                $domain
                            );

                            if ($check) {
                                $dataDomain = array(
                                    'domain'        => $domain,
                                    'domain_type'   => 1,
                                    'shoplink'      => 'profile/'.$user_id,
                                    'status'        => 0,
                                    'userid'        => $user_id,                
                                    'shopid'        => 0,
                                    'note'          => 'Chưa xử lý...'
                                );

                                if ($this->domains_model->add($dataDomain)) {
                                    $this->user_model->update(array('domain_person' => $domain), "use_id = " . $user_id);
                                    $data['msg'] = 'Cập nhật thành công !';
                                } else {
                                    $data['msg'] = "Cập nhật không thành công. Vui lòng thử lại!";
                                }
                                
                            }else {
                                $data['msg'] = 'Tên miền của bạn không đúng cấu trúc. Vui lòng nhập lại';
                            }

                        }
                    }
                }
            } 
        }else {
            //Nếu không có, thông báo không cho mở, và tạo link mua gói DV này
            $data['msg'] = 'Trang cá nhân của bạn hiện không sử dụng dịch vụ cấu hình tên miền. Hãy click <a href="' . base_url() . 'shop/service">vào đây</a> để mua!';
        }
        
        $data['oUser'] = $oUser;

        #Load View
        $this->load->view('home/account/defaults/domain', $data);
    }

    function shop()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser 
            || $group_id == AffiliateUser 
            || $group_id == BranchUser) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        $data['flash_message'] = $this->session->flashdata('flash_message');
        
        $data['user_group'] = (int)$this->session->userdata('sessionGroup');
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'shop';
        $data['menuType'] = 'account';
        #END Menu        
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #BEGIN: Unlink captcha
        $this->load->helper('unlink');
        unlink_captcha($this->session->flashdata('sessionPathCaptchaEditShopAccount'));
        #END Unlink captcha
        $this->load->model('shop_category_model');
        //$cat_level_0 = $this->shop_category_model->fetch("*", "parent_id = 0 AND cat_status = 1", "cat_order, cat_id", "ASC");
        //        if (isset($cat_level_0)) {
        //            foreach ($cat_level_0 as $key => $item) {
        //                $cat_level_1 = $this->shop_category_model->fetch("*", "parent_id = " . (int)$item->cat_id . " AND cat_status = 1");
        //                $cat_level_0[$key]->child_count = count($cat_level_1);
        //            }
        //        }
        //        $data['catlevel0'] = $cat_level_0;
        $maxorder = $this->shop_category_model->get("max(cat_order) as maxorder");
        $data['next_order'] = (int)$maxorder->maxorder + 1;
        $maxindex = $this->shop_category_model->get("max(cat_index) as maxindex");
        $data['next_index'] = (int)$maxindex->maxindex + 1;

        if ($this->session->flashdata('sessionSuccessEditShopAccount')) {
            $data['successEditShopAccount'] = true;
        } else {
            if ($this->input->post('isPostShopAccount') && time() - (int)$this->session->userdata('sessionTimePosted') <= (int)settingTimePost) {
                redirect(base_url() . 'account/shop', 'location');
                die();
            }
                    
            $data['successEditShopAccount'] = false;
            #BEGIN: Get shop
            $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser') . ' AND sho_status = 1');
            if(count($shop) > 0){
                $data['shopid'] = $shop->sho_id;            
                $this->load->model('branch_model');
                $khaibaoKho = '';
                if ($this->session->userdata('sessionGroup') != AffiliateStoreUser) {
                    $shop_rule = $this->branch_model->getConfig("*", "bran_id = " . (int)$this->session->userdata('sessionUser'));
                    $rule = explode(",", $shop_rule->config_rule);
                    if (!in_array('51', $rule)) {
                        $khaibaoKho = 'disabled="true"';
                    }
                }

                $data['khaibaoKho'] = $khaibaoKho;

                $user = $this->user_model->get("*", "use_id = " . (int)$this->session->userdata('sessionUser') . " AND use_status = 1 AND (use_enddate >= $currentDate OR use_enddate = 0)");
                #BEGIN: Fetch category
                $this->load->model('category_model');
                $data['category'] = $this->category_model->fetch("cat_id, cat_name", "parent_id=0 AND cate_type = 0", "cat_name", "ASC");
                #END Fetch category
                #BEGIN: Fetch province
                $data['province'] = $this->province_model->fetch("pre_id, pre_name", "pre_id != 1 AND pre_status = 1", "pre_order", "ASC");
                #END Fetch province
                #BEGIN: Load style
                $this->load->library('folder');
                $data['style'] = $this->folder->load('templates/shop');
                #END Load style
                $this->load->library('form_validation');

                $this->form_validation->set_rules('link_shop', 'shop link', 'trim|required|edit_unique[tbtt_shop.sho_link.sho_user.' . (int)$this->session->userdata('sessionUser') . ']');
                #BEGIN: Set message
                $this->form_validation->set_message('required', $this->lang->line('required_message'));
                $this->form_validation->set_message('edit_unique', 'Link shop này đã tồn tại, Vui lòng nhập link shop khác');
                
                //$this->form_validation->set_rules('website_shop', 'Website', 'trim|strip_tags|callback_link_check');
                $this->form_validation->set_error_delimiters('<div class="div_errorpost">', '</div>');

                if ($this->form_validation->run() != FALSE) {
                    $this->load->library('upload');
                    $this->load->library('image_lib');
                    $pathUpload = "media/shop/";
                    $dirUpload = $this->session->userdata('sessionUser');                
                    if (!is_dir($pathUpload . $dirUpload)) {                    
                        @mkdir($pathUpload . $dirUpload, 0777, true);
                        $this->load->helper('file');
                        @write_file($pathUpload . $dirUpload . '/index.html', '<p>Directory access is forbidden.</p>');                    
                    }
                    $config['upload_path'] = $pathUpload . $dirUpload . '/';
                    $config['allowed_types'] = 'gif|jpg|jpeg|png';
                    $config['encrypt_name'] = true;
                    $this->upload->initialize($config);

                    $this->load->library('ftp');
                    // open connect ftp
                    $config['hostname'] = IP_CLOUDSERVER;
                    $config['username'] = USER_CLOUDSERVER;
                    $config['password'] = PASS_CLOUDSERVER;
                    $config['port']     = PORT_CLOUDSERVER;                
                    $config['debug']    = FALSE;
                    $this->ftp->connect($config);

                    /*START: upload background
                    $pathBackground = '/public_html/media/shop/bgs/';
                    $listdir = array(); m 
                    $listdir = $this->ftp->list_files($pathBackground);                 
                    if (count($shop) == 1) {
                        $dirBackground = $shop->sho_dir_banner;
                    } else {
                        $dirBackground = date('dmY');                    
                    }
                    // if $dirTarget name exists in array returned by nlist in current '.' dir
                    if (! in_array($dirBackground, $listdir)) {                    
                        $this->ftp->mkdir($pathBackground . $dirBackground, 0775);
                    } 

                    $bg_shop = '';
                    if ($this->upload->do_upload('bgimg_shop')) {
                        $uploadbg = $this->upload->data();
                        //kiểm tra và xóa file
                        if ($shop->sho_bgimg != '' && file_exists(DOMAIN_CLOUDSERVER . 'media/images/bgs/' . $dirBackground . '/' . $shop->sho_bgimg)) {
                            //$this->ftp->delete_file($pathBackground.$dirBackground.'/'.$shop->sho_bgimg);
                        }
                        $bg_shop = $uploadbg['file_name']; 

                        $source_path = $pathUpload . $dirUpload . '/' . $bg_shop; 
                        $target_path = $pathBackground . $dirBackground . '/' . $bg_shop;
                        $this->ftp->upload($source_path, $target_path , 'auto', 0775); 

                        $isBGUploaded = true;
                    } else {
                        $isBGUploaded = false;
                    }
                    if ($isBGUploaded == false) {
                        if ($bg_shop && $shop->sho_id) {
                            redirect(base_url() . 'account/shop', 'location');
                            die();
                        }
                    }
                    #END: upload background*/

                    #BEGIN: Upload logo
                    $pathLogo = '/public_html/media/shop/logos/';
                    $listdir = array();
                    $listdir = $this->ftp->list_files($pathLogo);                 
                    if (count($shop) == 1 && $shop->sho_dir_logo != 'defaults' ) {
                        $dirLogo = $shop->sho_dir_logo;
                    } else {
                        $dirLogo = date('dmY');                    
                    }
                    // if $dirTarget name exists in array returned by nlist in current '.' dir
                    if (! in_array($dirLogo, $listdir)) {                    
                        $this->ftp->mkdir($pathLogo . $dirLogo, 0775);
                    } 

                    $logo_shop = '';
                    if ($this->upload->do_upload('logo_shop')) {
                        $uploadLogo = $this->upload->data();
                        if ($uploadLogo['is_image'] == TRUE) {
                            // Check and removal current image
                            if ($shop->sho_logo != '' && $shop->sho_dir_logo != 'defaults') {
                                $this->ftp->delete_file($pathLogo . $dirLogo . '/' . $shop->logo_shop);
                            }
                            $logo_shop = $uploadLogo['file_name'];
                            // Resize image
                            $configResize = array(
                                    'source_image'      => $pathUpload . $dirUpload . '/' . $logo_shop,
                                    'new_image'         => $pathUpload . $dirUpload . '/' . $logo_shop,
                                    'maintain_ratio'    => true,
                                    'width'             => '200',
                                    'height'            => '1',                               
                                    'master_dim'        => 'width'                              
                            );
                            $this->image_lib->clear();
                            $this->image_lib->initialize($configResize);
                            $this->image_lib->resize();
                            // Upload to cloudserver
                            $source_path = $pathUpload . $dirUpload . '/' . $logo_shop; 
                            $target_path = $pathLogo . $dirLogo . '/' . $logo_shop;                    
                            $this->ftp->upload($source_path, $target_path , 'auto', 0775);
                        }
                        $isLogoUploaded = true;                    
                    } else {
                        $isLogoUploaded = false;
                    }
                    if ($isLogoUploaded == false) {
                        if ($shop->sho_id && $logo_shop) {
                            redirect(base_url() . 'account/shop', 'location');
                            die();
                        }
                    }
                    #END Upload logo

					#BEGIN: Upload banner
                    $pathBanner = '/public_html/media/shop/banners/';
                    $listdir = array();
                    $listdir = $this->ftp->list_files($pathBanner);                 

                    if (count($shop) == 1 && $shop->sho_dir_banner != '') {
                        $dirBanner = $shop->sho_dir_banner;
                    } else {
                        $dirBanner = date('dmY');                    
                    }

                    // if $dirTarget name exists in array returned by nlist in current '.' dir
                    if (! in_array($dirBanner, $listdir) ) {                    
                        $this->ftp->mkdir($pathBanner . $dirBanner, 0775);
                    } 

                    $banner_shop = '';
                    if ($this->upload->do_upload('banner_shop')) {
                        $uploadBanner = $this->upload->data();
                        if ($uploadBanner['is_image'] == TRUE) {
                            // Check and removal current image
                            if ( $shop->sho_banner != '' && $shop->sho_dir_banner != 'defaults') {
                                $this->ftp->delete_file($pathBanner.$dirBanner.'/'.$shop->sho_banner); 
                            }                        
                            $banner_shop = $uploadBanner['file_name'];
                            // Resize image
                            $configResize = array(
                                    'source_image'      => $pathUpload . $dirUpload . '/' . $banner_shop,
                                    'new_image'         => $pathUpload . $dirUpload . '/' . $banner_shop,
                                    'maintain_ratio'    => true,
                                    'width'             => '1600',
                                    'height'            => '1',                               
                                    'master_dim'        => 'width'                              
                            );
                            $this->image_lib->clear();
                            $this->image_lib->initialize($configResize);
                            $this->image_lib->resize();
                            // Upload to cloudserver
                            $source_path = $pathUpload . $dirUpload . '/' . $banner_shop; 
                            $target_path = $pathBanner . $dirBanner . '/' . $banner_shop;                    
                            $this->ftp->upload($source_path, $target_path , 'auto', 0775);
                        }
                        $isBannerUploaded = true;                    
                    } else {
                        $isBannerUploaded = false;
                    }

                    if ($isBannerUploaded == false) {
                        if ($shop->sho_id && $banner_shop) {
                            redirect(base_url() . 'account/shop', 'location');
                            die();
                        }
                    }
                    #END Upload banner

                    // Remove DirUpload and FileUpload     
                    if (file_exists($pathUpload . $dirUpload . '/index.html')) {
                        @unlink($pathUpload . $dirUpload . '/index.html');
                    }

                    array_map('unlink', glob($pathUpload . $dirUpload .'/*'));
                    @rmdir($pathUpload . $dirUpload);                
                    // Close connect ftp    
                    $this->ftp->close();                

                    if ($this->input->post('saleoff_shop') == '1') {
                        $saleoff_shop = 1;
                    } else {
                        $saleoff_shop = 0;
                    }

                    if ($shop && $logo_shop == '') {
                        $logo_shop = $shop->sho_logo;
                    }

                    if ((int)$this->session->userdata('sessionGroup') < 2) {
                        $sho_dir_banner = "defaults";
                        $dir_logo = "defaults";
                        $logo_shop = "default-logo.png";
                        $banner_shop = "default-banner.jpg";
                    }
                    if ($shop && $banner_shop == '') {
                        $banner_shop = $shop->sho_banner;
                    }
                    if ($shop && $bg_shop == '') {
                        $bg_shop = $shop->sho_bgimg;
                    }

                    if ($this->input->post('bg_repeat_x') == '1') {
                        $bg_repeat_x = 1;
                    } else {
                        $bg_repeat_x = 0;
                    }
                    if ($this->input->post('bg_repeat_y') == '1') {
                        $bg_repeat_y = 1;
                    } else {
                        $bg_repeat_y = 0;
                    }

                    if (count($shop) == 1) {
                        $active_shop = 1;
                    } else {
                        $active_shop = 1;
                    }
                    if ((int)$this->session->userdata('sessionGroup') < 2) {
                        $shop_linkQ = $this->session->userdata('sessionUsername');
                    } else {
                        $shop_linkQ = trim(strtolower($this->filter->injection_html($this->input->post('link_shop'))));
                    }
                    $sho_enddate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));

                    $sho_provinces = "";
                    if ($this->input->post('more_provinces')) {
                        $sho_provinces = ',' . implode(",", $this->input->post('more_provinces')) . ',';
                    }
                    if (count($shop) > 0 && $shop->sho_begindate != '') {
                        $sho_begindate = $shop->sho_begindate;
                    } else {
                        $sho_begindate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
                    }

                    $dataEdit = array(
                        'sho_name' => trim($this->filter->injection_html($this->input->post('name_shop'))),
                        'sho_descr' => trim($this->filter->injection_html($this->filter->clear($this->input->post('descr_shop')))),
                        'sho_link' => $shop_linkQ,
                        'sho_logo' => $logo_shop,
                        'sho_dir_logo' => $dirLogo,
                        'sho_banner' => $banner_shop,
                        'sho_dir_banner' => $dirBanner,
                        'sho_bgimg' => $bg_shop,
                        'sho_dir_bging' => $dirbanner,
                        'sho_bgcolor' => $this->input->post('colorpickertest'),
                        'shop_fax' => $this->input->post('fax_shop'),
                        'sho_category' => (int)$this->input->post('hd_category_id'),
                        'sho_cat_style' => (int)$this->input->post('sho_cat_style'),
                        'sho_address' => trim($this->filter->injection_html($this->input->post('address_shop'))),
                        'sho_province' => (int)$this->input->post('province_shop'),
                        'sho_district' => $this->input->post('district_shop'),
                        'sho_provinces' => $sho_provinces,
                        'sho_phone' => trim($this->filter->injection_html($this->input->post('phone_shop'))),
                        'sho_mobile' => trim($this->filter->injection_html($this->input->post('mobile_shop'))),
                        'sho_email' => trim($this->filter->injection_html($this->input->post('email_shop'))),
                        'sho_yahoo' => trim($this->filter->injection_html($this->input->post('yahoo_shop'))),
                        'sho_skype' => trim($this->filter->injection_html($this->input->post('skype_shop'))),
                        'sho_website' => trim(strip_tags($this->input->post('website_shop'))),
                        'sho_facebook' => trim($this->filter->injection_html($this->input->post('facebook_shop'))),
                        'sho_twitter' => trim($this->filter->injection_html($this->input->post('twitter_shop'))),
                        'sho_youtube' => trim($this->filter->injection_html($this->input->post('youtube_shop'))),
                        'sho_google_plus' => trim($this->filter->injection_html($this->input->post('google_plus_shop'))),
                        'sho_vimeo' => trim($this->filter->injection_html($this->input->post('vimeo_shop'))),
                        'shop_video' => trim($this->filter->injection_html($this->input->post('shop_video'))),
                        'sho_style' => trim($this->filter->injection_html($this->input->post('style_shop'))),
                        'sho_saleoff' => $saleoff_shop,
                        'sho_bg_repeat_x' => $bg_repeat_x,
                        'sho_bg_repeat_y' => $bg_repeat_y,
                        'sho_user' => (int)$this->session->userdata('sessionUser'),
                        'sho_view' => 1,
                        'sho_status' => 1,
                        'sho_begindate' => $sho_begindate,
                        'sho_enddate' => $sho_enddate,
                        // 'shop_type' => $this->input->post('shop_type'),
                        'sho_description' => $this->input->post('sho_description'),
                        'sho_keywords' => $this->input->post('sho_keywords')
                    );

                    
                    
                    if($khaibaoKho == ''){ //CN duoc quyen cau hinh kho
                        $dataEdit['sho_kho_address'] = trim($this->filter->injection_html($this->input->post('address_kho_shop')));
                        $dataEdit['sho_kho_province'] = (int)$this->input->post('province_kho_shop');
                        $dataEdit['sho_kho_district'] = $this->input->post('district_kho_shop');
                    }
                    
                    $dataupgrade = array('use_group' => (int)$this->session->userdata('sessionGroup'));
                    if (count($shop) == 1) {
                        if ($this->shop_model->update($dataEdit, "sho_user = " . (int)$this->session->userdata('sessionUser'))) {
                            $this->user_model->update($dataupgrade, "use_id = " . (int)$this->session->userdata('sessionUser') . " AND use_status = 1 AND (use_enddate >= $currentDate OR use_enddate=0)");
                            $this->session->set_userdata('sessionGroup', (int)$this->session->userdata('sessionGroup'));
                            $this->session->set_flashdata('sessionSuccessEditShopAccount', 1);

                            //cap nhap sho_link domain.txt
                            if ($shop->domain != '') {
                                $fileName = "domain.txt";
                                $strdomain = '';
                                foreach (file($fileName) as $key => $values) {
                                    $arr = explode(' ', $values);
                                    foreach ($arr as $key => $value) {
                                        if ($key == 1) {
                                        }
                                        if (strpos($value, $shop->domain) !== false) {
                                            $strdomain = $arr[0] . " " . $shop->sho_link;
                                            $thaythe = $shop->domain . " " . $shop_linkQ;
                                        }
                                    }
                                }
                                $contents = file_get_contents($fileName);
                                $contents = str_replace($strdomain, $thaythe, $contents);
                                file_put_contents($fileName, $contents);
                            }
                            //end cap nhap sho_link domain.txt
                        }                        
                    } else {
                        if ($this->shop_model->add($dataEdit)) {
                            $this->user_model->update($dataupgrade, "use_id = " . (int)$this->session->userdata('sessionUser') . " AND use_status = 1 AND (use_enddate >= $currentDate OR use_enddate=0)");

                            // Added by le van son
                            $this->load->model('package_user_model');
                            $this->package_user_model->addFreePackage($this->session->userdata('sessionUser'), 1);

                            $this->session->set_userdata('sessionGroup', (int)$this->session->userdata('sessionGroup'));
                            $this->session->set_flashdata('sessionSuccessEditShopAccount', 1);
                        }
                    }

                    $this->session->set_userdata('sessionTimePosted', time());
                    //$this->session->set_flashdata('updateSuccess', 'Cập nhập thông tin thành công');

                    redirect(base_url() . 'account/shop');
                } else {
                    if (count($shop) == 1) {
                        $more_provinces = "";
                        if ($shop->sho_provinces) {
                            $data['more_provinces'] = array_filter(explode(',', $shop->sho_provinces));
                        } else if ($shop->sho_province) {
                            $data['more_provinces'] = '';
                        }

                        $data['dir_logo_shop'] = $shop->sho_dir_logo;
                        $data['logo_shop'] = $shop->sho_logo;
                        $data['dir_banner_shop'] = $shop->sho_dir_banner;
                        $data['banner_shop'] = $shop->sho_banner;
                        $data['link_shop'] = $shop->sho_link;
                        $data['domain_shop'] = $shop->domain;
                        $data['name_shop'] = $shop->sho_name;
                        $data['descr_shop'] = $shop->sho_descr;
                        $data['address_shop'] = $shop->sho_address;
                        $data['category_shop'] = $shop->sho_category;
                        $data['sho_cat_style'] = $shop->sho_cat_style;
                        $data['province_shop'] = $shop->sho_province;
                        $data['district_shop'] = $shop->sho_district;
                        $data['address_kho_shop'] = $shop->sho_kho_address;
                        $data['province_kho_shop'] = $shop->sho_kho_province;
                        $data['district_kho_shop'] = $shop->sho_kho_district;
                        $data['phone_shop'] = $shop->sho_phone;
                        $data['mobile_shop'] = $shop->sho_mobile;
                        $data['email_shop'] = $shop->sho_email;
                        $data['yahoo_shop'] = $shop->sho_yahoo;
                        $data['skype_shop'] = $shop->sho_skype;
                        $data['website_shop'] = $shop->sho_website;
                        $data['facebook_shop'] = $shop->sho_facebook;
                        $data['twitter_shop'] = $shop->sho_twitter;
                        $data['youtube_shop'] = $shop->sho_youtube;
                        $data['shop_video'] = $shop->shop_video;
                        $data['google_plus_shop'] = $shop->sho_google_plus;
                        $data['vimeo_shop'] = $shop->sho_vimeo;
                        $data['style_shop'] = $shop->sho_style;
                        $data['saleoff_shop'] = $shop->sho_saleoff;
                        $data['bg_color_shop'] = $shop->sho_bgcolor;
                        $data['bg_img_shop'] = $shop->sho_bgimg;
                        $data['bg_repeat_x'] = $shop->sho_bg_repeat_x;
                        $data['bg_repeat_y'] = $shop->sho_bg_repeat_y;
                        $data['sho_guarantee'] = $shop->sho_guarantee;
                        $data['category_pro'] = $shop->sho_category;
                        $data['sho_dir_bging'] = $shop->sho_dir_bging;
                        $data['sho_status'] = $shop->sho_status;
                        $data['shop_fax'] = $shop->shop_fax;
                        $data['shop_id_q'] = $shop->sho_id;
                        $data['shop_type'] = $shop->shop_type;
                        $data['shop_video'] = $shop->shop_video;
                        $data['sho_description'] = $shop->sho_description;
                        $data['sho_keywords'] = $shop->sho_keywords;

                        $cat_parent = $this->shop_category_model->get("*", "cat_id = " . (int)$shop->sho_category);
                        if ($cat_parent->cat_level == 2) {
                            $cat_lavel_2_temp = $this->shop_category_model->fetch("*", "parent_id = " . (int)$cat_parent->parent_id);
                            $data['cat_level_2'] = $cat_lavel_2_temp;
                            $data['cat_parent_parent'] = $this->shop_category_model->get("*", "parent_id = " . (int)$cat_parent->parent_id);
                            $get_category_leve1 = $this->shop_category_model->get("*", "cat_id = " . (int)$cat_parent->parent_id);
                            $cat_lavel_1_temp = $this->shop_category_model->fetch("*", "parent_id = " . (int)$get_category_leve1->parent_id);
                            $data['cat_parent_parent_0'] = $this->shop_category_model->get("*", "parent_id = " . (int)$get_category_leve1->parent_id);
                            $data['cat_level_1'] = $cat_lavel_1_temp;
                        } else {
                            if ($cat_parent->cat_level == 0) {
                                $data['cat_getcategory0'] = 1;
                                $data['cat_getcategory0_temp'] = 1;
                            } else {
                                $cat_lavel_1_temp = $this->shop_category_model->fetch("*", "parent_id = " . (int)$cat_parent->parent_id);
                                $data['cat_level_1'] = $cat_lavel_1_temp;
                                $get_category_leve1 = $this->shop_category_model->get("*", "cat_id = " . (int)$cat_parent->parent_id);
                                $data['cat_parent_parent_0'] = $cat_parent;
                            }
                        }

                        $this->load->model('package_user_model');
                        $shop_package_info = $this->package_user_model->getCurrentPackage($shop->sho_user);
                        if (empty($this->sho_package) || in_array($this->sho_package['id'], array(1, 2))) {
                        } else {
                            $data['area'] = $this->getProvincesByArea($shop_package_info['id'], $shop->sho_province);
                        }
                    } else {
                        $data['link_shop'] = $user->use_username;
                    }
                }
            }
            else{
                $data['shopactive'] = 1;
            }
            #BEGIN: Create captcha
            //            $this->load->library('captcha');
            //            $codeCaptcha = $this->captcha->code(6);
            //            $data['captcha'] = $codeCaptcha;
            //            $this->session->set_flashdata('sessionCaptchaEditShopAccount', $codeCaptcha);
            //            $imageCaptcha = 'templates/captcha/' . md5(microtime()) . '.' . (int)$this->session->userdata('sessionUser') . 'shoa.jpg';
            //            $this->session->set_flashdata('sessionPathCaptchaEditShopAccount', $imageCaptcha);
            //            $this->captcha->create($codeCaptcha, $imageCaptcha);
            //            if (file_exists($imageCaptcha)) {
            //                $data['imageCaptchaEditShopAccount'] = $imageCaptcha;
            //            }
            #END Create captcha
        }
        #Load view
        
        //district shop and kho
        $this->load->model('district_model');
        $data['shop_district'] = $this->district_model->find_by(array('ProvinceCode' => $data['province_shop']));
        $data['kho_district'] = $this->district_model->find_by(array('ProvinceCode' => $data['province_kho_shop']));
        #load view
        $this->load->view('home/account/shop/defaults', $data);
    }

    function ajax_category_shop()
    {
        $this->load->model('shop_category_model');
        $parent_id = (int)$this->input->post('parent_id');
        $cat_level = $this->shop_category_model->fetch("*", "parent_id = " . $parent_id . " AND cat_status = 1", "cat_order, cat_id", "ASC");
        if (isset($cat_level)) {
            foreach ($cat_level as $key => $item) {
                $cat_level_next = $this->shop_category_model->fetch("*", "parent_id = " . (int)$item->cat_id . " AND cat_status = 1");
                $cat_level[$key]->child_count = count($cat_level_next);
            }
        }
        echo "[" . json_encode($cat_level) . "," . count($cat_level) . "]";
        exit();
    }

    function shopintro()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser || $group_id == AffiliateUser || $group_id == BranchUser) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #BEGIN: CHECK GROUP
        #BEGIN: Menu
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'shop';
        $data['menuType'] = 'account';
        #END Menu
        #BEGIN: Unlink captcha
        $this->load->helper('unlink');
        unlink_captcha($this->session->flashdata('sessionPathCaptchaEditShopIntroAccount'));
        #END Unlink captcha
        if ($this->session->flashdata('sessionSuccessEditShopIntroAccount')) {
            $data['successEditShopIntroAccount'] = true;
        } else {
            $data['successEditShopIntroAccount'] = false;
            #BEGIN: Get shop
            $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser') . " AND sho_status = 1");		

	        $this->load->library('form_validation');
            //  $this->form_validation->set_rules('captcha_shop', 'lang:captcha_shop_label_shop_account', 'callback__valid_captcha_shop');
            // $this->form_validation->set_message('_valid_captcha_shop', $this->lang->line('_valid_captcha_shop_message_shop_account'));
            $this->form_validation->set_error_delimiters('<div class="div_errorpost">', '</div>');

            if ($this->form_validation->run() != FALSE || $this->input->post('isEditShopIntro')) {
                
		        $dataEdit = array(
                    'sho_introduction' => trim($this->filter->injection_html($this->input->post('txtContent1'))),
                    'sho_company_profile' => trim($this->filter->injection_html($this->input->post('txtContent2'))),
                    'sho_certificate' => trim($this->filter->injection_html($this->input->post('txtContent3'))),
                    'sho_trade_capacity' => trim($this->filter->injection_html($this->input->post('txtContent4')))
                );
		
                if ($this->shop_model->update($dataEdit, "sho_user = " . (int)$this->session->userdata('sessionUser'))) {
                    $this->session->set_flashdata('sessionSuccessEditShopIntroAccount', 1);
                }
		
                $this->session->set_userdata('sessionTimePosted', time());
		
                redirect(base_url() . trim(uri_string(), '/'), 'location');
		
            } else {
                $data['txtContent1'] = $shop->sho_introduction;
                $data['txtContent2'] = $shop->sho_company_profile;
                $data['txtContent3'] = $shop->sho_certificate;
                $data['txtContent4'] = $shop->sho_trade_capacity;
            }
            #BEGIN: Create captcha
            //            $this->load->library('captcha');
            //            $codeCaptcha = $this->captcha->code(6);
            //            $data['captcha'] = $codeCaptcha;
            //            $this->session->set_flashdata('sessionCaptchaEditShopIntroAccount', $codeCaptcha);
            //            $imageCaptcha = 'templates/captcha/' . md5(microtime()) . '.' . (int)$this->session->userdata('sessionUser') . 'shoa.jpg';
            //            $this->session->set_flashdata('sessionPathCaptchaEditShopIntroAccount', $imageCaptcha);
            //            $this->captcha->create($codeCaptcha, $imageCaptcha);
            //            if (file_exists($imageCaptcha)) {
            //                $data['imageCaptchaEditShopIntroAccount'] = $imageCaptcha;
            //            }
            #END Create captcha
        }
        #Load view        
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        $this->load->view('home/account/shop/intro', $data);
    }

    function shoprule()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser || $group_id == AffiliateUser || $group_id == BranchUser) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #BEGIN: CHECK GROUP  
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #BEGIN: Menu
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'shop';
        $data['menuType'] = 'account';
        #END Menu
        #BEGIN: Unlink captcha
        $this->load->helper('unlink');
        unlink_captcha($this->session->flashdata('sessionPathCaptchaEditShopRuleAccount'));
        #END Unlink captcha
        if ($this->session->flashdata('sessionSuccessEditShopRuleAccount')) {
            $data['successEditShopRuleAccount'] = true;
        } else {
            $this->load->model('shop_rule_model');
            $this->load->model('master_shop_rule_model');
            $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser') . " AND sho_status = 1 AND sho_enddate >= $currentDate");
            $data['successEditShopRuleAccount'] = false;
            $shop_rule = $this->shop_rule_model->get("*", "sho_id = " . (int)$shop->sho_id);
            $master_rule = $this->master_shop_rule_model->fetch("*", "type != 7", "", "ASC");
            if ($this->input->post('isEditShopRule')) {
                $selectedrule = implode(",", $this->input->post('shop_rule'));
                if (count($shop_rule) != 1) {
                    $dataAdd = array('sho_id' => (int)$shop->sho_id, 'shop_rule_ids' => $selectedrule);
                    if ($this->shop_rule_model->add($dataAdd)) {
                        $this->session->set_flashdata('sessionSuccessEditShopRuleAccount', 1);
                    }
                } else {
                    $dataEdit = array('shop_rule_ids' => $selectedrule);
                    if ($this->shop_rule_model->update($dataEdit, "id = " . (int)$shop_rule->id)) {
                        $this->session->set_flashdata('sessionSuccessEditShopRuleAccount', 1);
                    }
                }
                $sho_warranty = array('sho_warranty' => trim($this->filter->injection_html($this->input->post('txtContent'))));
                if ($this->shop_model->update($sho_warranty, "sho_user = " . (int)$this->session->userdata('sessionUser'))) {
                    $this->session->set_flashdata('sessionSuccessEditShopWarrantyAccount', 1);
                }
                $this->session->set_userdata('sessionTimePosted', time());
                redirect(base_url() . trim(uri_string(), '/'), 'location');
            } else {
                $data['shop_rule'] = explode(",", $shop_rule->shop_rule_ids);
                $data['master_rule'] = $master_rule;
                $data['txtContent'] = $shop->sho_warranty;
            }
            #BEGIN: Create captcha
            //            $this->load->library('captcha');
            //            $codeCaptcha = $this->captcha->code(6);
            //            $data['captcha'] = $codeCaptcha;
            //            $this->session->set_flashdata('sessionCaptchaEditShopRuleAccount', $codeCaptcha);
            //            $imageCaptcha = 'templates/captcha/' . md5(microtime()) . '.' . (int)$this->session->userdata('sessionUser') . 'shoa.jpg';
            //            $this->session->set_flashdata('sessionPathCaptchaEditShopRuleAccount', $imageCaptcha);
            //            $this->captcha->create($codeCaptcha, $imageCaptcha);
            //            if (file_exists($imageCaptcha)) {
            //                $data['imageCaptchaEditShopRuleAccount'] = $imageCaptcha;
            //            }
            #END Create captcha
        }
        #Load view
        $this->load->view('home/account/shop/rule', $data);
    }

    function payment_method()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter  
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        $data['counter'] = $this->counter_model->get();
        #END Counter
        #BEGIN: CHECK GROUP
        if ((int)$this->session->userdata('sessionGroup') != 3) {
            redirect(base_url() . 'account', 'location');
            die();
        }
        #BEGIN: Menu
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'shop';
        $data['menuType'] = 'account';
        #END Menu

        $this->load->model('payment_model');
        $user_id = (int)$this->session->userdata('sessionUser');
        $payment_method = $this->payment_model->get('*', "id_user = " . $user_id);
        $data['payment_method'] = $payment_method;
        #Load view
        $this->load->view('home/account/shop/payment_method', $data);
    }

    function shipping_method()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter       
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        $data['counter'] = $this->counter_model->get();
        #END Counter
        #BEGIN: CHECK GROUP
        if ((int)$this->session->userdata('sessionGroup') != 3) {
            redirect(base_url() . 'account', 'location');
            die();
        }
        #BEGIN: Menu
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'shop';
        $data['menuType'] = 'account';
        #END Menu

        $this->load->model('shipping_model');
        $user_id = (int)$this->session->userdata('sessionUser');
        $shipping_method = $this->shipping_model->get('*', "id_user = " . $user_id);
        $data['shipping_method'] = $shipping_method;
        #Load view
        $this->load->view('home/account/shop/shipping_method', $data);
    }

    function save_payment_method()
    {
        $this->load->model('payment_model');
        $user_id = (int)$this->session->userdata('sessionUser');
        $dataAdd = array(
            'id_user' => $user_id,
            'info_baokim' => trim($this->filter->injection_html($this->input->post('info_baokim'))),
            'info_nganluong' => trim($this->filter->injection_html($this->input->post('info_nganluong'))),
            'info_cod' => trim($this->filter->injection_html($this->input->post('info_cod'))),
            'info_bank' => trim($this->filter->injection_html($this->input->post('info_bank'))),
            'info_cash' => trim($this->filter->injection_html($this->input->post('info_cash'))),
            'info_wu' => trim($this->filter->injection_html($this->input->post('info_wu'))),
            'info_po' => trim($this->filter->injection_html($this->input->post('info_po')))
        );
        $this->payment_model->add($dataAdd);
        redirect(base_url() . 'account/shop/payment_method');
    }

    function save_shipping_method()
    {
        $this->load->model('shipping_model');
        $user_id = (int)$this->session->userdata('sessionUser');
        $dataAdd = array(
            'id_user' => $user_id,
            'to_receive' => trim($this->filter->injection_html($this->input->post('to_receive'))),
            'to_po' => trim($this->filter->injection_html($this->input->post('to_po'))),
            'to_saler' => trim($this->filter->injection_html($this->input->post('to_saler'))),
            'to_other' => trim($this->filter->injection_html($this->input->post('to_other')))
        );
        $this->shipping_model->add($dataAdd);
        redirect(base_url() . 'account/shop/shipping_method');
    }

    /*
    function shopwarranty()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser || $group_id == AffiliateUser || $group_id == BranchUser
        ) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #BEGIN: CHECK GROUP
        #BEGIN: Menu
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'shop';
        $data['menuType'] = 'account';
        #END Menu
        #BEGIN: Unlink captcha
        $this->load->helper('unlink');
        unlink_captcha($this->session->flashdata('sessionPathCaptchaEditShopWarrantyAccount'));
        #END Unlink captcha
        if ($this->session->flashdata('sessionSuccessEditShopWarrantyAccount')) {
            $data['successEditShopWarrantyAccount'] = true;
        } else {
            $data['successEditShopWarrantyAccount'] = false;
            #BEGIN: Get shop
            $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser') . " AND sho_status = 1 AND sho_enddate >= $currentDate");
            $this->load->library('form_validation');
            $this->form_validation->set_rules('captcha_shop', 'lang:captcha_shop_label_shop_account', 'callback__valid_captcha_shop');
            //$this->form_validation->set_message('_valid_captcha_shop', $this->lang->line('_valid_captcha_shop_message_shop_account'));
            $this->form_validation->set_error_delimiters('<div class="div_errorpost">', '</div>');

            if ($this->form_validation->run() != FALSE || $this->input->post('isEditShopWarranty')) {
                $dataEdit = array('sho_warranty' => trim($this->filter->injection_html($this->input->post('txtContent'))));
                if ($this->shop_model->update($dataEdit, "sho_user = " . (int)$this->session->userdata('sessionUser'))) {
                    $this->session->set_flashdata('sessionSuccessEditShopWarrantyAccount', 1);
                }
                $this->session->set_userdata('sessionTimePosted', time());
                redirect(base_url() . trim(uri_string(), '/'), 'location');
            } else {
                $data['txtContent'] = $shop->sho_warranty;
            }
            #BEGIN: Create captcha
            //            $this->load->library('captcha');
            //            $codeCaptcha = $this->captcha->code(6);
            //            $data['captcha'] = $codeCaptcha;
            //            $this->session->set_flashdata('sessionCaptchaEditShopWarrantyAccount', $codeCaptcha);
            //            $imageCaptcha = 'templates/captcha/' . md5(microtime()) . '.' . (int)$this->session->userdata('sessionUser') . 'shoa.jpg';
            //            $this->session->set_flashdata('sessionPathCaptchaEditShopWarrantyAccount', $imageCaptcha);
            //            $this->captcha->create($codeCaptcha, $imageCaptcha);
            //            if (file_exists($imageCaptcha)) {
            //                $data['imageCaptchaEditShopWarrantyAccount'] = $imageCaptcha;
            //            }
            #END Create captcha
        }
        #Load view       
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        $this->load->view('home/account/shop/warranty', $data);
    }
     */

    function addbanner()
    {

        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #BEGIN: CHECK GROUP
        if ((int)$this->session->userdata('sessionGroup') != 3) {
            redirect(base_url() . 'account', 'location');
            die();
        }
        #BEGIN: Unlink captcha
        $this->load->helper('unlink');
        unlink_captcha($this->session->flashdata('sessionPathCaptchaAddBanner'));
        #END Unlink captcha
        #BEGIN: Menu
        $data['menuSelected'] = 'addbanner';
        $data['menuType'] = 'account';
        $this->load->model('banner_model');
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser') . " AND sho_status = 1 AND sho_enddate >= $currentDate");
        $banners = $this->banner_model->fetch("*", "sho_id = " . (int)$shop->sho_id);
        if ($this->input->post('isAddBanner')) {

            $content = '';
            $published = false;
            if ($this->input->post('ub_format') == 3) {
                $content = trim($this->filter->injection_html($this->input->post('ub_html')));

                if ($banner->banner_type != 3 && $banner->content != '' && file_exists($pathLogo . $dir_logo . '/' . $banner->content)) {
                    @unlink($pathLogo . $dir_logo . '/' . $banner->content);
                }

            } else {

                $this->load->library('upload');
                #BEGIN: Upload banner
                $pathBanner = "media/shop/banners/";
                #Create folder
                $sho_dir_banner = $shop->sho_dir_banner;
                if (!is_dir($pathBanner . $sho_dir_banner)) {
                    @mkdir($pathBanner . $sho_dir_banner, 0777, true);
                    $this->load->helper('file');
                    @write_file($pathBanner . $sho_dir_banner . '/index.html', '<p>Directory access is forbidden.</p>');
                }
                $config['upload_path'] = $pathBanner . $sho_dir_banner . '/';
                $config['allowed_types'] = 'gif|jpg|jpeg|png|swf';
                $config['max_size'] = 10240;#KB
                $config['max_width'] = 10240;#px
                $config['max_height'] = 10240;#px
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if ($this->upload->do_upload('isAddBannerisAddBanner')) {
                    $uploadBanner = $this->upload->data();
                    $content = $uploadBanner['file_name'];

                } else {
                    $content = $this->input->post('filename');
                }

            }
            die();
            if ($this->input->post('ub_active') == 1) {
                $published = true;
            } else {
                $published = false;
            }

            #END Upload banner
            $dataAdd = array('sho_id' => (int)$shop->sho_id, 'banner_name' => trim($this->filter->injection_html($this->input->post('ub_name'))), 'banner_type' => $this->input->post('ub_format'), 'banner_width' => $this->input->post('ub_width'), 'banner_height' => $this->input->post('ub_height'), 'content' => $content, 'link' => $this->input->post('ub_link'), 'target' => $this->input->post('ub_target'), 'banner_position' => $this->input->post('ub_type'), 'start_date' => $this->input->post('ub_str_start_date'), 'end_date' => $this->input->post('ub_str_end_date'), 'published' => $published, 'order_num' => $this->input->post('ub_order'));
            if ($this->banner_model->add($dataAdd)) {
                $update_banner = 1;
            }
        }
        #BEGIN: Create captcha
        $aCaptcha = $this->createCaptcha(md5(microtime()) . '.' . (int)$this->session->userdata('sessionUser') . 'shoa.jpg');
        if(!empty($aCaptcha)) {
            $data['captcha']                = $aCaptcha['captcha']; 
            $data['imageCaptchaAddBanner']    = $aCaptcha['imageCaptchaContact'];

            $this->session->set_userdata('sessionCaptchaAddBanner', $aCaptcha['captcha']);
            $this->session->set_userdata('sessionPathCaptchaAddBanner', $aCaptcha['imageCaptchaContact']); 
        }
        #END Create captcha
        #Load view
        $data['banners'] = $banners;
        $data['shop_dir'] = $shop->sho_dir_banner;
        $data['thuchienthanhcong'] = $update_banner;
        $this->load->view('home/account/shop/addbanner', $data);
    }

    function listbanner()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #BEGIN: CHECK GROUP
        if ((int)$this->session->userdata('sessionGroup') != 3) {
            redirect(base_url() . 'account', 'location');
            die();
        }
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #BEGIN: Menu
        $data['menuSelected'] = 'listbanner';
        $data['menuType'] = 'account';
        $this->load->model('banner_model');
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser') . " AND sho_status = 1 AND sho_enddate >= $currentDate");
        $banners = $this->banner_model->fetch("*", "sho_id = " . (int)$shop->sho_id);
        $data['banners'] = $banners;
        $data['shop_dir'] = $shop->sho_dir_banner;
        #Load view
        $this->load->view('home/account/shop/listbanner', $data);
    }

    function notify()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == NormalUser
            || $group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == StaffUser
            || $group_id == BranchUser
            || $group_id == StaffStoreUser
        ) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $share = strtolower($this->uri->segment(2));
        if (isset($share) && $share == 'sharelist') {
            $cat = 1;
	    $data['menuPanelGroup'] = 4;
            $data['menuSelected'] = 'share';
        } else {
            $cat = 0;
            $data['menuSelected'] = 'notify';
        }
        $data['menuType'] = 'account';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        $userID = (int)$this->session->userdata('sessionUser');

        $data['userID'] = $userID;
        if ($userID > 0) {
            $userObject = $this->user_model->get("use_id,af_key", "use_id = " . $userID);
            $data['userObject'] = $userObject;
        }


        #Define url for $getVar
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        if (strtolower($this->uri->segment(3)) == 'detail' && $getVar['detail'] != FALSE) {
            $notify = $this->notify_model->get("not_title, not_begindate, not_detail, link_share, not_group, not_view", "not_id = " . (int)$getVar['detail'] . " AND not_status = 1"); //AND not_enddate >= $currentDate
            if (count($notify) == 1 && $this->check->is_id($getVar['detail'])) {
                $this->load->library('bbcode');
                #BEGIN: Update view
                if (trim($notify->not_view) == '' || (trim($notify->not_view) != '' && !stristr($notify->not_view, "[$userID]"))) {
                    $this->notify_model->update(array('not_view' => $notify->not_view . "[$userID]"), "not_id = " . (int)$getVar['detail']);
                }
                #END Update view
                $data['notify'] = $notify;
                $this->load->view('home/account/notify/detail', $data);
            } else {
                redirect(base_url() . 'account/notify', 'location');
            }
        } else {

            #BEGIN: Fetch id notify for group
            $notify = $this->notify_model->fetch("not_id, not_group", "not_status = 1"); //AND not_enddate >= $currentDate
            $notifyID = array();
            foreach ($notify as $notifyArray) {
                if (trim($notifyArray->not_group) != '' && stristr($notifyArray->not_group, (string)$this->session->userdata('sessionGroup'))) {
                    $notifyID[] = $notifyArray->not_id;
                }
            }
            if (count($notifyID) > 0) {
                $notifyID = implode(',', $notifyID);
            } else {
                $notifyID = '0';
            }
            #END Fetch id notify for group
            #BEGIN: Search & sort
            $where = "not_id IN($notifyID) AND not_status = 1 AND category = " . (int)$cat . " OR not_user = " . (int)$this->session->userdata('sessionUser'); //AND not_enddate >= $currentDate
            $sort = 'not_id';
            $by = 'DESC';
            $sortUrl = '';
            $pageSort = '';
            $pageUrl = '';
            $keyword = '';
            if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
                $keyword = $this->filter->html($getVar['keyword']);
                switch (strtolower($getVar['search'])) {
                    case 'title':
                        $sortUrl .= '/search/title/keyword/' . $getVar['keyword'];
                        $pageUrl .= '/search/title/keyword/' . $getVar['keyword'];
                        $where .= " AND not_title LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                        break;
                }
            }
            #If have sort
            if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
                switch (strtolower($getVar['sort'])) {
                    case 'title':
                        $pageUrl .= '/sort/title';
                        $sort = "not_title";
                        break;
                    case 'degree':
                        $pageUrl .= '/sort/degree';
                        $sort = "not_degree";
                        break;
                    case 'date':
                        $pageUrl .= '/sort/date';
                        $sort = "not_begindate";
                        break;
                    case 'view':
                        $pageUrl .= '/sort/view';
                        $sort = "not_view";
                        break;
                    default:
                        $pageUrl .= '/sort/id';
                        $sort = "not_id";
                }
                if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                    $pageUrl .= '/by/desc';
                    $by = "DESC";
                } else {
                    $pageUrl .= '/by/asc';
                    $by = "ASC";
                }
            }
            #If have page
            if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
                $start = (int)$getVar['page'];
                $pageSort .= '/page/' . $start;
            } else {
                $start = 0;
            }
            #END Search & sort
            #Keyword
            $data['keyword'] = $keyword;
            #BEGIN: Create link sort
            $data['sortUrl'] = base_url() . 'account/notify' . $sortUrl . '/sort/';
            $data['pageSort'] = $pageSort;
            #END Create link sort
            #BEGIN: Pagination
            $this->load->library('pagination');
            #Count total record
            $totalRecord = count($this->notify_model->fetch("not_id", $where, "", ""));
            $config['base_url'] = base_url() . 'account/notify' . $pageUrl . '/page/';
            $config['total_rows'] = $totalRecord;
            $config['per_page'] = settingOtherAccount;
            $config['num_links'] = 1;
            $config['uri_segment'] = 4;
            $config['cur_page'] = $start;
            $this->pagination->initialize($config);
            $data['linkPage'] = $this->pagination->create_links();
            #END Pagination
            #sTT - So thu tu
            $data['sTT'] = $start + 1;
            #Fetch record
            $select = "not_id, not_title, not_degree, not_begindate, not_view";
            $limit = settingOtherAccount;
            $data['notify'] = $this->notify_model->fetch($select, $where, $sort, $by, $start, $limit);
            
            #Load view
            $this->load->view('home/account/notify/defaults', $data);
        }
    }

    function contact()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == NormalUser
            || $group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == StaffUser
            || $group_id == BranchUser
            || $group_id == StaffStoreUser
        ) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $this->load->model('contact_model');
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu 1
        $data['menuSelected'] = 'contact';
        $data['menuType'] = 'account';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
        $date['user_log'] = (int)$this->session->userdata('sessionUser');

        #END Menu 1
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        if (strtolower($this->uri->segment(3)) == 'outbox') {
            $getVar = $this->uri->uri_to_assoc(4, $action);
        } else {
            $getVar = $this->uri->uri_to_assoc(3, $action);
        }

        if (strtolower($this->uri->segment(3)) == 'detail' && $getVar['detail'] != FALSE) {
            $contact = $this->contact_model->get("con_id, con_title, con_user, con_user_recieve, con_date_contact, con_detail, con_in_usend, con_out_usend, con_in_urecei, con_out_urecei ", "con_id = " . (int)$getVar['detail'] . " AND (con_user = " . (int)$this->session->userdata('sessionUser') . " OR con_user_recieve = " . (int)$this->session->userdata('sessionUser') . " ) AND con_status = 1");
            if (count($contact) == 1 && $this->check->is_id($getVar['detail'])) {
                $this->load->library('bbcode');
                $data['contact'] = $contact;
                $this->contact_model->update(array('con_view' => 1), 'con_id = ' . (int)$this->uri->segment(4));

                if ((int)$this->session->userdata('sessionUser') == $contact->con_user) {
                    $this->contact_model->update(array('con_out_usend' => 0, 'con_in_usend' => 0), 'con_id = ' . (int)$this->uri->segment(4));
                }//Reset con_in_usend
                else {
                    $this->contact_model->update(array('con_in_urecei' => 0, 'con_out_urecei' => 0), 'con_id = ' . (int)$this->uri->segment(4));
                }

                #Load view
                $this->load->view('home/account/contact/detail', $data);
            } else {
                redirect(base_url() . 'account/contact', 'location');
            }
        } elseif (strtolower($this->uri->segment(3)) == 'send') {
            #BEGIN: Menu 2
            $data['menuSelected'] = 'send_contact';
            #END Menu 2
            #BEGIN: Unlink captcha
            $this->load->helper('unlink');
            unlink_captcha($this->session->flashdata('sessionPathCaptchaSendContactAccount'));
            #END Unlink captcha
            if ($this->session->flashdata('sessionSuccessSendContactAccount')) {
                $data['successSendContactAccount'] = true;
            } else {
                $this->load->library('form_validation');
                $data['successSendContactAccount'] = false;
                // if ($this->input->post('captcha_contact') && time() - (int)$this->session->userdata('sessionTimePosted') > (int)settingTimePost) {
                if ($this->input->post('title_contact') && time() - (int)$this->session->userdata('sessionTimePosted') > (int)settingTimePost) {
                    #BEGIN: Set rules
                    ///$this->form_validation->set_rules('title_contact', 'lang:title_contact_label_send', 'trim|required|callback__exist_title_contact');
                    $this->form_validation->set_rules('txtContent', 'lang:txtcontent_contact_label_send', 'trim|required|min_length[10]|max_length[1000]');
                    //$this->form_validation->set_rules('captcha_contact', 'lang:captcha_contact_label_send', 'required|callback__valid_captcha_contact');
                    #END Set rules
                    #BEGIN: Set message
                    $this->form_validation->set_message('required', $this->lang->line('required_message'));
                    $this->form_validation->set_message('min_length', $this->lang->line('min_length_message'));
                    $this->form_validation->set_message('max_length', $this->lang->line('max_length_message'));
                    //$this->form_validation->set_message('_exist_title_contact', $this->lang->line('_exist_title_contact_message_send'));
                    // $this->form_validation->set_message('_valid_captcha_contact', $this->lang->line('_valid_captcha_contact_message_send'));
                    $this->form_validation->set_error_delimiters('<div class="div_errorpost">', '</div>');
                    #END Set message
                    if ($this->form_validation->run() != FALSE) {
                        if ($this->input->post('position_contact') == '1') {
                            $position_contact = 1;
                        } else {
                            $position_contact = 2;
                        }
                        $user_login = $this->user_model->get('use_username', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
                        $username_login = $user_login->use_username;
                        $txtContent = '[fieldset][legend][i][red]' . $username_login . '[/red][/i][/legend]' . $this->input->post('txtContent') . '[/fieldset]';
                        if ($this->input->post('con_user_recieve') == 0) {
                            $dataAdd = array(
                                'con_title' => trim($this->filter->injection_html($this->input->post('title_contact'))),
                                'con_detail' => trim($this->filter->injection_html($txtContent)),
                                'con_user' => (int)$this->session->userdata('sessionUser'),
                                'con_date_contact' => $currentDate,
                                'con_date_reply' => 0,
                                'con_view' => 0,
                                'con_reply' => 0,
                                'con_status' => 1,
                                'con_out_usend' => 1
                            );
                            if ($this->contact_model->add($dataAdd)) {
                                $this->session->set_flashdata('sessionSuccessSendContactAccount', 1);
                            }

                        } else {

                            $userNameID = $this->user_model->getUserByUsername(trim($this->filter->injection_html($this->input->post('username'))));

                            $dataAdd = array(
                                'con_title' => trim($this->filter->injection_html($this->input->post('title_contact'))),
                                'con_detail' => trim($this->filter->injection_html($txtContent)),
                                'con_position' => $position_contact,
                                'con_user' => (int)$this->session->userdata('sessionUser'),
                                'con_user_recieve' => (int)$userNameID->use_id,
                                'con_date_contact' => $currentDate,
                                'con_date_reply' => 0,
                                'con_view' => 0,
                                'con_reply' => 0,
                                'con_status' => 1,
                                'con_out_usend' => 1,
                                'con_in_urecei' => 1
                            );
                            if ($this->contact_model->add($dataAdd)) {
                                $this->session->set_flashdata('sessionSuccessSendContactAccount', 1);
                            }

                        }
                        $this->session->set_userdata('sessionTimePosted', time());
                        redirect(base_url() . trim(uri_string(), '/'), 'location');
                    } else {
                        $data['title_contact'] = $this->input->post('title_contact');
                        $data['position_contact'] = $this->input->post('position_contact');
                        $data['txtContent'] = $this->input->post('txtContent');
                    }
                }
                #BEGIN: Create captcha
                //                $this->load->library('captcha');
                //                $codeCaptcha = $this->captcha->code(6);
                //                $this->session->set_flashdata('sessionCaptchaSendContactAccount', $codeCaptcha);
                //                $imageCaptcha = 'templates/captcha/' . md5(microtime()) . '.' . (int)$this->session->userdata('sessionUser') . 'cona.jpg';
                //                $this->session->set_flashdata('sessionPathCaptchaSendContactAccount', $imageCaptcha);
                //                $this->captcha->create($codeCaptcha, $imageCaptcha);
                //                if (file_exists($imageCaptcha)) {
                //                    $data['imageCaptchaSendContactAccount'] = $imageCaptcha;
                //                }
                #END Create captcha
            }
            $data['users'] = $this->user_model->fetch('use_id,use_username', 'use_status = 1');
            #Load view           
            $data['successEditShopAccount'] = false;
            #BEGIN: Get shop
            $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
            $data['shopid'] = $shop->sho_id;

            $this->load->view('home/account/contact/send', $data);
        } elseif (strtolower($this->uri->segment(3)) == 'reply') {
            $currentDate = date('H:m:i, d-m-Y');
            $user_login = $this->user_model->get('use_username, use_id', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
            $username_login = $user_login->use_username;
            $old_content = $this->contact_model->get("con_detail,con_user, con_user_recieve, con_in_usend, con_out_usend,  con_in_urecei, con_out_urecei", "con_id = " . (int)$this->uri->segment(4));
            $txtContent = $old_content->con_detail . '[fieldset][legend]' . $username_login . '[/legend][i]' . $currentDate . '[/i]' . $this->input->post('txtContent') . '[/fieldset]';
            // $dataAdd = array(
            //     'con_detail' => trim($this->filter->injection_html($txtContent)),
            //     'con_reply' => 1,
            // );

            if ((int)$this->session->userdata('sessionUser') == $old_content->con_user) {
                $this->contact_model->update(array('con_detail' => trim($this->filter->injection_html($txtContent)), 'con_out_usend' => 1, 'con_in_urecei' => $old_content->con_in_urecei + 1), 'con_id = ' . (int)$this->uri->segment(4));
            }
            if ((int)$this->session->userdata('sessionUser') == $old_content->con_user_recieve) {
                $this->contact_model->update(array('con_reply' => 1, 'con_detail' => trim($this->filter->injection_html($txtContent)), 'con_out_urecei' => 1, 'con_in_usend' => $old_content->con_in_usend + 1), 'con_id = ' . (int)$this->uri->segment(4));
            }

            //$this->contact_model->update($dataAdd, 'con_id = ' . (int)$this->uri->segment(4));
            redirect(base_url() . 'account/contact/detail/' . (int)$this->uri->segment(4));
        } else {
            #BEGIN: Delete
            if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
                $this->contact_model->delete($this->input->post('checkone'), "con_id", (int)$this->session->userdata('sessionUser'), "con_user");
                redirect(base_url() . trim(uri_string(), '/'), 'location');
            }
            #END Delete
            #BEGIN: Search & sort
            // if (strtolower($this->uri->segment(3)) == 'outbox') {
            //     $where = "con_user = " . (int)$this->session->userdata('sessionUser') . " AND con_status = 1 ";
            // } else {
            //     $where = "con_user_recieve = " . (int)$this->session->userdata('sessionUser') . "  AND con_status = 1 ";
            // }

            if (strtolower($this->uri->segment(3)) == 'outbox') {
                $where = "con_user = " . (int)$this->session->userdata('sessionUser') . " AND con_status = 1 OR ( con_user_recieve = " . (int)$this->session->userdata('sessionUser') . " AND con_reply = 1 )";
            } else {
                $where = "con_user_recieve = " . (int)$this->session->userdata('sessionUser') . "  AND con_status = 1 OR ( con_user = " . (int)$this->session->userdata('sessionUser') . " AND con_reply = 1 )";
            }


            $sort = 'con_id';
            $by = 'DESC';
            $sortUrl = '';
            $pageSort = '';
            $pageUrl = '';
            $keyword = '';
            if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
                $keyword = $this->filter->html($getVar['keyword']);
                switch (strtolower($getVar['search'])) {
                    case 'title':
                        $sortUrl .= '/search/title/keyword/' . $getVar['keyword'];
                        $pageUrl .= '/search/title/keyword/' . $getVar['keyword'];
                        $where .= " AND con_title LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                        break;
                }
            }
            #If have sort
            if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
                switch (strtolower($getVar['sort'])) {
                    case 'title':
                        $pageUrl .= '/sort/title';
                        $sort = "con_title";
                        break;
                    case 'position':
                        $pageUrl .= '/sort/position';
                        $sort = "con_position";
                        break;
                    case 'reply':
                        $pageUrl .= '/sort/reply';
                        $sort = "con_reply";
                        break;
                    case 'date':
                        $pageUrl .= '/sort/date';
                        $sort = "con_date_contact";
                        break;
                    default:
                        $pageUrl .= '/sort/id';
                        $sort = "con_id";
                }
                if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                    $pageUrl .= '/by/desc';
                    $by = "DESC";
                } else {
                    $pageUrl .= '/by/asc';
                    $by = "ASC";
                }
            }
            #If have page
            if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
                $start = (int)$getVar['page'];
                $pageSort .= '/page/' . $start;
            } else {
                $start = 0;
            }
            #END Search & sort
            #Keyword
            $data['keyword'] = $keyword;
            #BEGIN: Create link sort
            $data['sortUrl'] = base_url() . 'account/contact' . $sortUrl . '/sort/';
            $data['pageSort'] = $pageSort;
            #END Create link sort
            #BEGIN: Pagination
            $this->load->library('pagination');
            #Count total record
            $totalRecord = count($this->contact_model->fetch("con_id", $where, "", ""));
            $config['base_url'] = base_url() . 'account/contact' . $pageUrl . '/page/';
            $config['total_rows'] = $totalRecord;
            $config['per_page'] = settingOtherAccount;
            $config['num_links'] = 1;
            $config['uri_segment'] = 4;
            $config['cur_page'] = $start;
            $this->pagination->initialize($config);
            $data['linkPage'] = $this->pagination->create_links();
            #END Pagination
            #sTT - So thu tu
            $data['sTT'] = $start + 1;
            #Fetch record
            $select = "con_id, con_title, con_position, con_reply, con_view, con_date_contact,use_username, con_user, con_user_recieve, con_in_usend, con_out_usend, con_in_urecei, con_out_urecei";
            $limit = settingOtherAccount;
            $join = "INNER";
            $on = "tbtt_user.use_id = tbtt_contact.con_user";
            $data['contact'] = $this->contact_model->fetch_join($select, $join, 'tbtt_user', $on, $where, $sort, $by, $start, $limit);

            #Load view
            if (strtolower($this->uri->segment(3)) == 'outbox') {
                $this->load->view('home/account/contact/outbox', $data);
            } else {
                $this->load->view('home/account/contact/inbox', $data);
            }
        }
    }

    function display_child($parent, $level, &$retArray)
    {
        $sql = "SELECT * from `tbtt_category` WHERE parent_id='$parent' and cat_status = 1 order by cat_order ";
        $query = $this->db->query($sql);
        foreach ($query->result_array() as $row) {
            $object = new StdClass;
            $object->cat_id = $row['cat_id'];
            $object->cat_name = str_repeat('-', $level) . " " . $row['cat_name'];

            $retArray[] = $object;
            $this->display_child($row['cat_id'], $level + 1, $retArray);
            //edit by nganly &$retArray
        }
    }

    function banner()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar
        $action = array('edit', 'search', 'keyword', 'sort', 'by', 'status', 'id', 'page');
        $getVar = $this->uri->uri_to_assoc(4, $action);
        if (strtolower($this->uri->segment(4)) == 'delete') {
            $this->load->model('banner_model');
            $id = (int)$this->uri->segment(5);
            $this->banner_model->delete($id);
            redirect(base_url() . "account/shop/listbanner");
        }
        if (strtolower($this->uri->segment(4)) == 'edit' && $getVar['edit'] != FALSE) {
            #BEGIN: CHECK GROUP
            if ((int)$this->session->userdata('sessionGroup') != 3) {
                redirect(base_url() . 'account', 'location');
                die();
            }
            #BEGIN: Unlink captcha
            $this->load->helper('unlink');
            unlink_captcha($this->session->flashdata('sessionPathCaptchaAddBanner'));
            #END Unlink captcha
            #BEGIN: Menu
            $data['menuSelected'] = 'addbanner';
            $data['menuType'] = 'account';
            $this->load->model('banner_model');
            #BEGIN: Get shop
            $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser') . " AND sho_status = 1 AND sho_enddate >= $currentDate");
            $banner = $this->banner_model->get("*", "id = " . (int)$getVar['edit']);
            $banners = $this->banner_model->fetch("*", "sho_id = " . (int)$shop->sho_id);
            if ($this->input->post('isEditBanner')) {
                $content = '';
                $published = false;
                if ($this->input->post('ub_format') == 3) {
                    $content = trim($this->filter->injection_html($this->input->post('ub_html')));

                    if ($banner->banner_type != 3 && $banner->content != '' && file_exists($pathLogo . $dir_logo . '/' . $banner->content)) {
                        @unlink($pathLogo . $dir_logo . '/' . $banner->content);
                    }

                } else {
                    $this->load->library('upload');
                    #BEGIN: Upload banner
                    $pathBanner = "media/shop/banners/";
                    #Create folder
                    $sho_dir_banner = $shop->sho_dir_banner;
                    if (!is_dir($pathBanner . $sho_dir_banner)) {
                        @mkdir($pathBanner . $sho_dir_banner, 0777, true);
                        $this->load->helper('file');
                        @write_file($pathBanner . $sho_dir_banner . '/index.html', '<p>Directory access is forbidden.</p>');
                    }
                    $config['upload_path'] = $pathBanner . $sho_dir_banner . '/';
                    $config['allowed_types'] = 'gif|jpg|png|swf';
                    $config['max_size'] = 10240;#KB
                    $config['max_width'] = 10240;#px
                    $config['max_height'] = 10240;#px
                    $config['encrypt_name'] = true;
                    $this->upload->initialize($config);
                    if ($this->upload->do_upload('ub_picture')) {
                        $uploadBanner = $this->upload->data();
                        $content = $uploadBanner['file_name'];
                    } else {
                        $content = $this->input->post('filename');
                    }
                }
                if ($this->input->post('ub_active') == 1) {
                    $published = true;
                } else {
                    $published = false;
                }
                #END Upload banner
                $editAdd = array('banner_name' => trim($this->filter->injection_html($this->input->post('ub_name'))), 'banner_type' => $this->input->post('ub_format'), 'banner_width' => $this->input->post('ub_width'), 'banner_height' => $this->input->post('ub_height'), 'content' => $content, 'link' => $this->input->post('ub_link'), 'target' => $this->input->post('ub_target'), 'banner_position' => $this->input->post('ub_type'), 'start_date' => $this->input->post('ub_str_start_date'), 'end_date' => $this->input->post('ub_str_end_date'), 'published' => $published, 'order_num' => $this->input->post('ub_order'));
                if ($this->banner_model->update($editAdd, "id = " . $banner->id)) {
                    $_SESSION['updateBanner'] = 1;
                }
                $data['updateBanner'] = $_SESSION['updateBanner'];
            }
            #BEGIN: Create captcha
            $aCaptcha = $this->createCaptcha(md5(microtime()) . '.' . (int)$this->session->userdata('sessionUser') . 'shoa.jpg');
            if(!empty($aCaptcha)) {
                $data['captcha']                = $aCaptcha['captcha']; 
                $data['imageCaptchaEditBanner']    = $aCaptcha['imageCaptchaContact'];

                $this->session->set_userdata('sessionCaptchaEditBanner', $aCaptcha['captcha']);
                $this->session->set_userdata('sessionPathCaptchaEditBanner', $aCaptcha['imageCaptchaContact']); 
            }

            #END Create captcha
            #Load view
            $data['banner'] = $banner;
            $data['banners'] = $banners;
            $data['shop_dir'] = $shop->sho_dir_banner;
            $this->load->view('home/account/shop/editbanner', $data);
        }
    }

    function order_pro()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser || $group_id == StaffStoreUser) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $this->load->model('product_model');
        $order = (int)$this->input->post('order');
        $proid = (int)$this->input->post('pro_id');
        if (isset($order) && is_numeric($order)) {
            $this->product_model->update(array('pro_order' => $order), "pro_id = " . $proid);
            echo '1';
        } else {
            echo '0';
        }
    }

    function product() {
        $group_id = $this->session->userdata('sessionGroup');
        $uid = $this->session->userdata('sessionUser');
        $parent_id = 0;
        // Set group id
        $data['group_id'] = $group_id;
        if ($group_id == AffiliateStoreUser || $group_id == BranchUser || $group_id == AffiliateUser || $group_id == StaffStoreUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        if($group_id == StaffStoreUser) {
            $parent_id = $this->user_model->get("parent_id", "use_id = $uid")->parent_id;
            $parent_group = $this->user_model->get("use_group", "use_id = $parent_id")->use_group;
            $shop = $this->shop_model->get("*", "sho_user = " . $parent_id . ' AND sho_status = 1');
        } else {
            $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser') . ' AND sho_status = 1');
        }
        $data['shopid'] = $shop->sho_id;
        if (count($shop) > 0 && $shop->sho_name != '' && $shop->sho_address != '' && $shop->sho_kho_address != '' && $shop->sho_kho_district != '' && $shop->sho_kho_province != '') {
        } else {
            $this->session->set_flashdata('flash_message', 'Bạn phải cập nhật đầy đủ thông tin cần thiết của gian hàng ( được đánh dấu * ) để thực hiện những chức năng khác');
            redirect(base_url() . "account/shop", 'location');
            die();
        }
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu 1       
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        
        $this->load->model('manufacturer_model');
        $data['manufacturer_category'] = $this->manufacturer_model->fetch("*");
        /* $cat_level_0 = $this->category_model->fetch("*", "parent_id = 0 AND cat_status = 1", "cat_order, cat_id", "ASC");
        if (isset($cat_level_0)) {
            foreach ($cat_level_0 as $key => $item) {
                $cat_level_1 = $this->category_model->fetch("*", "parent_id = " . (int)$item->cat_id . " AND cat_status = 1");
                $cat_level_0[$key]->child_count = count($cat_level_1);
            }
        }
        $data['catlevel0'] = $cat_level_0; */
        $maxorder = $this->category_model->get("max(cat_order) as maxorder");
        // $arr = $this->category_model->fetch('*','cat_status = 1');
        // foreach ($arr as $key => $value) {
        //   $arr_post = array(
        //     'cat_name' =>  $value->cat_name,
        //     'cat_descr' => $value->cat_descr,
        //     'cat_image' => $value->cat_image,
        //     'cat_order' => $value->cat_order,
        //     'cat_status' => $value->cat_status,
        //     'cat_index' => $value->cat_index,
        //     'cat_level' => $value->cat_level,
        //     'parent_id' => $value->parent_id,
        //     'keyword' => $value->keyword,
        //     'h1tag'=> $value->h1tag,
        //     'top_menu' => $value->top_menu,
        //     'cat_hot' => $value->cat_hot,
        //     'cat_service' => $value->cat_service,
        //     'b2c_fee' => $value->b2c_fee,
        //     'b2c_af_fee' => $value->b2c_af_fee,
        //     'b2b_fee' => $value->b2b_fee,
        //     'b2b_em_fee' => $value->b2b_em_fee,
        //     'cate_type' => 2,
        //     );
        //   $this->category_model->add($arr_post);
        // }
        $data['next_order'] = (int)$maxorder->maxorder + 1;

        $maxindex = $this->category_model->get("max(cat_index) as maxindex");
        $data['next_index'] = (int)$maxindex->maxindex + 1;
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $data['shopid'] = $shop->sho_id;
        $data['shopid'] = $shop->sho_id;
        $data['shoptype'] = $shop->shop_type;
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar
        $action = array('edit', 'search', 'keyword', 'sort', 'by', 'status', 'id', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        $url1 = $this->uri->segment(3);
        $url2 = $this->uri->segment(4);
        if($url2 != ''){
            $url1 = $this->uri->segment(4);
            $getVar = $this->uri->uri_to_assoc(4, $action);
        }
        $data['menuType'] = 'account';
        $data['menuPanelGroup'] = 4;
        if ((isset($url1) && $url1 == 'coupon') || (isset($url1) && $url1 == 'service')) {
            $data['menuSelected'] = 'product_' . $url1;
            //$getVar = $this->uri->uri_to_assoc(4, $action);
        } else {
            $data['menuSelected'] = 'product';
        }
        if ((strtolower($url1) == 'edit' && $getVar['edit'] != FALSE) || (strtolower($url2) == 'edit' && strtolower($url1) == 'coupon') || (strtolower($url2) == 'edit' && strtolower($url1) == 'service')) {
            #BEGIN: CHECK GROUP
            if ((int)$this->session->userdata('sessionGroup') == 1) {
                redirect(base_url() . 'account', 'location');
                die();
            }
            #END CHECK GROUP
            
            if($group_id == StaffStoreUser) {
                $product = $this->product_model->get("tbtt_product.*", "pro_id = " . (int)$getVar['edit'] . " AND pro_user = " . $parent_id);
            } else {
                $product = $this->product_model->get("tbtt_product.*", "pro_id = " . (int)$getVar['edit'] . " AND pro_user = " . (int)$this->session->userdata('sessionUser'));
            }
            if (count($product) != 1 || !$this->check->is_id($getVar['edit'])) {
                redirect(base_url() . 'account/product', 'location');
                die();
            }
            #BEGIN: Unlink captcha
            $this->load->helper('unlink');
            unlink_captcha($this->session->flashdata('sessionPathCaptchaEditProductAccount'));
            #END Unlink captcha
            if ($this->session->flashdata('sessionSuccessEditProductAccount')) {
                $data['successEditProductAccount'] = true;
            } else {
                $this->load->library('form_validation');
                $data['successEditProductAccount'] = false;
                #BEGIN: Province

                $data['province'] = $this->province_model->fetch("pre_id, pre_name", "pre_status = 1", "pre_order", "ASC");
                #END Province               

                $this->form_validation->set_message('required', $this->lang->line('required_message'));
                $this->form_validation->set_message('is_natural', $this->lang->line('is_natural_message'));
                $this->form_validation->set_message('_valid_nick', $this->lang->line('_valid_nick_message'));
                $this->form_validation->set_message('valid_email', $this->lang->line('valid_email_message'));
                $this->form_validation->set_message('min_length', $this->lang->line('min_length_message'));
                $this->form_validation->set_message('max_length', $this->lang->line('max_length_message'));
                $this->form_validation->set_message('_exist_province', $this->lang->line('_exist_province_message'));
                $this->form_validation->set_message('_exist_category', $this->lang->line('_exist_category_message'));
                $this->form_validation->set_message('_valid_enddate_edit_product', $this->lang->line('_valid_enddate_message'));
                $this->form_validation->set_message('_is_phone', $this->lang->line('_is_phone_message'));
                // $this->form_validation->set_message('_valid_captcha_edit_product', $this->lang->line('_valid_captcha_message_product_edit'));
                $this->form_validation->set_error_delimiters('<div class="div_errorpost">', '</div>');
                #END Set message
                if ($this->form_validation->run() != FALSE || $this->input->post('name_pro')) {

                    $pathImage = "media/images/product/";
                    $dir_image = $product->pro_dir;
                    // $image = $product->pro_image;
                    // $image_name = $this->session->userdata('image_name');

                    // if ($image_name != "" && $image != "") {
                    //     $image .= ',' . $image_name;
                    // } else {
                    //     $image .= $image_name;
                    // }

                    $image = '';

                    // Get image 
                    for ($i=1; $i < 6; $i++) { 
                        $image_temp = $this->input->post('image'.$i.'_edit');
                        if($image_temp != '') {
                            $image .=  $image_temp.',';
                        }
                    }
                    $image = chop($image,',');
            
                    if ($image == 'none.gif') {
                        #Remove dir
                        $this->load->library('file');
                        if (trim($dir_image) != '' && trim($dir_image) != 'default' && is_dir('media/images/product/' . $dir_image) && count($this->file->load('media/images/product/' . $dir_image, 'index.html')) == 0) {
                            if (file_exists('media/images/product/' . $dir_image . '/index.html')) {
                                @unlink('media/images/product/' . $dir_image . '/index.html');
                            }
                            @rmdir('media/images/product/' . $dir_image);
                        }
                        $dir_image = 'default';
                    }
                    #END Upload image

                    if (strtoupper($this->input->post('currency_pro')) == 'USD') {
                        $currency_pro = 'USD';
                    } else {
                        $currency_pro = 'VND';
                    }
                    if ((int)$this->input->post('cost_pro') == 0) {
                        $cost_pro = 0;
                        $currency_pro = 'VND';
                    } else {
                        $cost_pro = (int)$this->input->post('cost_pro');
                    }
                    if ($this->input->post('nego_pro') == '1') {
                        $nego_pro = 1;
                    } else {
                        $nego_pro = 0;
                    }
                    if ($this->input->post('saleoff_pro') == '1') {
                        $saleoff_pro = 1;
                    } else {
                        $saleoff_pro = 0;
                    }
                    if ((int)$this->session->userdata('sessionGroup') == 3) {
                        $reliable = 1;
                    } else {
                        $reliable = 0;
                    }

                    if ($this->input->post('mannufacurer_pro') == "khac" && $this->input->post('manafac_khac') != "") {
                        $this->load->model('manufacturer_model');
                        $dataPostManafac = array(
                            'man_name' => trim($this->filter->injection_html($this->input->post('manafac_khac'))),
                            'man_status' => 0,
                            'man_id_category' => trim($this->filter->injection_html($this->input->post('hd_category_id')))
                        );
                        if ($this->manufacturer_model->add($dataPostManafac)) {
                            $manufacturecusomGetMax = $this->manufacturer_model->get("max(man_id) as Maxman_id");
                            $manufacturecusom = $manufacturecusomGetMax->Maxman_id;
                        }
                    } else {
                        $manufacturecusom = (int)$this->input->post('mannufacurer_pro');
                    }
                    $ngaykeythuc = explode("-", $this->input->post('ngay_ket_thuc'));

                    $af_amt = 0;
                    $af_rate = 0;
                    $af_dc_amt = 0;
                    $af_dc_rate = 0;
                    if ($this->input->post('affiliate_pro') == 0) {
                        $af_amt = 0;
                        $af_rate = 0;
                    } else {
                        if ($this->input->post('pro_type_affiliate') == 1) {
                            $af_amt = 0;
                            $af_rate = $this->input->post('pro_affiliate_value');

                        } else {
                            $af_amt = $this->input->post('pro_affiliate_value');
                            $af_rate = 0;
                        }

                        if ($this->input->post('pro_type_dc_affiliate') == 1) {
                            $af_dc_amt = 0;
                            $af_dc_rate = $this->input->post('pro_dc_affiliate_value');

                        } else {
                            $af_dc_amt = $this->input->post('pro_dc_affiliate_value');
                            $af_dc_rate = 0;
                        }
                    }
                    if ($this->input->post('saleoff_pro') && ($this->input->post('saleoff_pro') != '')) {
                        $add_days = (int)$this->input->post('promotion_expiry');
                        if ($this->input->post('prom_begin') && ($this->input->post('prom_begin') != '')) {
                            $begin_date = $this->input->post('prom_begin');
                        } else {
                            $begin_date = date('Y/m/d', time());
                        }
                        $promotion_expiry = strtotime($begin_date . ' +' . $add_days . ' days');
                    } else {
                        $begin_date = 0;
                        $promotion_expiry = 0;
                    }
                    //Edit data product
                    $dataEdit = array(
                        'pro_name' => trim($this->filter->injection_html($this->input->post('name_pro'))),
                        'pro_sku' => trim($this->filter->injection_html($this->input->post('pro_sku'))),
                        'pro_descr' => trim($this->filter->injection_html($this->filter->clear($this->input->post('descr_pro')))),
                        'pro_keyword' => trim($this->filter->injection_html($this->filter->clear($this->input->post('keyword_pro')))),
                        'pro_cost' => $cost_pro,
                        'pro_currency' => $currency_pro,
                        'pro_hondle' => $nego_pro,
                        'pro_saleoff' => $saleoff_pro,
                        'pro_category' => (int)$this->input->post('hd_category_id'),
                        'pro_enddate' => mktime(0, 0, 0, (int)$ngaykeythuc[1], (int)$ngaykeythuc[0], (int)$ngaykeythuc[2]),
                        'pro_detail' => trim($this->filter->injection_html($this->input->post('txtContent'))),
                        'pro_image' => $image,
                        'pro_dir' => $dir_image,
                        'pro_poster' => trim($this->filter->injection_html($this->input->post('fullname_pro'))),
                        'pro_address' => trim($this->filter->injection_html($this->input->post('address_pro'))),
                        'pro_phone' => trim($this->filter->injection_html($this->input->post('phone_pro'))),
                        'pro_mobile' => trim($this->filter->injection_html($this->input->post('mobile_pro'))),
                        'pro_email' => trim($this->filter->injection_html($this->input->post('email_pro'))),
                        'pro_yahoo' => trim($this->filter->injection_html($this->input->post('yahoo_pro'))),
                        'pro_skype' => trim($this->filter->injection_html($this->input->post('skype_pro'))),
                        'pro_show' => (int)$this->input->post('pro_show_img'),
                        'pro_saleoff_value' => ($this->input->post('pro_saleoff_value')) ? trim($this->filter->injection_html($this->input->post('pro_saleoff_value'))) : 0,
                        'pro_hot' => (int)$this->input->post('pro_hot'),
                        'pro_type_saleoff' => trim($this->input->post('pro_type_saleoff')),
                        'is_product_affiliate' => ($this->input->post('affiliate_pro')) ? trim($this->input->post('affiliate_pro')) : 0,
                        'af_amt' => $af_amt,
                        'af_rate' => $af_rate,
                        'af_dc_amt' => $af_dc_amt,
                        'af_dc_rate' => $af_dc_rate,                        
                        'pro_province' => (int)$this->input->post('province_pro'),
                        'pro_reliable' => $reliable,
                        'pro_manufacturer_id' => $manufacturecusom,
                        'pro_instock' => trim($this->filter->injection_html($this->input->post('pro_instock'))),
                        'pro_unit' => trim($this->filter->injection_html($this->input->post('pro_unit'))),
                        'pro_vat' => $this->input->post('pro_vat'),
                        'pro_quality' => $this->input->post('pro_quality'),
                        'pro_made_from' => $this->input->post('pro_made_from'),
                        'pro_warranty_period' => ($this->input->post('pro_warranty_period')) ? trim($this->filter->injection_html($this->input->post('pro_warranty_period'))) : 0,
                        'up_date' => date('Y-m-d H:i:s', time()),
                        'pro_video' => $this->input->post('pro_video'),
                        'pro_weight' => $this->input->post('pro_weight'),
                        'pro_length' => $this->input->post('pro_length'),
                        'pro_width' => $this->input->post('pro_width'),
                        'pro_height' => $this->input->post('pro_height'),
                        'pro_minsale' => (int)$this->input->post('pro_minsale'),
                        'begin_date_sale' => strtotime($begin_date),
                        'end_date_sale' => $promotion_expiry,
                        'pro_user_modified' => $this->session->userdata('sessionUser')
                    );
                    if ($this->product_model->update($dataEdit, "pro_id = " . $product->pro_id)) {
                        $this->session->set_flashdata('sessionSuccessEditProductAccount', 1);

                        $promotions = array();
                        if (!empty($_POST['row'])) {
                            // Add promotion
                            // Delete old row
                            $deleteRow = array('pro_id' => $product->pro_id);
                            if ($_POST['limit_type'] == 1) {
                                $deleteRow['limit_type'] = 2;
                            } else {
                                $deleteRow['limit_type'] = 1;
                            }
                            $this->product_promotion_model->deleteRow($deleteRow);

                            foreach ($_POST['row'] as $row) {
                                $promotion = array();
                                $promotion['limit_from'] = $row['limit_from'];
                                $promotion['limit_to'] = $row['limit_to'];
                                $promotion['limit_type'] = $_POST['limit_type'];
                                if ($row['type'] == 1) {
                                    $promotion['dc_amt'] = $row['amount'];
                                    $promotion['dc_rate'] = 0;
                                } else {
                                    $promotion['dc_rate'] = $row['amount'];
                                    $promotion['dc_amt'] = 0;
                                }
                                $promotion['pro_id'] = $product->pro_id;
                                array_push($promotions, $promotion);
                            }
                            $this->product_promotion_model->add($promotions);
                        }

                        //Lưu trữ trường quy cách                       
                        $standards = array();
                        if (!empty($_POST['rowqc'])) {
                           
                            //Get bộ id để xóa
                            $Id_array = array();
                            $id_to_del = $this->detail_product_model->fetch("id", "dp_pro_id = " . $product->pro_id);

                            if ($id_to_del) {
                                foreach ($id_to_del as $k => $v) {
                                    $Id_array[] = $v->id;
                                }
                            }

                            $image_qc = $this->session->userdata('image_name_qc');
                            // dd($image_qc);die();
                            // $image_qc = array();
                            // if ($image_name_qc != '') {
                            //     $str_image_qc = $image_name_qc;
                            // }
                            // $image_qc = explode(',', $str_image_qc);
                            


                            $t = 0;
                            $row = 1;
                            $image_Arr = array();
                            foreach ($_POST['rowqc'] as $key => $rowqc) {
                                //$t = $t + 1;
                                $field_image = 'rowqc_' . $t . '_qcimage';
                                //($_REQUEST[$field_image] != '' || $rowqc['qcimage'] != '') && 
                                if ($rowqc['qccost'] != '' && $rowqc['qcinstock'] != '' && ($rowqc['qcsize'] != '' || $rowqc['qccolor'] != '' || $rowqc['qcmaterial'] != '')) {
                                    $standard = array();
                                    $standard['dp_pro_id'] = $product->pro_id;
                                    $standard['dp_size'] = $rowqc['qcsize'];
                                    $standard['dp_color'] = $rowqc['qccolor'];
                                    $standard['dp_material'] = $rowqc['qcmaterial'];
                                    $standard['dp_cost'] = $rowqc['qccost'];
                                    $standard['dp_instock'] = $rowqc['qcinstock'];
                                    $standard['dp_createdate'] = date('Y-m-d');

                                    // //Case:: ĐỔi hình hoặc Thêm mới
                                    // if (isset($rowqc['qcid']) && $rowqc['qcid'] != "") {// && isset($_REQUEST[$field_image]) && $_REQUEST[$field_image] != ""
                                    //     //Case:: Giữ hình cũ
                                    //     $standard['dp_images'] = $rowqc['qcimage'];
                                    // } else {
                                    //     $standard['dp_images'] = $image_qc[$key];//$row
                                    // }
                                    if(isset($image_qc[$key]) && $image_qc[$key] != '') {
                                        $standard['dp_images'] = $image_qc[$key];
                                    }else {
                                        $standard['dp_images'] = $rowqc['qcimage'];
                                    }
                                    
                                }
                                    $t++;
                                //var_dump($standard);
                                //array_push($standards[], $standard);

                                $this->detail_product_model->add($standard);
                            }
                            //Xóa product detail
                            if ($Id_array && !empty($Id_array)) {
                                $this->detail_product_model->delete($Id_array, 'id', true);
                            }
                        }

                        if ($dataEdit && $this->session->userdata('image_name')) {
                            $this->session->unset_userdata('image_name');
                        }

                        if ($dataEdit && $this->session->userdata('image_name_qc')) {
                            $this->session->unset_userdata('image_name_qc');
                        }
                    }
                    $this->session->set_userdata('sessionTimePosted', time());
                    redirect(base_url() . trim(uri_string(), '/'), 'location');
                } else {//load data edit product
                    $data['pro_id'] = $product->pro_id;
                    $data['name_pro'] = $product->pro_name;
                    $data['sku_pro'] = $product->pro_sku;
                    $data['descr_pro'] = $product->pro_descr;
                    $data['keyword_pro'] = $product->pro_keyword;
                    $data['cost_pro'] = $product->pro_cost;
                    $data['currency_pro'] = $product->pro_currency;
                    if ((int)$product->pro_cost == 0) {
                        $data['nonecost_pro'] = 1;
                    } else {
                        $data['nonecost_pro'] = 0;
                    }
                    $data['nego_pro'] = $product->pro_hondle;
                    $data['saleoff_pro'] = $product->pro_saleoff;
                    $data['province_pro'] = $product->pro_province;
                    $data['category_pro'] = $product->pro_category;
                    $data['day_pro'] = date('d', $product->pro_enddate);
                    $data['month_pro'] = date('m', $product->pro_enddate);
                    $data['year_pro'] = date('Y', $product->pro_enddate);
                    $data['txtContent'] = $product->pro_detail;
                    $data['fullname_pro'] = $product->pro_poster;
                    $data['address_pro'] = $product->pro_address;
                    $data['phone_pro'] = $product->pro_phone;
                    $data['mobile_pro'] = $product->pro_mobile;
                    $data['email_pro'] = $product->pro_email;
                    $data['yahoo_pro'] = $product->pro_yahoo;
                    $data['skype_pro'] = $product->pro_skype;
                    $data['pro_saleoff_value'] = $product->pro_saleoff_value;
                    $data['pro_hot'] = $product->pro_hot;
                    $data['pro_type_saleoff'] = $product->pro_type_saleoff;
                    $data['pro_show'] = $product->pro_show;
                    $data['mannufacurer_pro'] = $product->pro_manufacturer_id;
                    $data['pro_dir'] = $product->pro_dir;
                    $data['pro_image'] = $product->pro_image;
                    $data['pro_instock'] = $product->pro_instock;
                    $data['pro_unit'] = $product->pro_unit;
                    $data['pro_vat'] = $product->pro_vat;
                    $data['pro_quality'] = $product->pro_quality;
                    $data['pro_made_from'] = $product->pro_made_from;
                    $data['pro_warranty_period'] = $product->pro_warranty_period;
                    $data['affiliate_pro'] = $product->is_product_affiliate;
                    $data['dc_amount'] = $product->dc_amt > 0 ? $product->dc_amt : $product->dc_rate;
                    $data['dc_type'] = $product->dc_amt > 0 ? 2 : 1;
                    $data['dc_af_amount'] = $product->af_dc_amt > 0 ? $product->af_dc_amt : $product->af_dc_rate;
                    $data['dc_af_type'] = $product->af_dc_amt > 0 ? 2 : 1;
                    $data['pro_video'] = $product->pro_video;
                    $data['pro_weight'] = $product->pro_weight;
                    $data['pro_length'] = $product->pro_length;
                    $data['pro_width'] = $product->pro_width;
                    $data['pro_height'] = $product->pro_height;
                    $data['pro_minsale'] = $product->pro_minsale;
                    $data['begin_date_sale'] = $product->begin_date_sale;
                    $data['end_date_sale'] = $product->end_date_sale;

                    if ($product->is_product_affiliate == 1) {
                        if ($product->af_amt > 0) {
                            $pro_affiliate_value = $product->af_amt;
                            $pro_type_affiliate = 2;
                        } else {
                            $pro_affiliate_value = $product->af_rate;
                            $pro_type_affiliate = 1;
                        }
                    } else {
                        $pro_affiliate_value = 0;
                    }
                    $data['pro_affiliate_value'] = $pro_affiliate_value;
                    $data['pro_type_affiliate'] = $pro_type_affiliate;

                    $dp_id_edit = $product->pro_id;
                    if ((int)$this->session->userdata('sessionGroup') == BranchUser && $product->pro_of_shop > 0) {
                        $dp_id_edit = $product->pro_of_shop;
                    }
                    // Add promotion
                    $data['promotions'] = $this->product_promotion_model->getPromotion(array('pro_id' => $dp_id_edit));

                    //Edit Trường quy cách                    
                    $data['de_product'] = $this->detail_product_model->fetch("*", "dp_pro_id = " . $dp_id_edit, 'id', 'ASC');

                    #Hủy session image_name
                    if ($this->session->userdata('image_name')) {
                        $this->session->unset_userdata('image_name');
                    }

                    #Hủy session image_name_qc
                    if ($this->session->userdata('image_name_qc')) {
                        $this->session->unset_userdata('image_name_qc');
                    }

                    if ($url1 != '' && $url1 == 'service') {
                        $catpye = 1;
                    } elseif ($url1 != '' && $url1 == 'coupon') {
                        $catpye = 2;
                    } else {
                        if($product->pro_type == 2) {
                            $catpye = 2;
                        } else {
                            $catpye = 0;
                        }
                    }
                    
                    $cat_parent = $this->category_model->get("*", "cat_id = " . (int)$product->pro_category);

                    $data['fee_cate'] = 0;
                    switch ($cat_parent->cat_level) {
                        case '1':
                            $cat_lavel_1_temp = $this->category_model->fetch("*", "cat_status = 1 AND cate_type = " . $catpye . " AND parent_id = " . (int)$cat_parent->parent_id);
                            $data['cat_level_1'] = $cat_lavel_1_temp;
                            $data['fee_cate'] = $cat_lavel_1_temp[0]->b2c_fee;
                            break;

                        case '2':
                            $cat_lavel_2_temp = $this->category_model->fetch("*", "cat_status = 1 AND cate_type = " . $catpye . " AND parent_id = " . (int)$cat_parent->parent_id);
                            $data['cat_level_2'] = $cat_lavel_2_temp;
                            $get_category_leve2 = $this->category_model->get("*", "cat_status = 1 AND cate_type = " . $catpye . " AND cat_id = " . (int)$cat_parent->parent_id);
                            $cat_lavel_1_temp = $this->category_model->fetch("*", "cat_status = 1 AND cate_type = " . $catpye . " AND parent_id = " . (int)$get_category_leve2->parent_id);
                            $data['cat_level_1'] = $cat_lavel_1_temp;
                            $data['fee_cate'] = $cat_lavel_1_temp[0]->b2c_fee;
                            break;
                        case '3':
                            $cat_lavel_3_temp = $this->category_model->fetch("*", "cat_status = 1 AND cate_type = " . $catpye . " AND parent_id = " . (int)$cat_parent->parent_id);
                            $data['cat_level_3'] = $cat_lavel_3_temp;
                            $get_category_leve3 = $this->category_model->get("*", "cat_status = 1 AND cate_type = " . $catpye . " AND cat_id = " . (int)$cat_parent->parent_id);
                            $cat_lavel_2_temp = $this->category_model->fetch("*", "cat_status = 1 AND cate_type = " . $catpye . " AND parent_id = " . (int)$get_category_leve3->parent_id);
                            $data['cat_level_2'] = $cat_lavel_2_temp;
                            $get_category_leve2 = $this->category_model->get("*", "cat_status = 1 AND cate_type = " . $catpye . " AND cat_id = " . (int)$get_category_leve3->parent_id);
                            $cat_lavel_1_temp = $this->category_model->fetch("*", "cat_status = 1 AND parent_id = " . (int)$get_category_leve2->parent_id);
                            $data['cat_level_1'] = $cat_lavel_1_temp;
                            $data['fee_cate'] = $cat_lavel_1_temp[0]->b2c_fee;
                            break;
                        case '4':
                            $cat_lavel_4_temp = $this->category_model->fetch("*", "cat_status = 1 AND cate_type = " . $catpye . " AND parent_id = " . (int)$cat_parent->parent_id);
                            $data['cat_level_4'] = $cat_lavel_4_temp;
                            $get_category_leve4 = $this->category_model->get("*", "cat_status = 1 AND cate_type = " . $catpye . " AND cat_id = " . (int)$cat_parent->parent_id);
                            $cat_lavel_3_temp = $this->category_model->fetch("*", "cat_status = 1 AND cate_type = " . $catpye . " AND parent_id = " . (int)$get_category_leve4->parent_id);
                            $data['cat_level_3'] = $cat_lavel_3_temp;
                            $get_category_leve3 = $this->category_model->get("*", "cat_status = 1 AND cate_type = " . $catpye . " AND cat_id = " . (int)$get_category_leve4->parent_id);
                            $cat_lavel_2_temp = $this->category_model->fetch("*", "cat_status = 1 AND cate_type = " . $catpye . " AND parent_id = " . (int)$get_category_leve3->parent_id);
                            $data['cat_level_2'] = $cat_lavel_2_temp;
                            $get_category_leve2 = $this->category_model->get("*", "cat_status = 1 AND cate_type = " . $catpye . " AND cat_id = " . (int)$get_category_leve3->parent_id);
                            $cat_lavel_1_temp = $this->category_model->fetch("*", "cat_status = 1 AND cate_type = " . $catpye . " AND parent_id = " . (int)$get_category_leve2->parent_id);
                            $data['cat_level_1'] = $cat_lavel_1_temp;
                            $data['fee_cate'] = $cat_lavel_1_temp[0]->b2c_fee;
                            break;
                    }
                    if ($shop->sho_category > 0) {
                        $where_category = ' AND cat_id =' . $shop->sho_category;
                    } else {
                        $where_category = "";
                    }
                    $cat_level_0 = $this->category_model->fetch("*", "parent_id = 0 AND cat_status = 1 AND cate_type = $catpye", "cat_service, cat_order, cat_id", "ASC");
                    foreach ($cat_level_0 as $item) {
                        $cat_lv_1 = $this->category_model->fetch("*", "parent_id = " . $item->cat_id . " AND cat_status = 1 AND cate_type = " . $catpye, "cat_order, cat_id", "ASC");
                        $cat_level_0[0]->child_count = count($cat_lv_1);
                    }
                    $data['catlevel0'] = $cat_level_0;                    
                }               
            }
            #Load view'
            $data['pro_type'] = $product->pro_type;
            $this->load->view('home/account/product/edit', $data);
        } elseif ((strtolower($url1) == 'editbran' && $getVar['editbran'] != FALSE) || (strtolower($url2) == 'editbran' && strtolower($url1) == 'coupon') || (strtolower($url2) == 'editbran' && strtolower($url1) == 'service')) {
            #BEGIN: CHECK GROUP
            if ((int)$this->session->userdata('sessionGroup') == 1) {
                redirect(base_url() . 'account', 'location');
                die();
            }
            #END CHECK GROUP
            $product = $this->product_model->get("tbtt_product.*", "pro_id = " . (int)$getVar['editbran'] . " AND pro_user = " . (int)$this->session->userdata('sessionUser'));
            if (count($product) != 1 || !$this->check->is_id($getVar['editbran'])) {
                redirect(base_url() . 'account/product', 'location');
                die();
            }
            #BEGIN: Unlink captcha
            $this->load->helper('unlink');
            unlink_captcha($this->session->flashdata('sessionPathCaptchaEditProductAccount'));
            #END Unlink captcha
            if ($this->session->flashdata('sessionSuccessEditProductAccount')) {
                $data['successEditProductAccount'] = true;
            } else {
                $this->load->library('form_validation');
                $data['successEditProductAccount'] = false;
                #BEGIN: Province

                //$data['province'] = $this->province_model->fetch("pre_id, pre_name", "pre_status = 1", "pre_order", "ASC");
                #END Province
                $this->form_validation->set_message('required', $this->lang->line('required_message'));
                //$this->form_validation->set_message('is_natural', $this->lang->line('is_natural_message'));
                //$this->form_validation->set_message('_valid_nick', $this->lang->line('_valid_nick_message'));
                //$this->form_validation->set_message('valid_email', $this->lang->line('valid_email_message'));
                //$this->form_validation->set_message('min_length', $this->lang->line('min_length_message'));
                //$this->form_validation->set_message('max_length', $this->lang->line('max_length_message'));
                //$this->form_validation->set_message('_exist_province', $this->lang->line('_exist_province_message'));
                //$this->form_validation->set_message('_exist_category', $this->lang->line('_exist_category_message'));
                //$this->form_validation->set_message('_valid_enddate_edit_product', $this->lang->line('_valid_enddate_message'));
                //$this->form_validation->set_message('_is_phone', $this->lang->line('_is_phone_message'));
                //$this->form_validation->set_error_delimiters('<div class="div_errorpost">', '</div>');
                #END Set message
                if ($this->form_validation->run() != FALSE || $this->input->post('name_pro')) {

                    if ((int)$this->input->post('cost_pro') == 0) {
                        $cost_pro = 0;
                        $currency_pro = 'VND';
                    } else {
                        $cost_pro = (int)$this->input->post('cost_pro');
                    }

                    $af_amt = 0;
                    $af_rate = 0;
                    $af_dc_amt = 0;
                    $af_dc_rate = 0;
                    if ($this->input->post('affiliate_pro') == 0) {
                        $af_amt = 0;
                        $af_rate = 0;
                    } else {
                        if ($this->input->post('pro_type_affiliate') == 1) {
                            $af_amt = 0;
                            $af_rate = $this->input->post('pro_affiliate_value');

                        } else {
                            $af_amt = $this->input->post('pro_affiliate_value');
                            $af_rate = 0;
                        }

                        if ($this->input->post('pro_type_dc_affiliate') == 1) {
                            $af_dc_amt = 0;
                            $af_dc_rate = $this->input->post('pro_dc_affiliate_value');

                        } else {
                            $af_dc_amt = $this->input->post('pro_dc_affiliate_value');
                            $af_dc_rate = 0;
                        }
                    }                  

                    $dataEdit = array(
                        'pro_cost' => $cost_pro,
                        //'pro_currency' => $currency_pro,
                        'pro_detail' => trim($this->filter->injection_html($this->input->post('txtContent'))),                      
                        'is_product_affiliate' => trim($this->input->post('affiliate_pro')),
                        'af_amt' => $af_amt,
                        'af_rate' => $af_rate,
                        'af_dc_amt' => $af_dc_amt,
                        'af_dc_rate' => $af_dc_rate
                    );
                    if ($this->product_model->update($dataEdit, 'pro_id = '. $product->pro_id)) {
                        $this->session->set_flashdata('sessionSuccessEditProductAccount', 1);
                    }
                    $this->session->set_userdata('sessionTimePosted', time());
                    redirect(base_url() . trim(uri_string(), '/'), 'location');
                } else {
                    $readonly = $display = '';
                    if ($product->pro_of_shop > 0) {
                        $readonly = 'readonly';
                        $display = 'display:none;';
                    }
                    $data['readonly'] = $readonly;
                    $data['display'] = $display;

                    $data['pro_id'] = $product->pro_id;
                    $data['name_pro'] = $product->pro_name;
                    $data['sku_pro'] = $product->pro_sku;
                    $data['descr_pro'] = $product->pro_descr;
                    $data['keyword_pro'] = $product->pro_keyword;
                    $data['cost_pro'] = $product->pro_cost;
                    $data['currency_pro'] = $product->pro_currency;
                    if ((int)$product->pro_cost == 0) {
                        $data['nonecost_pro'] = 1;
                    } else {
                        $data['nonecost_pro'] = 0;
                    }
                    $data['nego_pro'] = $product->pro_hondle;
                    $data['saleoff_pro'] = $product->pro_saleoff;
                    $data['province_pro'] = $product->pro_province;
                    $data['category_pro'] = $product->pro_category;
                    $data['day_pro'] = date('d', $product->pro_enddate);
                    $data['month_pro'] = date('m', $product->pro_enddate);
                    $data['year_pro'] = date('Y', $product->pro_enddate);
                    $data['txtContent'] = $product->pro_detail;
                    $data['fullname_pro'] = $product->pro_poster;
                    $data['address_pro'] = $product->pro_address;
                    $data['phone_pro'] = $product->pro_phone;
                    $data['mobile_pro'] = $product->pro_mobile;
                    $data['email_pro'] = $product->pro_email;
                    $data['yahoo_pro'] = $product->pro_yahoo;
                    $data['skype_pro'] = $product->pro_skype;
                    $data['pro_saleoff_value'] = $product->pro_saleoff_value;
                    $data['pro_type_saleoff'] = $product->pro_type_saleoff;
                    $data['pro_hot'] = $product->pro_hot;
                    $data['pro_show'] = $product->pro_show;
                    $data['mannufacurer_pro'] = $product->pro_manufacturer_id;
                    $data['pro_dir'] = $product->pro_dir;
                    $data['pro_image'] = $product->pro_image;
                    $data['pro_instock'] = $product->pro_instock;
                    $data['pro_unit'] = $product->pro_unit;
                    $data['pro_vat'] = $product->pro_vat;
                    $data['pro_quality'] = $product->pro_quality;
                    $data['pro_made_from'] = $product->pro_made_from;
                    $data['pro_warranty_period'] = $product->pro_warranty_period;
                    $data['affiliate_pro'] = $product->is_product_affiliate;
                    $data['dc_amount'] = $product->dc_amt > 0 ? $product->dc_amt : $product->dc_rate;
                    $data['dc_type'] = $product->dc_amt > 0 ? 2 : 1;
                    $data['dc_af_amount'] = $product->af_dc_amt > 0 ? $product->af_dc_amt : $product->af_dc_rate;
                    $data['dc_af_type'] = $product->af_dc_amt > 0 ? 2 : 1;
                    $data['pro_video'] = $product->pro_video;
                    $data['pro_weight'] = $product->pro_weight;
                    $data['pro_length'] = $product->pro_length;
                    $data['pro_width'] = $product->pro_width;
                    $data['pro_height'] = $product->pro_height;
                    $data['pro_minsale'] = $product->pro_minsale;
                    $data['begin_date_sale'] = $product->begin_date_sale;
                    $data['end_date_sale'] = $product->end_date_sale;

                    if ($product->is_product_affiliate == 1) {
                        if ($product->af_amt > 0) {
                            $pro_affiliate_value = $product->af_amt;
                            $pro_type_affiliate = 2;
                        } else {
                            $pro_affiliate_value = $product->af_rate;
                            $pro_type_affiliate = 1;
                        }
                    } else {
                        $pro_affiliate_value = 0;
                    }
                    $data['pro_affiliate_value'] = $pro_affiliate_value;
                    $data['pro_type_affiliate'] = $pro_type_affiliate;

                    $dp_id_edit = $product->pro_id;
                    if ((int)$this->session->userdata('sessionGroup') == BranchUser && $product->pro_of_shop > 0) {
                        $dp_id_edit = $product->pro_of_shop;
                    }
                    // Add promotion
                    $data['promotions'] = $this->product_promotion_model->getPromotion(array('pro_id' => $dp_id_edit));

                    //Edit Trường quy cách                    
                    $data['de_product'] = $this->detail_product_model->fetch("*", "dp_pro_id = " . $dp_id_edit, 'id', 'ASC');

                    #Hủy session image_name
                    if ($this->session->userdata('image_name')) {
                        $this->session->unset_userdata('image_name');
                    }

                    #Hủy session image_name_qc
                    if ($this->session->userdata('image_name_qc')) {
                        $this->session->unset_userdata('image_name_qc');
                    }

                    if ($url1 != '' && $url1 == 'service') {
                        $catpye = 1;
                    } elseif ($url1 != '' && $url1 == 'coupon') {
                        $catpye = 2;
                    } else {
                        if($product->pro_type == 2) {
                            $catpye = 2;
                        } else {
                            $catpye = 0;
                        }
                    }
                    $cat_parent = $this->category_model->get("*", "cat_id = " . (int)$product->pro_category);
                    $data['fee_cate'] = 0;
                    switch ($cat_parent->cat_level) {
                        case '1':
                            $cat_lavel_1_temp = $this->category_model->fetch("*", "cat_status = 1 AND cate_type = " . $catpye . " AND parent_id = " . (int)$cat_parent->parent_id);
                            $data['cat_level_1'] = $cat_lavel_1_temp;
                            $data['fee_cate'] = $cat_lavel_1_temp[0]->b2c_fee;
                            break;

                        case '2':
                            $cat_lavel_2_temp = $this->category_model->fetch("*", "cat_status = 1 AND cate_type = " . $catpye . " AND parent_id = " . (int)$cat_parent->parent_id);
                            $data['cat_level_2'] = $cat_lavel_2_temp;
                            $get_category_leve2 = $this->category_model->get("*", "cat_status = 1 AND cate_type = " . $catpye . " AND cat_id = " . (int)$cat_parent->parent_id);
                            $cat_lavel_1_temp = $this->category_model->fetch("*", "cat_status = 1 AND cate_type = " . $catpye . " AND parent_id = " . (int)$get_category_leve2->parent_id);
                            $data['cat_level_1'] = $cat_lavel_1_temp;
                            $data['fee_cate'] = $cat_lavel_1_temp[0]->b2c_fee;
                            break;
                        case '3':
                            $cat_lavel_3_temp = $this->category_model->fetch("*", "cat_status = 1 AND cate_type = " . $catpye . " AND parent_id = " . (int)$cat_parent->parent_id);
                            $data['cat_level_3'] = $cat_lavel_3_temp;
                            $get_category_leve3 = $this->category_model->get("*", "cat_status = 1 AND cate_type = " . $catpye . " AND cat_id = " . (int)$cat_parent->parent_id);
                            $cat_lavel_2_temp = $this->category_model->fetch("*", "cat_status = 1 AND cate_type = " . $catpye . " AND parent_id = " . (int)$get_category_leve3->parent_id);
                            $data['cat_level_2'] = $cat_lavel_2_temp;
                            $get_category_leve2 = $this->category_model->get("*", "cat_status = 1 AND cate_type = " . $catpye . " AND cat_id = " . (int)$get_category_leve3->parent_id);
                            $cat_lavel_1_temp = $this->category_model->fetch("*", "cat_status = 1 AND parent_id = " . (int)$get_category_leve2->parent_id);
                            $data['cat_level_1'] = $cat_lavel_1_temp;
                            $data['fee_cate'] = $cat_lavel_1_temp[0]->b2c_fee;
                            break;
                        case '4':
                            $cat_lavel_4_temp = $this->category_model->fetch("*", "cat_status = 1 AND cate_type = " . $catpye . " AND parent_id = " . (int)$cat_parent->parent_id);
                            $data['cat_level_4'] = $cat_lavel_4_temp;
                            $get_category_leve4 = $this->category_model->get("*", "cat_status = 1 AND cate_type = " . $catpye . " AND cat_id = " . (int)$cat_parent->parent_id);
                            $cat_lavel_3_temp = $this->category_model->fetch("*", "cat_status = 1 AND cate_type = " . $catpye . " AND parent_id = " . (int)$get_category_leve4->parent_id);
                            $data['cat_level_3'] = $cat_lavel_3_temp;
                            $get_category_leve3 = $this->category_model->get("*", "cat_status = 1 AND cate_type = " . $catpye . " AND cat_id = " . (int)$get_category_leve4->parent_id);
                            $cat_lavel_2_temp = $this->category_model->fetch("*", "cat_status = 1 AND cate_type = " . $catpye . " AND parent_id = " . (int)$get_category_leve3->parent_id);
                            $data['cat_level_2'] = $cat_lavel_2_temp;
                            $get_category_leve2 = $this->category_model->get("*", "cat_status = 1 AND cate_type = " . $catpye . " AND cat_id = " . (int)$get_category_leve3->parent_id);
                            $cat_lavel_1_temp = $this->category_model->fetch("*", "cat_status = 1 AND cate_type = " . $catpye . " AND parent_id = " . (int)$get_category_leve2->parent_id);
                            $data['cat_level_1'] = $cat_lavel_1_temp;
                            $data['fee_cate'] = $cat_lavel_1_temp[0]->b2c_fee;
                            break;
                    }
                    if ($shop->sho_category > 0) {
                        $where_category = ' AND cat_id =' . $shop->sho_category;
                    } else {
                        $where_category = "";
                    }
                    $cat_level_0 = $this->category_model->fetch("*", "parent_id = 0 AND cat_status = 1 AND cate_type = $catpye", "cat_service, cat_order, cat_id", "ASC");
                    foreach ($cat_level_0 as $item) {
                        $cat_lv_1 = $this->category_model->fetch("*", "parent_id = " . $item->cat_id . " AND cat_status = 1 AND cate_type = " . $catpye, "cat_order, cat_id", "ASC");
                        $cat_level_0[0]->child_count = count($cat_lv_1);
                    }
                    $data['catlevel0'] = $cat_level_0;
                }

            }
            #Load view
            $this->load->view('home/account/product/editbran', $data);

        } elseif (strtolower($this->uri->segment(4)) == 'favorite' || (strtolower($this->uri->segment(3)) == 'coupon' && strtolower($this->uri->segment(4)) == 'favorite')) {
            $this->load->model('product_favorite_model');
            #BEGIN: Menu 2
            #END Menu 2
            #BEGIN: Delete
            if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
                $this->product_favorite_model->delete($this->input->post('checkone'), "prf_id", (int)$this->session->userdata('sessionUser'), "prf_user");
                redirect(base_url() . trim(uri_string(), '/'), 'location');
            }
            #END Delete
            #Define url for $getVar
            $action = array('search', 'keyword', 'sort', 'by', 'page');
            $getVar = $this->uri->uri_to_assoc(5, $action);
            #BEGIN: Search & sort
            $where = "prf_user = " . (int)$this->session->userdata('sessionUser');

            if (strtolower($this->uri->segment(3)) == 'coupon') {
                $where .= ' AND pro_type=2';
            } else {
                if (strtolower($this->uri->segment(2)) == 'product') {
                    $where .= ' AND pro_type=0';
                    $data['menuSelected'] = 'favorite_product';
                }
            }
            $sort = 'prf_id';
            $by = 'DESC';
            $sortUrl = '';
            $pageSort = '';
            $pageUrl = '';
            $keyword = '';
            if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
                $keyword = $this->filter->html($getVar['keyword']);
                switch (strtolower($getVar['search'])) {
                    case 'name':
                        $sortUrl .= '/search/name/keyword/' . $getVar['keyword'];
                        $pageUrl .= '/search/name/keyword/' . $getVar['keyword'];
                        $where .= " AND pro_name LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                        break;
                }
            }
            #If have sort
            if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
                switch (strtolower($getVar['sort'])) {
                    case 'name':
                        $pageUrl .= '/sort/name';
                        $sort = "pro_name";
                        break;
                    case 'cost':
                        $pageUrl .= '/sort/cost';
                        $sort = "pro_cost";
                        break;
                    case 'postdate':
                        $pageUrl .= '/sort/postdate';
                        $sort = "pro_begindate";
                        break;
                    case 'date':
                        $pageUrl .= '/sort/date';
                        $sort = "prf_date";
                        break;
                    default:
                        $pageUrl .= '/sort/id';
                        $sort = "prf_id";
                }
                if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                    $pageUrl .= '/by/desc';
                    $by = "DESC";
                } else {
                    $pageUrl .= '/by/asc';
                    $by = "ASC";
                }
            }
            #If have page
            if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
                $start = (int)$getVar['page'];
                $pageSort .= '/page/' . $start;
            } else {
                $start = 0;
            }
            #END Search & sort
            #Keyword
            $data['keyword'] = $keyword;
            #BEGIN: Create link sort
            $data['sortUrl'] = base_url() . 'account/product/product/favorite' . $sortUrl . '/sort/';
            $data['pageSort'] = $pageSort;
            #END Create link sort
            #BEGIN: Pagination
            $this->load->library('pagination');
            #Count total record
            $limit = settingOtherAccount;
            $totalRecord = count($this->product_favorite_model->fetch_join("prf_id", "LEFT", "tbtt_product", "tbtt_product_favorite.prf_product = tbtt_product.pro_id", $where, "", ""));
            $config['base_url'] = base_url() . 'account/product/product/favorite' . $pageUrl . '/page/';
            $config['total_rows'] = $totalRecord;
            $config['per_page'] = $limit;
            $config['num_links'] = 1;
            $config['uri_segment'] = 4;
            $config['cur_page'] = $start;
            $this->pagination->initialize($config);
            $data['linkPage'] = $this->pagination->create_links();
            #END Pagination
            #sTT - So thu tu
            $data['sTT'] = $start + 1;
            #Fetch record
            $select = "prf_id, prf_date, pro_id, pro_name, pro_descr, pro_category, pro_dir, pro_image, pro_begindate, pro_cost, pro_currency, pro_view";
            $data['favoriteProduct'] = $this->product_favorite_model->fetch_join($select, "LEFT", "tbtt_product", "tbtt_product_favorite.prf_product = tbtt_product.pro_id", $where, $sort, $by, $start, $limit);
            #Load view           
            $data['successEditShopAccount'] = false;
            #BEGIN: Get shop
            $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
            $data['shopid'] = $shop->sho_id;
            $this->load->view('home/account/product/favorite', $data);
        } else {
            #BEGIN: CHECK GROUP
            if ((int)$this->session->userdata('sessionGroup') == 1) {
                redirect(base_url() . 'account', 'location');
                die();
            }
            #END CHECK GROUP
            #BEGIN: Delete
            if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
                $this->load->library('file');
                $idCheckOneProduct = implode(',', $this->input->post('checkone'));
                $checkOneProduct = $this->product_model->fetch("pro_id, pro_image, pro_dir", "pro_id IN($idCheckOneProduct) AND pro_user = " . (int)$this->session->userdata('sessionUser'));
                $idProduct = array();
                foreach ($checkOneProduct as $checkOneProductArray) {
                    $idProduct[] = $checkOneProductArray->pro_id;
                    #Remove image
                    if ($checkOneProductArray->pro_image != 'none.gif') {
                        $imageArray = explode(',', $checkOneProductArray->pro_image);
                        foreach ($imageArray as $imageArrays) {
                            if (trim($imageArrays) != '' && file_exists('media/images/product/' . $checkOneProductArray->pro_dir . '/' . $imageArrays)) {
                                @unlink('media/images/product/' . $checkOneProductArray->pro_dir . '/' . $imageArrays);
                            }
                        }
                        for ($i = 1; $i <= 3; $i++) {
                            if (file_exists('media/images/product/' . $checkOneProductArray->pro_dir . '/thumbnail_' . $i . '_' . $imageArray[0])) {
                                @unlink('media/images/product/' . $checkOneProductArray->pro_dir . '/thumbnail_' . $i . '_' . $imageArray[0]);
                            }
                        }
                        if (trim($checkOneProductArray->pro_dir) != '' && is_dir('media/images/product/' . $checkOneProductArray->pro_dir) && count($this->file->load('media/images/product/' . $checkOneProductArray->pro_dir, 'index.html')) == 0) {
                            if (file_exists('media/images/product/' . $checkOneProductArray->pro_dir . '/index.html')) {
                                @unlink('media/images/product/' . $checkOneProductArray->pro_dir . '/index.html');
                            }
                            @rmdir('media/images/product/' . $checkOneProductArray->pro_dir);
                        }
                    }
                }
                if (count($idProduct) > 0) {
                    $this->load->model('product_favorite_model');
                    $this->load->model('product_comment_model');
                    $this->load->model('product_bad_model');

                    $this->product_favorite_model->delete($idProduct, "prf_product");
                    $this->product_comment_model->delete($idProduct, "prc_product");
                    $this->product_bad_model->delete($idProduct, "prb_product");
                    $this->showcart_model->delete($idProduct, "shc_product");
                    $this->product_model->delete($idProduct, "pro_id");
                }
                redirect(base_url() . trim(uri_string(), '/'), 'location');
            }
            #END Delete
            $this->load->library('hash');
            #BEGIN: Search & sort

            $select = '';
            $where = '';
            $sort = 'tbtt_product.pro_id';
            $by = 'DESC';
            $sortUrl = '';
            $pageSort = '';
            $pageUrl = '';
            $keyword = '';
            $protye = $this->uri->segment(3);
            if (isset($protye) && $protye == 'service') {
                $pro_type = 1;
            } elseif (isset($protye) && $protye == 'coupon') {
                $pro_type = 2;
            } else {
                $pro_type = 0;
            }

            $join_1 = 'LEFT';
            $table_1 = 'tbtt_category';
            $on_1 = 'tbtt_product.pro_category = tbtt_category.cat_id';
            $join_2 = '';
            $table_2 = '';
            $on_2 = '';
            $where .= "pro_user = " . (int)$this->session->userdata('sessionUser');
            
            if($this->input->post('keyword_account') != ''){
                $where .= ' AND pro_name like "%' . $this->input->post('keyword_account') . '%"';
                $keyword = $this->input->post('keyword_account');
            }
            if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
                switch (strtolower($getVar['search'])) {
                    case 'name':
                        $sortUrl .= '/search/name/keyword/' . $getVar['keyword'];
                        $pageUrl .= '/search/name/keyword/' . $getVar['keyword'];
                        $where .= " AND pro_type = $pro_type AND pro_name LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                        break;
                }
            }
            #If have sort
            if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
                switch (strtolower($getVar['sort'])) {
                    case 'name':
                        $pageUrl .= '/sort/name';
                        $sort = "pro_name";
                        break;
                    case 'category':
                        $pageUrl .= '/sort/category';
                        $sort = "cat_name";
                        break;
                    case 'postdate':
                        $pageUrl .= '/sort/postdate';
                        $sort = "pro_begindate";
                        break;
                    case 'enddate':
                        $pageUrl .= '/sort/enddate';
                        $sort = "pro_enddate";
                        break;
                    default:
                        $pageUrl .= '/sort/id';
                        $sort = "pro_order, pro_id";
                }
                if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                    $pageUrl .= '/by/desc';
                    $by = "DESC";
                } else {
                    $pageUrl .= '/by/asc';
                    $by = "ASC";
                }
            }
            #If have page
            if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
                $start = (int)$getVar['page'];
                $pageSort .= '/page/' . $start;
            } else {
                $start = 0;
            }
            #END Search & sort

            $catpye = 0;
            if ($url1 != '') {
                if ($url1 != '' && $url1 == 'service') {
                    $catpye = 1;
                    $where .= ' AND pro_type = ' . $catpye;
                } elseif ($url1 != '' && $url1 == 'coupon') {
                    $catpye = 2;
                    $where .= ' AND pro_type = ' . $catpye;
                } else {
                    $where .= ' AND pro_type = ' . $catpye;
                }
            } else {
                $where .= ' AND pro_type = ' . $catpye;
            }

            if ($url1 == 'service' || $url1 == 'coupon') {
            } else {
                $linkactive = '';
            }
            $linkactive = '/' . $this->uri->segment(3);

            #Keyword
            $data['keyword'] = $keyword;
            #BEGIN: Create link sort
            $data['sortUrl'] = base_url() . 'account/product' . $linkactive . $sortUrl . '/sort/';
            $data['pageSort'] = $pageSort;
            #END Create link sort

            #BEGIN: UPDATE ACTIVE (Status)
            $statusUrl = $pageUrl . $pageSort;
            if($group_id == StaffStoreUser) {
                if($this->uri->segment(3) == 'product') {
                    $data['statusUrl'] = base_url() . 'account/emp-product';
                } elseif($this->uri->segment(3) == 'coupon') {
                    $data['statusUrl'] = base_url() . 'account/emp-coupon';
                }
            } else {
                $data['statusUrl'] = base_url() . 'account/product' . $linkactive . $statusUrl;
            }
            if ($getVar['status'] != FALSE && trim($getVar['status']) != '' && $getVar['id'] != FALSE && (int)$getVar['id'] > 0) {
                if ($group_id == BranchUser || ($group_id == StaffStoreUser && $parent_group == BranchUser)) {
                    $this->session->set_flashdata('checkConfigBranch', 'Liên hệ với Gian hàng của bạn!.');
                } else {
                    switch (strtolower($getVar['status'])) {
                        case 'active':
                            if($group_id == StaffStoreUser) {
                                $this->product_model->update(array('pro_status' => 1), "pro_id = " . (int)$getVar['id'] . " AND pro_user = " . $parent_id);
                            } else {
                                $this->product_model->update(array('pro_status' => 1), "pro_id = " . (int)$getVar['id'] . " AND pro_user = " . (int)$this->session->userdata('sessionUser'));
                            }
                            break;

                        case 'deactive':
                            if($group_id == StaffStoreUser) {
                                $this->product_model->update(array('pro_status' => 0), "pro_id = " . (int)$getVar['id'] . " AND pro_user = " . $parent_id);
                            } else {
                                $this->product_model->update(array('pro_status' => 0), "pro_id = " . (int)$getVar['id'] . " AND pro_user = " . (int)$this->session->userdata('sessionUser'));
                            }
                            break;
                    }
                }
                redirect($data['statusUrl'], 'location');
            }
            #END UPDATE ACTIVE (Status)

            #BEGIN: Pagination
            $this->load->library('pagination');
            #Count total record
            $totalRecord = count($this->product_model->fetch_join("pro_id", $join_1, $table_1, $on_1, $join_2, $table_2, $on_2, "", "", "", $where, "", ""));

            $limit = settingOtherAccount;
            $config['base_url'] = base_url() . 'account/product' . $linkactive . $pageUrl . '/page/';
            $config['total_rows'] = $totalRecord;
            $config['per_page'] = $limit;
            $config['num_links'] = 5;
            $config['uri_segment'] = 4;
            $config['cur_page'] = $start;
            $this->pagination->initialize($config);

            $data['linkPage'] = $this->pagination->create_links();
            #END Pagination
            #sTT - So thu tu
            $data['sTT'] = $start + 1;
            #Fetch record
            $select .= "pro_type, pro_id, pro_name, pro_descr, pro_user_up, pro_user_modified, up_date, pro_category, pro_dir, pro_image, pro_begindate, pro_enddate, pro_status, pro_view, pro_cost, pro_instock, pro_saleoff_value, pro_type_saleoff, pro_order, cat_name, is_product_affiliate, af_amt, af_rate, pro_of_shop";
            $data['product'] = $this->product_model->fetch_join($select, $join_1, $table_1, $on_1, $join_2, $table_2, $on_2, "", "", "", $where, $sort, $by, $start, $limit);
            foreach ($data['product'] as $key => $item) {
                if($item->pro_user_up > 0) {
                    $data['product'][$key]->pro_user_up = $this->user_model->get('use_fullname','use_id = ' . $item->pro_user_up)->use_fullname;
                } else {
                    $data['product'][$key]->pro_user_up = 'Shop tự đăng';
                }
                if($item->pro_user_modified > 0) {
                    $data['product'][$key]->pro_user_modified = $this->user_model->get('use_fullname','use_id = ' . $item->pro_user_modified)->use_fullname;
                }
            }
            
            $data['totalRecord'] = $totalRecord;
            #Load view
            //echo $this->db->last_query();
            #Load view
            $get_u = $this->user_model->fetch_join('use_id, parent_id, use_group, sho_link, domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $this->session->userdata('sessionUser') . '"');           
            $protocol = "http://";
            $duoi = explode('//', base_url())[1];
            switch ($get_u[0]->use_group) {
                case AffiliateStoreUser:
                case AffiliateUser:
                case BranchUser:
                    if ($get_u[0]->domain != '') {
                        $data['domain'] = $get_u[0]->domain . '/';
                    } else {
                        $data['domain'] = $get_u[0]->sho_link .'.'. $duoi;
                    }
                    break;
            }
            $data['shop'] = $protocol . $data['domain'];
            $data['flash_message'] = $this->session->flashdata('countProductByUser');
            $data['flash_msg_error'] = $this->session->flashdata('checkConfigBranch');
            $this->load->view('home/account/product/defaults', $data);
        }
    }

    function upload_photo()
    {
        $num = (int)$_REQUEST['images_pos'];
        $product_dir = $_REQUEST['product_dir'];
        $image_old = $_REQUEST['images_old'];
        if($image_old != '') {
            //Connect FTP to server cloud
            $this->load->library('ftp');
            $config['hostname'] = IP_CLOUDSERVER;
            $config['username'] = USER_CLOUDSERVER;
            $config['password'] = PASS_CLOUDSERVER;
            $config['port']     = PORT_CLOUDSERVER;                
            $config['debug']    = FALSE;
            $this->ftp->connect($config);
            $path_delete = '/public_html/media/images/product';
            $lfile = array();
    
            $lfile = $this->ftp->list_files($path_delete .'/'. $product_dir);
           
            if (in_array($image_old, $lfile)) {
                $this->ftp->delete_file($path_delete .'/'. $product_dir .'/'. $image_old);
                $this->ftp->delete_file($path_delete .'/'. $product_dir .'/thumbnail_1_'. $image_old);
                $this->ftp->delete_file($path_delete .'/'. $product_dir .'/thumbnail_2_'. $image_old);
                $this->ftp->delete_file($path_delete .'/'. $product_dir .'/thumbnail_3_'. $image_old);
                $this->ftp->close();
            }
        }
        if ($num > 0 && $product_dir != "") {
            $this->load->library('upload');
            $pathImage = "media/images/product/";
            // $dir_image = $product_dir;
            $dir_image = $this->session->userdata('sessionUsername');
            if (!is_dir($pathImage . $dir_image)) {
                @mkdir($pathImage . $dir_image, 0777);                
            }

            $config['upload_path'] = $pathImage . $dir_image . '/';
            $config['allowed_types'] = 'gif|jpg|jpeg|png|GIF|JPG|PNG';
            $config['max_size'] = 10240;#KB
            $config['max_width'] = 10240;#px
            $config['max_height'] = 10240;#px
            $config['encrypt_name'] = true;
            $this->upload->initialize($config);

            $imageArray = '';
            if ($this->upload->do_upload('photo')) {
                $uploadData = $this->upload->data();
                if ($uploadData['is_image'] == TRUE) {
                    $this->load->library('image_lib');
					$imageArray = $uploadData['file_name'];											
					$configResize['source_image'] = $pathImage . $dir_image . '/' . $imageArray;
					$configResize['new_image'] = $pathImage . $dir_image . '/' . $imageArray;
					$configResize['maintain_ratio'] = TRUE;
					$configResize['quality'] = '90%';
					if($uploadData['image_width'] > $uploadData['image_height']){
						$configResize['width'] = '1';
						$configResize['height'] = '600';					 
						$configResize['master_dim'] = 'height';
					}					
					if($uploadData['image_width'] < $uploadData['image_height']){
						$configResize['width'] = '600';
						$configResize['height'] = '1';					 
						$configResize['master_dim'] = 'width';
					}
					if($uploadData['image_width'] == $uploadData['image_height']){
						$configResize['width'] = '600';
						$configResize['height'] = '600';
					}					
					$this->image_lib->initialize($configResize);
					$this->image_lib->resize();
					$this->image_lib->clear();
                } elseif (file_exists($pathImage . $dir_image . '/' . $uploadData['file_name'])) {
                    @unlink($pathImage . $dir_image . '/' . $uploadData['file_name']);
                }

                $type = pathinfo($uploadData['full_path'], PATHINFO_EXTENSION);
                $data = file_get_contents($uploadData['full_path']);
                $photo_dest_crop = 'data:image/' . $type . ';base64,' . base64_encode($data);

                //$photo_dest_crop = '/' . $pathImage . $dir_image . '/' . $uploadData['file_name'];
                unset($uploadData);
            }

            $image_name = $this->session->userdata('image_name');
            if ($image_name) {
                $image_name .= ',' . $imageArray;
            } else {
                $image_name = $imageArray;
            }
            $this->session->set_userdata('image_name', $image_name);

            if ($image_name != '') {
                echo '<script type="text/javascript">window.top.window.show_popup_crop("' . $photo_dest_crop . '",' . $num . ')</script>'; die;
            }
        }
    }

    function crop_photo()
    {
        // Target siz
        $targ_w = $_POST['targ_w'];
        $targ_h = $_POST['targ_h'];
        // quality
        $jpeg_quality = 90;
        // photo path
        $src = $_POST['photo_url'];
        $product_dir = $_REQUEST['product_dir'];
        $pathImage = "media/images/product/";
        // $dir_image = $product_dir;
        $dir_image = $this->session->userdata('sessionUsername');

        $img = end(explode(',', $this->session->userdata('image_name')));

        $path = $pathImage.$dir_image;

        $this->convertStringToImage($img, $path, $src);

        $src = $pathImage . $dir_image . '/' . $img;
        // create new jpeg image based on the target sizes
        $img_r = imagecreatefromjpeg($src);
        $dst_r = ImageCreateTrueColor($targ_w, $targ_h);
        // crop photo
        imagecopyresampled($dst_r, $img_r, 0, 0, $_POST['x'], $_POST['y'], $targ_w, $targ_h, $_POST['w'], $_POST['h']);
        // create the physical photo
        imagejpeg($dst_r, $src, $jpeg_quality);

        #BEGIN: Create thumbnail
        $this->load->library('image_lib');
        if (file_exists($pathImage . $dir_image . '/' . $img)) {
            for ($j = 1; $j <= 3; $j++) {
                switch ($j) {
                    case 1:
                        $maxWidth = 150;#px
                        $maxHeight = 150;#px
                        break;
                    case 3:
                        $maxWidth = 600;#px
                        $maxHeight = 600;#px
                        break;
                    default:
                        $maxWidth = 300;#px
                        $maxHeight = 300;#px
                }

                $sizeImage = size_thumbnail($src, $maxWidth, $maxHeight);
                $configImage['source_image'] = $pathImage . $dir_image . '/' . $img;
                $configImage['new_image'] = $pathImage . $dir_image . '/thumbnail_' . $j . '_' . $img;
                $configImage['maintain_ratio'] = TRUE;
                $configImage['width'] = $sizeImage['width'];
                $configImage['height'] = $sizeImage['height'];
                $this->image_lib->initialize($configImage);
                $this->image_lib->resize();
                $this->image_lib->clear();
            }
        }
        #END Create thumbnail 
        // Upload to other server cloud
        $img_thum = '';
        if(file_exists($pathImage . $dir_image .'/'. $img) 
            && file_exists($pathImage . $dir_image .'/thumbnail_1_'. $img)        
            && file_exists($pathImage . $dir_image .'/thumbnail_2_'. $img)
            && file_exists($pathImage . $dir_image .'/thumbnail_3_'. $img)
        ){
            $this->load->library('ftp');

            $config['hostname'] = IP_CLOUDSERVER;
            $config['username'] = USER_CLOUDSERVER;
            $config['password'] = PASS_CLOUDSERVER;
            $config['port']     = PORT_CLOUDSERVER;                
            $config['debug']    = FALSE;
            $this->ftp->connect($config);

            $path = '/public_html/media/images/product';
            $dirname = $product_dir;            
            $tmp_path = $pathImage . $dir_image . '/' . $img;
            $tmp_path_1 = $pathImage . $dir_image . '/thumbnail_1_' . $img;
            $tmp_path_2 = $pathImage . $dir_image . '/thumbnail_2_' . $img;
            $tmp_path_3 = $pathImage . $dir_image . '/thumbnail_3_' . $img;
            $ldir = array();
            $ldir = $this->ftp->list_files($path);

            // if $my_dir name exists in array returned by nlist in current '.' dir
            if (! in_array($dirname, $ldir)) {                    
                $this->ftp->mkdir($path .'/'. $dirname, 0775);
            }

            if($this->ftp->upload($tmp_path, $path .'/'. $dirname .'/'. $img, 'auto', 0775) 
                && $this->ftp->upload($tmp_path_1, $path .'/'. $dirname .'/thumbnail_1_'. $img, 'auto', 0775)
                && $this->ftp->upload($tmp_path_2, $path .'/'. $dirname .'/thumbnail_2_'. $img, 'auto', 0775)
                && $this->ftp->upload($tmp_path_3, $path .'/'. $dirname .'/thumbnail_3_'. $img, 'auto', 0775)
            ){
                $img_thum = DOMAIN_CLOUDSERVER .'media/images/product/'. $dirname .'/thumbnail_1_'. $img;
                if (file_exists('media/images/product/' . $dir_image . '/index.html')) {
                    @unlink('media/images/product/' . $dir_image . '/index.html');
                }
                array_map('unlink', glob('media/images/product/'. $dir_image .'/*'));
                @rmdir('media/images/product/' . $dir_image);
            } 

            $this->ftp->close();     
        }

        // display the  photo - "?time()" to force refresh by the browser
        //$img_thum = '/' . $pathImage . $dir_image . '/thumbnail_1_' . $img;
        $result = array('image_name' => $img, 'image' => '<img src="' . $img_thum . '?' . time() . '">');       
        
        echo json_encode($result);
       
        exit;
    }

    function upload_photo_qc()
    {
        $num = (int)$_REQUEST['images_pos_qc'];
        $product_dir = $_REQUEST['product_dir'];
        $dp_id_ = (int)$_REQUEST['dp_id'];
        $dp_images = $_REQUEST['dp_images'];
        if ($num > 0 && $product_dir != "") {
            $this->load->library('upload');
            $pathImage = "media/images/product/";
            // $dir_image = $product_dir;
            $dir_image = $this->session->userdata('sessionUsername');
            if (!is_dir($pathImage . $dir_image)) {
                @mkdir($pathImage . $dir_image, 0775);
            }

            $config['upload_path'] = $pathImage . $dir_image . '/';
            $config['allowed_types'] = 'gif|jpg|jpeg|png|GIF|JPG|PNG';
            $config['max_size'] = 10240;#KB
            $config['max_width'] = 10240;#px
            $config['max_height'] = 10240;#px
            $config['encrypt_name'] = true;
            $this->upload->initialize($config);

            $imageArray = '';
            if ($this->upload->do_upload('photo_qc')) {
                $uploadData = $this->upload->data();
                if ($uploadData['is_image'] == TRUE) {
                    $this->load->library('image_lib');
					$imageArray = $uploadData['file_name'];											
					$configResize['source_image'] = $pathImage . $dir_image . '/' . $imageArray;
					$configResize['new_image'] = $pathImage . $dir_image . '/' . $imageArray;
					$configResize['maintain_ratio'] = TRUE;
					$configResize['quality'] = '90%';
					if($uploadData['image_width'] > $uploadData['image_height']){
						$configResize['width'] = '1';
						$configResize['height'] = '600';					 
						$configResize['master_dim'] = 'height';
					}					
					if($uploadData['image_width'] < $uploadData['image_height']){
						$configResize['width'] = '600';
						$configResize['height'] = '1';					 
						$configResize['master_dim'] = 'width';
					}
					if($uploadData['image_width'] == $uploadData['image_height']){
						$configResize['width'] = '600';
						$configResize['height'] = '600';
					}					
					$this->image_lib->initialize($configResize);
					$this->image_lib->resize();
					$this->image_lib->clear();
                } elseif (file_exists($pathImage . $dir_image . '/' . $uploadData['file_name'])) {
                    @unlink($pathImage . $dir_image . '/' . $uploadData['file_name']);
                }

                $type = pathinfo($uploadData['full_path'], PATHINFO_EXTENSION);
                $data = file_get_contents($uploadData['full_path']);
                $photo_dest_crop = 'data:image/' . $type . ';base64,' . base64_encode($data);
                // $photo_dest_crop = '/' . $pathImage . $dir_image . '/' . $uploadData['file_name'];
                unset($uploadData);
            }

            if ($dp_id_ > 0) {
                $dp_del_ = $this->detail_product_model->get('dp_images', 'id = ' . $dp_id_);
                $this->load->library('ftp');
                $config['hostname'] = IP_CLOUDSERVER;
                $config['username'] = USER_CLOUDSERVER;
                $config['password'] = PASS_CLOUDSERVER;
                $config['port']     = PORT_CLOUDSERVER;                
                $config['debug']    = FALSE;
                $this->ftp->connect($config);
                $path = '/public_html/media/images/product';
                $ldir = array(); 
                $lfile = array();
                $ldir = $this->ftp->list_files($path);
                $lfile = $this->ftp->list_files($path .'/'. $product_dir);

                if ($dp_del_ && in_array($product_dir, $ldir) && in_array($dp_images, $lfile)) {//$pr_qc->dp_images
                    $this->ftp->delete_file($path .'/'. $product_dir .'/'. $dp_images);
                    $this->ftp->delete_file($path .'/'. $product_dir .'/thumbnail_1_'. $dp_images);
                    $this->ftp->delete_file($path .'/'. $product_dir .'/thumbnail_2_'. $dp_images);                
                    $this->ftp->delete_file($path .'/'. $product_dir .'/thumbnail_3_'. $dp_images);
                    $this->ftp->close();
                }
                $this->detail_product_model->update(array('dp_images' => $imageArray), "id = " . $dp_id_);
                
            } else {
                if ($dp_images != '') {
                    $this->load->library('ftp');
                    $config['hostname'] = IP_CLOUDSERVER;
                    $config['username'] = USER_CLOUDSERVER;
                    $config['password'] = PASS_CLOUDSERVER;
                    $config['port']     = PORT_CLOUDSERVER;                
                    $config['debug']    = FALSE;
                    $this->ftp->connect($config);
                    $path = '/public_html/media/images/product';
                    $ldir = array(); 
                    $lfile = array();
                    $ldir = $this->ftp->list_files($path);
                    $lfile = $this->ftp->list_files($path .'/'. $product_dir);
                    if (in_array($product_dir, $ldir) && in_array($dp_images, $lfile)) {//$pr_qc->dp_images
                        $this->ftp->delete_file($path .'/'. $product_dir .'/'. $dp_images);
                        $this->ftp->delete_file($path .'/'. $product_dir .'/thumbnail_1_'. $dp_images);
                        $this->ftp->delete_file($path .'/'. $product_dir .'/thumbnail_2_'. $dp_images);
                        $this->ftp->delete_file($path .'/'. $product_dir .'/thumbnail_3_'. $dp_images);
                        $this->ftp->close();
                    }
                }
                
            }
            $image_name_qc = array();
            $image_name_qc = $this->session->userdata('image_name_qc');
            $image_name_qc[$num] = $imageArray;
            
            // dd($image_name_qc);
            // if (empty($image_name_qc)) {
            //     echo 'aaaaaaaa';
                
            // } else {
            //     echo 'bbbbbbbbbb';
            //     dd($image_name_qc);
                
            //     $image_name_qc .= ',' . $imageArray;
                
            //     $array = array();
            //     $image_ = explode(',', $image_name_qc);
            //     foreach($image_ as $key => $value){
            //         if($value != $dp_images){
            //             $array[] = $value;
            //         }
            //     }
            //     $image_name_qc = $array;
            // }
     
            $this->session->set_userdata('image_name_qc', $image_name_qc);

            echo '<script type="text/javascript">window.top.window.show_popup_crop_qc("' . $photo_dest_crop . '",' . $num . ',' . $dp_id_ . ')</script>'; die;
        }
    }

    function crop_photo_qc()
    {
        // Target siz
        $targ_w = $_POST['targ_w'];
        $targ_h = $_POST['targ_h'];
        // quality
        $jpeg_quality = 90;
        // photo path
        $src = $_POST['photo_url'];
        $num = (int)$_POST['num_qc'];
        $product_dir = $_REQUEST['product_dir'];
        $pathImage = "media/images/product/";
        // $dir_image = $product_dir;
        $dir_image = $this->session->userdata('sessionUsername');
        $aImage = $this->session->userdata('image_name_qc');
        $img = $aImage[$num];

        $path = $pathImage.$dir_image;

        $this->convertStringToImage($img, $path, $src);

        $src = $pathImage . $dir_image . '/' . $img;
        // create new jpeg image based on the target sizes
        $img_r = imagecreatefromjpeg($src);
        $dst_r = ImageCreateTrueColor($targ_w, $targ_h);
        // crop photo
        imagecopyresampled($dst_r, $img_r, 0, 0, $_POST['x'], $_POST['y'], $targ_w, $targ_h, $_POST['w'], $_POST['h']);
        // create the physical photo
        imagejpeg($dst_r, $src, $jpeg_quality);

        #BEGIN: Create thumbnail
        $this->load->library('image_lib');
        if (file_exists($pathImage . $dir_image . '/' . $img)) {
            for ($j = 1; $j <= 3; $j++) {
                switch ($j) {
                    case 1:
                        $maxWidth = 150;#px
                        $maxHeight = 150;#px
                        break;
                    case 3:
                        $maxWidth = 600;#px
                        $maxHeight = 600;#px
                        break;
                    default:
                        $maxWidth = 300;#px
                        $maxHeight = 300;#px
                }

                $sizeImage = size_thumbnail($src, $maxWidth, $maxHeight);
                $configImage['source_image'] = $pathImage . $dir_image . '/' . $img;
                $configImage['new_image'] = $pathImage . $dir_image . '/thumbnail_' . $j . '_' . $img;
                $configImage['maintain_ratio'] = TRUE;
                $configImage['width'] = $sizeImage['width'];
                $configImage['height'] = $sizeImage['height'];
                $this->image_lib->initialize($configImage);
                $this->image_lib->resize();
                $this->image_lib->clear();
            }
        }
        #END Create thumbnail 
        // Upload to other server cloud
        $img_thum = '';
        if(file_exists($pathImage . $dir_image .'/'. $img) 
            && file_exists($pathImage . $dir_image .'/thumbnail_1_'. $img)        
            && file_exists($pathImage . $dir_image .'/thumbnail_2_'. $img)
            && file_exists($pathImage . $dir_image .'/thumbnail_3_'. $img)
        ){
            $this->load->library('ftp');

            $config['hostname'] = IP_CLOUDSERVER;
            $config['username'] = USER_CLOUDSERVER;
            $config['password'] = PASS_CLOUDSERVER;
            $config['port']     = PORT_CLOUDSERVER;                
            $config['debug']    = FALSE;
            $this->ftp->connect($config);

            $path = '/public_html/media/images/product';
            $dirname = $product_dir;            
            $tmp_path = $pathImage . $dir_image . '/' . $img;
            $tmp_path_1 = $pathImage . $dir_image . '/thumbnail_1_' . $img;
            $tmp_path_2 = $pathImage . $dir_image . '/thumbnail_2_' . $img;
            $tmp_path_3 = $pathImage . $dir_image . '/thumbnail_3_' . $img;
            $ldir = array();
            $ldir = $this->ftp->list_files($path);
           
            // if $my_dir name exists in array returned by nlist in current '.' dir
            if (! in_array($dirname, $ldir)) {                    
                $this->ftp->mkdir($path .'/'. $dirname, 0775);
            }

            if($this->ftp->upload($tmp_path, $path .'/'. $dirname .'/'. $img, 'auto', 0775) 
                && $this->ftp->upload($tmp_path_1, $path .'/'. $dirname .'/thumbnail_1_'. $img, 'auto', 0775)
                && $this->ftp->upload($tmp_path_2, $path .'/'. $dirname .'/thumbnail_2_'. $img, 'auto', 0775)
                && $this->ftp->upload($tmp_path_3, $path .'/'. $dirname .'/thumbnail_3_'. $img, 'auto', 0775)
            ){
                $img_thum = DOMAIN_CLOUDSERVER .'media/images/product/'. $dirname .'/thumbnail_1_'. $img;
                if (file_exists('media/images/product/' . $dir_image . '/index.html')) {
                    @unlink('media/images/product/' . $dir_image . '/index.html');
                }
                array_map('unlink', glob('media/images/product/'. $dir_image .'/*'));
                @rmdir('media/images/product/' . $dir_image);
            } 

            $this->ftp->close();     
        }

        // display the  photo - "?time()" to force refresh by the browser
        // $img_thum = '/' . $pathImage . $dir_image . '/thumbnail_1_' . $img;
        //$str_cancel = "'rqc_image_" . $num . "'";
        //echo '<input type="button" class="btn btn-default" id="btn_cancel_' . $num . '" onclick="resetBrowesIimgQ_qc(' . $str_cancel . ',' . $num . ');" value="Hủy"/>'
        //echo '<img src="' . $img_thum . '?' . time() . '">';

        $str_cancel = "'rqc_image_" . $num . "'";

        $result = array(
            'image_name' => $img, 
            'image' => '<input type="button" class="btn btn-default" id="btn_cancel_' . $num . '" onclick="resetBrowesIimgQ_qc(' . $str_cancel . ',' . $num . ');" value="Hủy"/>'
                . '<input type="hidden" class="imgthum_'.$num.'" value="' . $img . '"><img src="' . $img_thum . '?' . time() . '">'
        );       
        
        echo json_encode($result);

        exit;
    }

    function raovat()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu 1
        $data['menuSelected'] = 'raovat';
        $data['menuType'] = 'account';
        #END Menu 1
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar     
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        $this->load->model('ads_category_model');
        $cat_level_0 = $this->ads_category_model->fetch("*", "parent_id = 0 AND cat_status = 1", "cat_order, cat_id", "ASC");
        if (isset($cat_level_0)) {
            foreach ($cat_level_0 as $key => $item) {
                $cat_level_1 = $this->ads_category_model->fetch("*", "parent_id = " . (int)$item->cat_id . " AND cat_status = 1");
                $cat_level_0[$key]->child_count = count($cat_level_1);
            }
        }
        $data['catlevel0'] = $cat_level_0;

        $action = array('edit', 'search', 'keyword', 'sort', 'by', 'status', 'id', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        if (strtolower($this->uri->segment(3)) == 'edit' && $getVar['edit'] != FALSE) {
            $ads = $this->ads_model->get("*", "ads_id = " . (int)$getVar['edit'] . " AND ads_user = " . (int)$this->session->userdata('sessionUser'));
            if (count($ads) != 1 || !$this->check->is_id($getVar['edit'])) {
                redirect(base_url() . 'account/raovat', 'location');
                die();
            }
            #BEGIN: Unlink captcha
            $this->load->helper('unlink');
            unlink_captcha($this->session->flashdata('sessionPathCaptchaEditAdsAccount'));
            #END Unlink captcha
            if ($this->session->flashdata('sessionSuccessEditAdsAccount')) {
                $data['successEditAdsAccount'] = true;
            } else {
                $this->load->library('form_validation');
                $data['successEditAdsAccount'] = false;
                #BEGIN: Province

                $data['province'] = $this->province_model->fetch("pre_id, pre_name", "pre_status = 1", "pre_order", "ASC");
                #END Province
                #BEGIN: Category
                $this->load->model('ads_category_model');
                $data['category'] = $this->ads_category_model->fetch("cat_id, cat_name", "cat_status = 1", "cat_name", "ASC");
                #END Category
                if ($this->input->post('captcha_ads') && time() - (int)$this->session->userdata('sessionTimePosted') <= (int)settingTimePost) {
                    redirect(base_url() . 'account/raovat/edit/' . $getVar['edit'], 'location');
                    die();
                }

                $this->form_validation->set_message('required', $this->lang->line('required_message'));
                $this->form_validation->set_message('_valid_nick', $this->lang->line('_valid_nick_message'));
                $this->form_validation->set_message('valid_email', $this->lang->line('valid_email_message'));
                $this->form_validation->set_message('min_length', $this->lang->line('min_length_message'));
                $this->form_validation->set_message('max_length', $this->lang->line('max_length_message'));
                $this->form_validation->set_message('_exist_province', $this->lang->line('_exist_province_message'));
                $this->form_validation->set_message('_exist_category', $this->lang->line('_exist_category_message'));
                $this->form_validation->set_message('_valid_enddate_edit_ads', $this->lang->line('_valid_enddate_message'));
                $this->form_validation->set_message('_is_phone', $this->lang->line('_is_phone_message'));
                $this->form_validation->set_message('_valid_captcha_edit_ads', $this->lang->line('_valid_captcha_message_ads_edit'));
                $this->form_validation->set_error_delimiters('<div class="div_errorpost">', '</div>');
                #END Set message
                if ($this->form_validation->run() != FALSE || $this->input->post('isEditAds')) {
                    #BEGIN: Upload image
                    $this->load->library('upload');
                    $pathImage = "media/images/raovat/";
                    #Create folder
                    $dir_image = $ads->ads_dir;
                    if ($dir_image == 'default') {
                        $dir_image = date('dmY');
                    }
                    $image = $ads->ads_image;
                    if (!is_dir($pathImage . $dir_image)) {
                        @mkdir($pathImage . $dir_image, 0777, true);
                        $this->load->helper('file');
                        @write_file($pathImage . $dir_image . '/index.html', '<p>Directory access is forbidden.</p>');
                    }
                    $config['upload_path'] = $pathImage . $dir_image . '/';
                    $config['allowed_types'] = 'gif|jpg|jpeg|png';
                    $config['max_size'] = 10240;#KB
                    $config['max_width'] = 10240;#px
                    $config['max_height'] = 10240;#px
                    $config['encrypt_name'] = true;
                    $this->upload->initialize($config);
                    if ($this->upload->do_upload('image_ads')) {
                        $uploadData = $this->upload->data();
                        if ($uploadData['is_image'] == TRUE) {
                            if (trim($image) != '' && trim($image) != 'none.gif' && file_exists($pathImage . $dir_image . '/' . $image)) {
                                @unlink($pathImage . $dir_image . '/' . $image);
                                if (file_exists($pathImage . $dir_image . '/thumbnail_3_' . $image)) {
                                    @unlink($pathImage . $dir_image . '/thumbnail_3_' . $image);
                                }
                            }
                            $image = $uploadData['file_name'];
                            #BEGIN: Create thumbnail
                            $this->load->library('image_lib');
                            if (file_exists($pathImage . $dir_image . '/' . $image)) {
                                $maxWidth = 200;#px
                                $maxHeight = 200;#px
                                $sizeImage = size_thumbnail($pathImage . $dir_image . '/' . $image, $maxWidth, $maxHeight);
                                $configImage['source_image'] = $pathImage . $dir_image . '/' . $image;
                                $configImage['new_image'] = $pathImage . $dir_image . '/thumbnail_3_' . $image;
                                $configImage['maintain_ratio'] = TRUE;
                                $configImage['width'] = $sizeImage['width'];
                                $configImage['height'] = $sizeImage['height'];
                                $this->image_lib->initialize($configImage);
                                $this->image_lib->resize();
                            }
                            #END Create thumbnail
                        } elseif (file_exists($pathImage . $dir_image . '/' . $uploadData['file_name'])) {
                            @unlink($pathImage . $dir_image . '/' . $uploadData['file_name']);
                        }
                    }
                    if ($image == 'none.gif') {
                        #Remove dir
                        $this->load->library('file');
                        if (trim($dir_image) != '' && trim($dir_image) != 'default' && is_dir('media/images/raovat/' . $dir_image) && count($this->file->load('media/images/raovat/' . $dir_image, 'index.html')) == 0) {
                            if (file_exists('media/images/raovat/' . $dir_image . '/index.html')) {
                                @unlink('media/images/raovat/' . $dir_image . '/index.html');
                            }
                            @rmdir('media/images/raovat/' . $dir_image);
                        }
                        $dir_image = 'default';
                    }
                    #END Upload image
                    if ((int)$this->session->userdata('sessionGroup') == 2 || (int)$this->session->userdata('sessionGroup') == 3) {
                        $reliable = 1;
                    } else {
                        $reliable = 0;
                    }
                    #IF is shop                   
                    $shop = $this->shop_model->get("sho_id", "sho_status = 1 AND sho_enddate >= $currentDate AND sho_user = " . (int)$this->session->userdata('sessionUser'));
                    if (count($shop) == 1) {
                        $is_shop = 1;

                    } else {
                        $is_shop = 0;
                    }
                    $ngaykeythuc = explode("-", $this->input->post('ngay_ket_thuc'));
                    $dataEdit = array(
                        'ads_title' => trim($this->filter->injection_html($this->input->post('title_ads'))),
                        'ads_descr' => trim($this->filter->injection_html($this->filter->clear($this->input->post('descr_ads')))),
                        'ads_province' => (int)$this->input->post('province_ads'),
                        'ads_category' => (int)$this->input->post('hd_category_id'),
                        'ads_loaitin' => (int)$this->input->post('loai_tin'),
                        'ads_enddate' => mktime(0, 0, 0, (int)$ngaykeythuc[1], (int)$ngaykeythuc[0], (int)$ngaykeythuc[2]),
                        'ads_detail' => trim($this->filter->injection_html($this->input->post('txtContent'))),
                        'ads_image' => $image,
                        'ads_dir' => $dir_image,
                        'ads_poster' => trim($this->filter->injection_html($this->input->post('fullname_ads'))),
                        'ads_address' => trim($this->filter->injection_html($this->input->post('address_ads'))),
                        'ads_phone' => trim($this->filter->injection_html($this->input->post('phone_ads'))),
                        'ads_mobile' => trim($this->filter->injection_html($this->input->post('mobile_ads'))),
                        'ads_email' => trim($this->filter->injection_html($this->input->post('email_ads'))),
                        'ads_yahoo' => trim($this->filter->injection_html($this->input->post('yahoo_ads'))),
                        'ads_skype' => trim($this->filter->injection_html($this->input->post('skype_ads'))),
                        'ads_reliable' => $reliable,
                        'ads_is_shop' => $is_shop
                    );
                    if ($this->ads_model->update($dataEdit, "ads_id = " . $ads->ads_id)) {
                        $this->session->set_flashdata('sessionSuccessEditAdsAccount', 1);
                    }
                    $this->session->set_userdata('sessionTimePosted', time());
                    redirect(base_url() . trim(uri_string(), '/'), 'location');
                } else {
                    $data['title_ads'] = $ads->ads_title;
                    $data['descr_ads'] = $ads->ads_descr;
                    $data['province_ads'] = $ads->ads_province;
                    $data['category_ads'] = $ads->ads_category;
                    $data['day_ads'] = date('d', $ads->ads_enddate);
                    $data['month_ads'] = date('m', $ads->ads_enddate);
                    $data['year_ads'] = date('Y', $ads->ads_enddate);
                    $data['txtContent'] = $ads->ads_detail;
                    $data['fullname_ads'] = $ads->ads_poster;
                    $data['address_ads'] = $ads->ads_address;
                    $data['phone_ads'] = $ads->ads_phone;
                    $data['mobile_ads'] = $ads->ads_mobile;
                    $data['email_ads'] = $ads->ads_email;
                    $data['yahoo_ads'] = $ads->ads_yahoo;
                    $data['skype_ads'] = $ads->ads_skype;
                    $data['ads_image'] = $ads->ads_image;
                    $data['ads_dir'] = $ads->ads_dir;
                    $data['loai_tin'] = $ads->ads_loaitin;
                    $data['ads_id'] = $ads->ads_id;
                    $this->load->model('ads_category_model');
                    $cat_parent = $this->ads_category_model->get("*", "cat_id = " . (int)$ads->ads_category);

                    if ($cat_parent->cat_level == 2) {
                        $cat_lavel_2_temp = $this->ads_category_model->fetch("*", "parent_id = " . (int)$cat_parent->parent_id, "cat_order");

                        $data['cat_level_2'] = $cat_lavel_2_temp;
                        $data['cat_parent_parent'] = $this->ads_category_model->get("*", "parent_id = " . (int)$cat_parent->parent_id);

                        $get_category_leve1 = $this->ads_category_model->get("*", "cat_id = " . (int)$cat_parent->parent_id);

                        $cat_lavel_1_temp = $this->ads_category_model->fetch("*", "parent_id = " . (int)$get_category_leve1->parent_id, "cat_order");
                        $data['cat_parent_parent_0'] = $this->ads_category_model->get("*", "parent_id = " . (int)$get_category_leve1->parent_id);
                        $data['cat_level_1'] = $cat_lavel_1_temp;

                    } else {

                        if ($cat_parent->cat_level == 0) {
                            $data['cat_getcategory0'] = $ads->ads_category;
                        } else {
                            $cat_lavel_1_temp = $this->ads_category_model->fetch("*", "parent_id = " . (int)$cat_parent->parent_id, "cat_order");

                            $data['cat_level_1_cuoi'] = $cat_lavel_1_temp;
                            $data['cat_parent_parent_0'] = $this->ads_category_model->get("*", "parent_id = " . (int)$cat_parent->parent_id);
                        }


                    }


                }
                #BEGIN: Create captcha post ads
                $aCaptcha = $this->createCaptcha(md5(microtime()) . '.' . (int)$this->session->userdata('sessionUser') . 'edia.jpg');
                if(!empty($aCaptcha)) {
                    $data['captcha']                = $aCaptcha['captcha']; 
                    $data['imageCaptchaEditAdsAccount']    = $aCaptcha['imageCaptchaContact'];

                    $this->session->set_userdata('sessionCaptchaEditAdsAccount', $aCaptcha['captcha']);
                    $this->session->set_userdata('sessionPathCaptchaEditAdsAccount', $aCaptcha['imageCaptchaContact']); 
                }
                #END Create captcha post ads
            }
            #Load view

            $this->load->view('home/account/raovat/edit', $data);
        } elseif (strtolower($this->uri->segment(3)) == 'favorite') {
            $this->load->model('ads_favorite_model');
            #BEGIN: Menu 2
            $data['menuSelected'] = 'favorite_ads';
            #END Menu 2
            #BEGIN: Delete
            if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
                $this->ads_favorite_model->delete($this->input->post('checkone'), "adf_id", (int)$this->session->userdata('sessionUser'), "adf_user");
                redirect(base_url() . trim(uri_string(), '/'), 'location');
            }
            #END Delete
            #Define url for $getVar
            $action = array('search', 'keyword', 'sort', 'by', 'page');
            $getVar = $this->uri->uri_to_assoc(4, $action);
            #BEGIN: Search & sort
            $where = "adf_user = " . (int)$this->session->userdata('sessionUser');
            $sort = 'adf_id';
            $by = 'DESC';
            $sortUrl = '';
            $pageSort = '';
            $pageUrl = '';
            $keyword = '';
            if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
                $keyword = $this->filter->html($getVar['keyword']);
                switch (strtolower($getVar['search'])) {
                    case 'title':
                        $sortUrl .= '/search/title/keyword/' . $getVar['keyword'];
                        $pageUrl .= '/search/title/keyword/' . $getVar['keyword'];
                        $where .= " AND ads_title LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                        break;
                }
            }
            #If have sort
            if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
                switch (strtolower($getVar['sort'])) {
                    case 'title':
                        $pageUrl .= '/sort/title';
                        $sort = "ads_title";
                        break;
                    case 'postdate':
                        $pageUrl .= '/sort/postdate';
                        $sort = "ads_begindate";
                        break;
                    case 'date':
                        $pageUrl .= '/sort/date';
                        $sort = "adf_date";
                        break;
                    default:
                        $pageUrl .= '/sort/id';
                        $sort = "adf_id";
                }
                if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                    $pageUrl .= '/by/desc';
                    $by = "DESC";
                } else {
                    $pageUrl .= '/by/asc';
                    $by = "ASC";
                }
            }
            #If have page
            if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
                $start = (int)$getVar['page'];
                $pageSort .= '/page/' . $start;
            } else {
                $start = 0;
            }
            #END Search & sort
            #Keyword
            $data['keyword'] = $keyword;
            #BEGIN: Create link sort
            $data['sortUrl'] = base_url() . 'account/raovat/favorite' . $sortUrl . '/sort/';
            $data['pageSort'] = $pageSort;
            #END Create link sort
            #BEGIN: Pagination
            $this->load->library('pagination');
            #Count total record
            $totalRecord = count($this->ads_favorite_model->fetch_join("adf_id", "LEFT", "tbtt_ads", "tbtt_ads_favorite.adf_ads = tbtt_ads.ads_id", $where, "", ""));
            $config['base_url'] = base_url() . 'account/raovat/favorite' . $pageUrl . '/page/';
            $config['total_rows'] = $totalRecord;
            $config['per_page'] = settingOtherAccount;
            $config['num_links'] = 1;
            $config['uri_segment'] = 4;
            $config['cur_page'] = $start;
            $this->pagination->initialize($config);
            $data['linkPage'] = $this->pagination->create_links();
            #END Pagination
            #sTT - So thu tu
            $data['sTT'] = $start + 1;
            #Fetch record
            $select = "adf_id, adf_date, ads_id, ads_title, ads_category, ads_descr, ads_view, ads_begindate";
            $limit = settingOtherAccount;
            $data['favoriteAds'] = $this->ads_favorite_model->fetch_join($select, "LEFT", "tbtt_ads", "tbtt_ads_favorite.adf_ads = tbtt_ads.ads_id", $where, $sort, $by, $start, $limit);
            #Load view
            $this->load->view('home/account/raovat/favorite', $data);
        } else {
            #BEGIN: Delete
            if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
                $this->load->library('file');
                $idCheckOneAds = implode(',', $this->input->post('checkone'));
                $checkOneAds = $this->ads_model->fetch("ads_id, ads_image, ads_dir", "ads_id IN($idCheckOneAds) AND ads_user = " . (int)$this->session->userdata('sessionUser'));
                $idAds = array();
                foreach ($checkOneAds as $checkOneAdsArray) {
                    $idAds[] = $checkOneAdsArray->ads_id;
                    #Remove image
                    if ($checkOneAdsArray->ads_image != 'none.gif') {
                        if (trim($checkOneAdsArray->ads_image) != '' && file_exists('media/images/raovat/' . $checkOneAdsArray->ads_dir . '/' . $checkOneAdsArray->ads_image)) {
                            @unlink('media/images/raovat/' . $checkOneAdsArray->ads_dir . '/' . $checkOneAdsArray->ads_image);
                            if (file_exists('media/images/raovat/' . $checkOneAdsArray->ads_dir . '/thumbnail_3_' . $checkOneAdsArray->ads_image)) {
                                @unlink('media/images/raovat/' . $checkOneAdsArray->ads_dir . '/thumbnail_3_' . $checkOneAdsArray->ads_image);
                            }
                        }
                        if (trim($checkOneAdsArray->ads_dir) != '' && is_dir('media/images/raovat/' . $checkOneAdsArray->ads_dir) && count($this->file->load('media/images/raovat/' . $checkOneAdsArray->ads_dir, 'index.html')) == 0) {
                            if (file_exists('media/images/raovat/' . $checkOneAdsArray->ads_dir . '/index.html')) {
                                @unlink('media/images/raovat/' . $checkOneAdsArray->ads_dir . '/index.html');
                            }
                            @rmdir('media/images/raovat/' . $checkOneAdsArray->ads_dir);
                        }
                    }
                }
                if (count($idAds) > 0) {
                    $this->load->model('ads_favorite_model');
                    $this->load->model('ads_comment_model');
                    $this->load->model('ads_bad_model');
                    $this->ads_favorite_model->delete($idAds, "adf_ads");
                    $this->ads_comment_model->delete($idAds, "adc_ads");
                    $this->ads_bad_model->delete($idAds, "adb_ads");
                    $this->ads_model->delete($idAds, "ads_id");
                }
                redirect(base_url() . trim(uri_string(), '/'), 'location');
            }
            #END Delete
            $this->load->library('hash');
            #BEGIN: Search & sort
            $where = "ads_user = " . (int)$this->session->userdata('sessionUser');
            $sort = 'ads_id';
            $by = 'DESC';
            $sortUrl = '';
            $pageSort = '';
            $pageUrl = '';
            $keyword = '';
            if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
                $keyword = $this->filter->html($getVar['keyword']);
                switch (strtolower($getVar['search'])) {
                    case 'title':
                        $sortUrl .= '/search/title/keyword/' . $getVar['keyword'];
                        $pageUrl .= '/search/title/keyword/' . $getVar['keyword'];
                        $where .= " AND ads_title LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                        break;
                }
            }
            #If have sort
            if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
                switch (strtolower($getVar['sort'])) {
                    case 'title':
                        $pageUrl .= '/sort/title';
                        $sort = "ads_title";
                        break;
                    case 'category':
                        $pageUrl .= '/sort/category';
                        $sort = "cat_name";
                        break;
                    case 'postdate':
                        $pageUrl .= '/sort/postdate';
                        $sort = "ads_begindate";
                        break;
                    case 'enddate':
                        $pageUrl .= '/sort/enddate';
                        $sort = "ads_enddate";
                        break;
                    default:
                        $pageUrl .= '/sort/id';
                        $sort = "ads_id";
                }
                if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                    $pageUrl .= '/by/desc';
                    $by = "DESC";
                } else {
                    $pageUrl .= '/by/asc';
                    $by = "ASC";
                }
            }
            #If have page
            if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
                $start = (int)$getVar['page'];
                $pageSort .= '/page/' . $start;
            } else {
                $start = 0;
            }
            #END Search & sort
            #Keyword
            $data['keyword'] = $keyword;
            #BEGIN: Create link sort

            $data['sortUrl'] = base_url() . 'account/raovat' . $sortUrl . '/sort/';
            $data['pageSort'] = $pageSort;
            #END Create link sort
            #BEGIN: Status
            $statusUrl = $pageUrl . $pageSort;
            $data['statusUrl'] = base_url() . 'account/raovat' . $statusUrl;
            if ($getVar['status'] != FALSE && trim($getVar['status']) != '' && $getVar['id'] != FALSE && (int)$getVar['id'] > 0) {
                switch (strtolower($getVar['status'])) {
                    case 'active':
                        $this->ads_model->update(array('ads_status' => 1), "ads_id = " . (int)$getVar['id'] . " AND ads_user = " . (int)$this->session->userdata('sessionUser'));
                        break;
                    case 'deactive':
                        $this->ads_model->update(array('ads_status' => 0), "ads_id = " . (int)$getVar['id'] . " AND ads_user = " . (int)$this->session->userdata('sessionUser'));
                        break;
                }
                redirect($data['statusUrl'], 'location');
            }
            #END Status
            #BEGIN: Pagination
            $this->load->library('pagination');
            #Count total record
            $totalRecord = count($this->ads_model->fetch_join("ads_id", "LEFT", "tbtt_ads_category", "tbtt_ads.ads_category = tbtt_ads_category.cat_id", "", "", "", "", "", "", $where, "", ""));
            $config['base_url'] = base_url() . 'account/raovat' . $pageUrl . '/page/';
            $config['total_rows'] = $totalRecord;
            $config['per_page'] = settingOtherAccount;
            $config['num_links'] = 1;
            $config['uri_segment'] = 4;
            $config['cur_page'] = $start;
            $this->pagination->initialize($config);
            $data['linkPage'] = $this->pagination->create_links();
            #END Pagination
            #sTT - So thu tu
            $data['sTT'] = $start + 1;
            #Fetch record
            $select = "ads_id, ads_category, ads_title, ads_descr, ads_begindate, ads_enddate, ads_status, ads_view, cat_name";
            $limit = settingOtherAccount;

            $data['ads'] = $this->ads_model->fetch_join($select, "LEFT", "tbtt_ads_category", "tbtt_ads.ads_category = tbtt_ads_category.cat_id", "", "", "", "", "", "", $where, $sort, $by, $start, $limit);
            #Load view
            $this->load->view('home/account/raovat/defaults', $data);
        }
    }

    function hoidap()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu 1
        $data['menuSelected'] = 'hoidap';
        $data['menuType'] = 'account';
        #END Menu 1
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar       
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
        $action = array('edit', 'search', 'keyword', 'sort', 'by', 'status', 'id', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        $this->load->library('hash');
        #BEGIN: Search & sort
        $where = "hds_user = " . (int)$this->session->userdata('sessionUser');

        $get_vategory_search = $this->uri->segment(7);
        if ($get_vategory_search != "") {
            $where .= " AND hds_category = " . (int)$get_vategory_search;
        }
        $sort = 'hds_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageSort = '';
        $pageUrl = '';
        $keyword = '';
        if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
            $keyword = $this->filter->html($getVar['keyword']);
            switch (strtolower($getVar['search'])) {
                case 'title':
                    $sortUrl .= '/search/title/keyword/' . $getVar['keyword'];
                    $pageUrl .= '/search/title/keyword/' . $getVar['keyword'];
                    $where .= " AND hds_title LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                    break;
            }
        }
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'title':
                    $pageUrl .= '/sort/title';
                    $sort = "hds_title";
                    break;
                case 'category':
                    $pageUrl .= '/sort/category';
                    $sort = "cat_name";
                    break;
                case 'postdate':
                    $pageUrl .= '/sort/postdate';
                    $sort = "up_date";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "hds_id";
            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #Keyword
        $data['keyword'] = $keyword;
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/hoidap' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Status
        $statusUrl = $pageUrl . $pageSort;
        $data['statusUrl'] = base_url() . 'account/hoidap' . $statusUrl;
        if ($getVar['status'] != FALSE && trim($getVar['status']) != '' && $getVar['id'] != FALSE && (int)$getVar['id'] > 0) {
            switch (strtolower($getVar['status'])) {
                case 'active':
                    $this->ads_model->update(array('ads_status' => 1), "ads_id = " . (int)$getVar['id'] . " AND ads_user = " . (int)$this->session->userdata('sessionUser'));
                    break;
                case 'deactive':
                    $this->ads_model->update(array('ads_status' => 0), "ads_id = " . (int)$getVar['id'] . " AND ads_user = " . (int)$this->session->userdata('sessionUser'));
                    break;
            }
            redirect($data['statusUrl'], 'location');
        }
        #END Status
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $this->load->model('hds_model');
        $totalRecord = count($this->hds_model->fetch_join("*, cat_name,avatar,use_fullname,use_id,use_username,use_email,use_sex,use_phone,use_yahoo,use_skype,up_date", "LEFT", "tbtt_hd_category", "tbtt_hds.hds_category = tbtt_hd_category.cat_id", "LEFT", "tbtt_user", "tbtt_user.use_id = tbtt_hds.hds_user", "", "", "", $where, $sort, $by, $start, $limit));
        $config['base_url'] = base_url() . 'account/hoidap' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $data['sTT'] = $start + 1;
        #Fetch record
        $select = "hds_id, hds_title, hds_content, hds_category, hds_user, hds_username, hds_email, hds_yahoo, cat_name,hds_user";
        $limit = settingOtherAccount;

        $data['ads'] = $this->hds_model->fetch_join("*, cat_name,avatar,use_fullname,use_id,use_username,use_email,use_sex,use_phone,use_yahoo,use_skype,up_date", "LEFT", "tbtt_hd_category", "tbtt_hds.hds_category = tbtt_hd_category.cat_id", "LEFT", "tbtt_user", "tbtt_user.use_id = tbtt_hds.hds_user", "", "", "", $where, $sort, $by, $start, $limit);
        #Load view
        $retArrayDrop = $this->loadCategoryDropDownList();
        $data['DropDowlistCategory'] = $retArrayDrop;
        $this->load->view('home/account/hoidap/defaults', $data);
    }

    function theodoihoidap()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu 1
        $data['menuSelected'] = 'hoidap';
        $data['menuType'] = 'account';
        #END Menu 1
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar       
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
        $action = array('edit', 'search', 'keyword', 'sort', 'by', 'status', 'id', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        $this->load->library('hash');
        $where = "hds_theo_doi like '%," . $this->session->userdata('sessionUser') . ",%'";
        $get_vategory_search = $this->uri->segment(7);
        if ($get_vategory_search != "") {
            $where .= " AND hds_category = " . (int)$get_vategory_search;
        }
        $sort = 'hds_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageSort = '';
        $pageUrl = '';
        $keyword = '';
        if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
            $keyword = $this->filter->html($getVar['keyword']);
            switch (strtolower($getVar['search'])) {
                case 'title':
                    $sortUrl .= '/search/title/keyword/' . $getVar['keyword'];
                    $pageUrl .= '/search/title/keyword/' . $getVar['keyword'];
                    $where .= " AND hds_title LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                    break;
            }
        }
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'title':
                    $pageUrl .= '/sort/title';
                    $sort = "hds_title";
                    break;
                case 'category':
                    $pageUrl .= '/sort/category';
                    $sort = "cat_name";
                    break;
                case 'postdate':
                    $pageUrl .= '/sort/postdate';
                    $sort = "up_date";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "hds_id";
            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;


        }
        #END Search & sort
        #Keyword
        $data['keyword'] = $keyword;
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/theodoihoidap' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Status
        $statusUrl = $pageUrl . $pageSort;
        $data['statusUrl'] = base_url() . 'account/theodoihoidap' . $statusUrl;

        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $this->load->model('hds_model');
        $totalRecord = count($this->hds_model->fetch_join("*, cat_name,avatar,use_fullname,use_id,use_username,use_email,use_sex,use_phone,use_yahoo,use_skype,up_date", "LEFT", "tbtt_hd_category", "tbtt_hds.hds_category = tbtt_hd_category.cat_id", "LEFT", "tbtt_user", "tbtt_user.use_id = tbtt_hds.hds_user", "", "", "", $where, $sort, $by, $start, $limit));
        $config['base_url'] = base_url() . 'account/theodoihoidap' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $data['sTT'] = $start + 1;
        #Fetch record
        $select = "hds_id, hds_title, hds_content, hds_category, hds_user, hds_username, hds_email, hds_yahoo, cat_name,hds_user";
        $limit = settingOtherAccount;

        $data['ads'] = $this->hds_model->fetch_join("*, cat_name,avatar,use_fullname,use_id,use_username,use_email,use_sex,use_phone,use_yahoo,use_skype,up_date", "LEFT", "tbtt_hd_category", "tbtt_hds.hds_category = tbtt_hd_category.cat_id", "LEFT", "tbtt_user", "tbtt_user.use_id = tbtt_hds.hds_user", "", "", "", $where, $sort, $by, $start, $limit);
        #Load view
        $retArrayDrop = $this->loadCategoryDropDownListTheoDoi();
        $data['DropDowlistCategory'] = $retArrayDrop;
        $this->load->view('home/account/hoidap/theodoi', $data);
    }

    function loadCategoryDropDownListTheoDoi()
    {
        $retArray = '';
        $where = "hds_theo_doi like '%," . $this->session->userdata('sessionUser') . ",%'";
        $category = $this->hds_model->fetch_join("cat_name ,cat_id ", "LEFT", "tbtt_hd_category", "tbtt_hds.hds_category = tbtt_hd_category.cat_id", "LEFT", "tbtt_user", "tbtt_user.use_id = tbtt_hds.hds_user", "", "", "", $where, "", "", "", "", true);
        $totalTatCa = count($this->hds_model->fetch_join("cat_name ,cat_id ", "LEFT", "tbtt_hd_category", "tbtt_hds.hds_category = tbtt_hd_category.cat_id", "LEFT", "tbtt_user", "tbtt_user.use_id = tbtt_hds.hds_user", "", "", "", $where));

        if (count($category) > 0) {
            $retArray .= " <select name='select' id='CategoryView'>";
            $retArray .= "<option value='tatca' onclick='ActionSort(\"" . base_url() . "account/theodoihoidap\")' >--Tất cả (" . $totalTatCa . ")--</option>";
            foreach ($category as $key => $row) {
                $retArray .= "<option value='" . $row->cat_id . "'  onclick='ActionSort(\"" . base_url() . "account/theodoihoidap/sort/title/by/asc/" . $row->cat_id . "\")' >" . $row->cat_name . "(" . count($this->hds_model->fetch_join("cat_name ,cat_id ", "LEFT", "tbtt_hd_category", "tbtt_hds.hds_category = tbtt_hd_category.cat_id", "LEFT", "tbtt_user", "tbtt_user.use_id = tbtt_hds.hds_user", "cat_order", "DESC", "", "hds_theo_doi like '%," . $this->session->userdata('sessionUser') . ",%' AND cat_id=" . (int)$row->cat_id)) . ")</option>";
            }
            $retArray .= "</select>";
        }
        return $retArray;
    }

    function loadCategoryDropDownList()
    {
        $retArray = '';
        $where = "hds_user = " . (int)$this->session->userdata('sessionUser');
        $category = $this->hds_model->fetch_join("cat_name ,cat_id ", "LEFT", "tbtt_hd_category", "tbtt_hds.hds_category = tbtt_hd_category.cat_id", "LEFT", "tbtt_user", "tbtt_user.use_id = tbtt_hds.hds_user", "", "", "", $where, "", "", "", "", true);
        $totalTatCa = count($this->hds_model->fetch_join("cat_name ,cat_id ", "LEFT", "tbtt_hd_category", "tbtt_hds.hds_category = tbtt_hd_category.cat_id", "LEFT", "tbtt_user", "tbtt_user.use_id = tbtt_hds.hds_user", "", "", "", $where));

        if (count($category) > 0) {
            $retArray .= " <select name='select' id='CategoryView'>";
            $retArray .= "<option value='tatca' onclick='ActionSort(\"" . base_url() . "account/hoidap\")' >--Tất cả (" . $totalTatCa . ")--</option>";
            foreach ($category as $key => $row) {
                $retArray .= "<option value='" . $row->cat_id . "'  onclick='ActionSort(\"" . base_url() . "account/hoidap/sort/title/by/asc/" . $row->cat_id . "\")' >" . $row->cat_name . "(" . count($this->hds_model->fetch_join("cat_name ,cat_id ", "LEFT", "tbtt_hd_category", "tbtt_hds.hds_category = tbtt_hd_category.cat_id", "LEFT", "tbtt_user", "tbtt_user.use_id = tbtt_hds.hds_user", "cat_order", "DESC", "", "hds_user = " . (int)$this->session->userdata('sessionUser') . " AND cat_id=" . (int)$row->cat_id)) . ")</option>";
            }
            $retArray .= "</select>";
        }
        return $retArray;
    }

    function loadCategoryDropDownLisTraLoi()
    {
        $retArray = '';
        $where = "answers_user = " . (int)$this->session->userdata('sessionUser');

        $category = $this->hds_model->fetch_join("cat_name ,cat_id", "LEFT", "tbtt_hd_category", "tbtt_hds.hds_category = tbtt_hd_category.cat_id", "LEFT", "tbtt_user", "tbtt_user.use_id = tbtt_hds.hds_user", "RIGHT", "tbtt_answers", "tbtt_answers.hds_id = tbtt_hds.hds_id", $where, "answers_id", "", "", "", true);
        $totalTatCa = count($this->hds_model->fetch_join("cat_name ,cat_id", "LEFT", "tbtt_hd_category", "tbtt_hds.hds_category = tbtt_hd_category.cat_id", "LEFT", "tbtt_user", "tbtt_user.use_id = tbtt_hds.hds_user", "RIGHT", "tbtt_answers", "tbtt_answers.hds_id = tbtt_hds.hds_id", $where, "answers_id"));

        if (count($category) > 0) {
            $retArray .= " <select name='select' id='CategoryView'>";
            $retArray .= "<option value='tatca' onclick='ActionSort(\"" . base_url() . "account/traloi\")' >--Tất cả (" . $totalTatCa . ")--</option>";
            foreach ($category as $key => $row) {
                $retArray .= "<option value='" . $row->cat_id . "'  onclick='ActionSort(\"" . base_url() . "account/traloi/danhmuc/" . $row->cat_id . "\")' >" . $row->cat_name . "(" . count($this->hds_model->fetch_join("cat_name ,cat_id", "LEFT", "tbtt_hd_category", "tbtt_hds.hds_category = tbtt_hd_category.cat_id", "LEFT", "tbtt_user", "tbtt_user.use_id = tbtt_hds.hds_user", "RIGHT", "tbtt_answers", "tbtt_answers.hds_id = tbtt_hds.hds_id", "answers_user = " . (int)$this->session->userdata('sessionUser') . " AND cat_id=" . (int)$row->cat_id, "answers_id", "DESC")) . ")</option>";
            }
            $retArray .= "</select>";
        }
        return $retArray;
    }

    // danh sach tra loi
    function traloi()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu 1
        $data['menuSelected'] = 'hoidap';
        $data['menuType'] = 'account';
        #END Menu 1
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar
        if ($this->uri->segment(3) == "delete") {
            $this->load->model('answers_model');
            $this->answers_model->delete($this->uri->segment(4), "answers_id");
            redirect('account/traloi', 'location');

        }
        if ($this->uri->segment(3) == "edit") {
            $this->load->model('answers_model');
            $hds_answers = $this->answers_model->get("*", "answers_id = " . (int)$this->uri->segment(4));
            $data['answers_content'] = $hds_answers->answers_content;
            $this->load->model('hds_model');
            $hds_title = $this->hds_model->get("*", "hds_id = " . (int)$this->uri->segment(5));
            $data['hds_title'] = $hds_title->hds_title;

            $aCaptcha = $this->createCaptcha(md5(microtime()) . '.' . (int)$this->session->userdata('sessionUser') . 'posa.jpg');
            if(!empty($aCaptcha)) {
                $data['captcha']                = $aCaptcha['captcha']; 
                $data['imageCaptchaPostHds']    = $aCaptcha['imageCaptchaContact'];

                $this->session->set_userdata('sessionCaptchaPostHds', $aCaptcha['captcha']);
                $this->session->set_userdata('sessionPathCaptchaPostHds', $aCaptcha['imageCaptchaContact']); 
            }

            $data['successPostHds'] = "";
            if ($this->input->post('isPostHds') == "1") {
                $this->answers_model->update(array('answers_content' => trim($this->filter->injection_html($this->input->post('txtContent')))), "answers_id = " . (int)$this->uri->segment(4));
                $data['successPostHds'] = "1";
            }
            $this->load->view('home/account/hoidap/edit_traloi', $data);
        } else {
            $data['successEditShopAccount'] = false;
            #BEGIN: Get shop
            $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
            $data['shopid'] = $shop->sho_id;
            $action = array('edit', 'search', 'keyword', 'sort', 'by', 'status', 'id', 'page');
            $getVar = $this->uri->uri_to_assoc(3, $action);
            $this->load->library('hash');
            #BEGIN: Search & sort
            $where = "answers_user = " . (int)$this->session->userdata('sessionUser');
            $get_vategory_search = $this->uri->segment(4);

            if ($get_vategory_search != "" && $this->uri->segment(3) == "danhmuc") {
                $where .= " AND hds_category = " . (int)$get_vategory_search;
            }
            $sort = 'answers_id';
            $by = 'DESC';
            $sortUrl = '';
            $pageSort = '';
            $pageUrl = '';
            $keyword = '';
            if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
                $keyword = $this->filter->html($getVar['keyword']);
                switch (strtolower($getVar['search'])) {
                    case 'title':
                        $sortUrl .= '/search/title/keyword/' . $getVar['keyword'];
                        $pageUrl .= '/search/title/keyword/' . $getVar['keyword'];
                        $where .= " AND answers_content LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                        break;
                }
            }
            #If have sort
            if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
                switch (strtolower($getVar['sort'])) {
                    case 'title':
                        $pageUrl .= '/sort/title';
                        $sort = "hds_title";
                        break;
                    case 'category':
                        $pageUrl .= '/sort/category';
                        $sort = "cat_name";
                        break;
                    case 'postdate':
                        $pageUrl .= '/sort/postdate';
                        $sort = "tbtt_answers.up_date";
                        break;
                    default:
                        $pageUrl .= '/sort/id';
                        $sort = "hds_id";
                }
                if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                    $pageUrl .= '/by/desc';
                    $by = "DESC";
                } else {
                    $pageUrl .= '/by/asc';
                    $by = "ASC";
                }
            }
            #If have page
            if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
                $start = (int)$getVar['page'];
                $pageSort .= '/page/' . $start;
            } else {
                $start = 0;
            }
            #END Search & sort
            #Keyword
            $data['keyword'] = $keyword;
            #BEGIN: Create link sort
            $data['sortUrl'] = base_url() . 'account/traloi' . $sortUrl . '/sort/';
            $data['pageSort'] = $pageSort;
            #END Create link sort
            #BEGIN: Status
            $statusUrl = $pageUrl . $pageSort;
            $data['statusUrl'] = base_url() . 'account/hoidap' . $statusUrl;
            if ($getVar['status'] != FALSE && trim($getVar['status']) != '' && $getVar['id'] != FALSE && (int)$getVar['id'] > 0) {
                switch (strtolower($getVar['status'])) {
                    case 'active':
                        $this->ads_model->update(array('ads_status' => 1), "ads_id = " . (int)$getVar['id'] . " AND ads_user = " . (int)$this->session->userdata('sessionUser'));
                        break;
                    case 'deactive':
                        $this->ads_model->update(array('ads_status' => 0), "ads_id = " . (int)$getVar['id'] . " AND ads_user = " . (int)$this->session->userdata('sessionUser'));
                        break;
                }
                redirect($data['statusUrl'], 'location');
            }
            #END Status
            #BEGIN: Pagination
            $this->load->library('pagination');
            #Count total record
            $this->load->model('hds_model');
            $totalRecord = count($this->hds_model->fetch_join("*,tbtt_user.use_username", "LEFT", "tbtt_hd_category", "tbtt_hds.hds_category = tbtt_hd_category.cat_id", "LEFT", "tbtt_user", "tbtt_user.use_id = tbtt_hds.hds_user", "RIGHT", "tbtt_answers", "tbtt_answers.hds_id = tbtt_hds.hds_id", $where, $sort, $by, $start, $limit));
            $config['base_url'] = base_url() . 'account/traloi' . $pageUrl . '/page/';
            $config['total_rows'] = $totalRecord;
            $config['per_page'] = settingOtherAccount;
            $config['num_links'] = 1;
            $config['uri_segment'] = 4;
            $config['cur_page'] = $start;
            $this->pagination->initialize($config);
            $data['linkPage'] = $this->pagination->create_links();
            #END Pagination
            #sTT - So thu tu
            $data['sTT'] = $start + 1;
            #Fetch record
            $select = "hds_id, hds_title, hds_content, hds_category, hds_user, hds_username, hds_email, hds_yahoo, cat_name,hds_user";
            $limit = settingOtherAccount;

            $data['ads'] = $this->hds_model->fetch_join("*,tbtt_user.use_username", "LEFT", "tbtt_hd_category", "tbtt_hds.hds_category = tbtt_hd_category.cat_id", "LEFT", "tbtt_user", "tbtt_user.use_id = tbtt_hds.hds_user", "RIGHT", "tbtt_answers", "tbtt_answers.hds_id = tbtt_hds.hds_id", $where, $sort, $by, $start, $limit);
            #Load view
            $retArrayDrop = $this->loadCategoryDropDownLisTraLoi();
            $data['DropDowlistCategory'] = $retArrayDrop;
            $this->load->view('home/account/hoidap/traloi', $data);

        }
    }

    function traloi_edit()
    {
        #BEGIN: CHECK LOGIN
        if (!$this->check->is_logined($this->session->userdata('sessionUser'), $this->session->userdata('sessionGroup'), 'home')) {
            redirect(base_url() . 'login', 'location');
            die();
        }
        #END CHECK LOGIN
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Advertise

        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #BEGIN: Unlink captcha
        $this->load->helper('unlink');
        unlink_captcha($this->session->flashdata('sessionPathCaptchaPostHds'));
        #END Unlink captcha
        if ($this->session->flashdata('sessionSuccessPostHds')) {
            $data['successPostHds'] = true;
        } else {

        }
        #BEGIN: Create captcha post ads

        $aCaptcha = $this->createCaptcha(md5(microtime()) . '.' . (int)$this->session->userdata('sessionUser') . 'posa.jpg');
        if(!empty($aCaptcha)) {
            $data['captcha']                = $aCaptcha['captcha']; 
            $data['imageCaptchaPostHds']    = $aCaptcha['imageCaptchaContact'];

            $this->session->set_userdata('sessionCaptchaPostHds', $aCaptcha['captcha']);
            $this->session->set_userdata('sessionPathCaptchaPostHds', $aCaptcha['imageCaptchaContact']); 
        }

        #END Create captcha post ads
        #Load view
        $data['menuType'] = 'account';
        $this->load->view('home/accounthoidap/edit_traloi', $data);
    }

    function job()
    {
        $this->load->model('job_model');
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu 1
        $data['menuSelected'] = 'job';
        $data['menuType'] = 'account';
        #END Menu 1
        #BEGIN: Advertise        
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar
        $action = array('edit', 'search', 'keyword', 'sort', 'by', 'status', 'id', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        if (strtolower($this->uri->segment(3)) == 'edit' && $getVar['edit'] != FALSE) {
            $job = $this->job_model->get("*", "job_id = " . (int)$getVar['edit']);
            if (count($job) != 1 || !$this->check->is_id($getVar['edit'])) {
                redirect(base_url() . 'account/job', 'location');
                die();
            }
            #BEGIN: Unlink captcha
            $this->load->helper('unlink');
            unlink_captcha($this->session->flashdata('sessionPathCaptchaEditJobAccount'));
            #END Unlink captcha
            if ($this->session->flashdata('sessionSuccessEditJobAccount')) {
                $data['successEditJobAccount'] = true;
            } else {
                $this->load->library('form_validation');
                $data['successEditJobAccount'] = false;
                #BEGIN: Province

                $data['province'] = $this->province_model->fetch("pre_id, pre_name", "pre_status = 1", "pre_order", "ASC");
                #END Province
                #BEGIN: Field
                $this->load->model('field_model');
                $data['field'] = $this->field_model->fetch("fie_id, fie_name", "fie_status = 1", "fie_order", "ASC");
                #END Field
                if ($this->input->post('captcha_job') && time() - (int)$this->session->userdata('sessionTimePosted') <= (int)settingTimePost) {
                    redirect(base_url() . 'account/job/edit/' . $getVar['edit'], 'location');
                    die();
                }
                #BEGIN: Set rules
                $this->form_validation->set_rules('title_job', 'lang:title_job_label_job_edit', 'trim|required');
                if ($this->input->post('isPostProduct')) {
                    if ($this->input->post('time_job') == '1') {
                        $time_job = "Bán thời gian";
                    } elseif ($this->input->post('time_job') == '2') {
                        $time_job = "Toàn thời gian";
                    } elseif ($this->input->post('time_job') == '3') {
                        $time_job = "Hành chính";
                    } elseif ($this->input->post('time_job') == '4') {
                        $time_job = "Buổi sáng";
                    } elseif ($this->input->post('time_job') == '5') {
                        $time_job = "Buổi trưa";
                    } elseif ($this->input->post('time_job') == '5') {
                        $time_job = "Buổi tối";
                    } else {
                        $time_job = "Thời gian khác";
                    }
                    if (strtoupper($this->input->post('currency_job')) == 'USD') {
                        $salary_job = (int)$this->input->post('salary_job') . '|USD/';

                    } else {
                        $salary_job = (int)$this->input->post('salary_job') . '|VND/';
                    }
                    if ($this->input->post('datesalary_job') == '3') {
                        $datesalary_job = $this->lang->line('year_post');
                    } elseif ($this->input->post('datesalary_job') == '1') {
                        $datesalary_job = $this->lang->line('day_post');
                    } else {
                        $datesalary_job = $this->lang->line('month_post');
                    }
                    if ($this->input->post('datetry_job') == '3') {
                        $try_job = $this->lang->line('year_post');
                    } elseif ($this->input->post('datetry_job') == '1') {
                        $try_job = $this->lang->line('day_post');
                    } else {
                        $try_job = $this->lang->line('month_post');
                    }
                    $try_job = (int)$this->input->post('try_job') . ' ' . $try_job;
                    if ($this->input->post('bestcontact_job') == '1') {
                        $bestcontact_job = $this->lang->line('best_contact_1_contact_post');
                    } elseif ($this->input->post('bestcontact_job') == '2') {
                        $bestcontact_job = $this->lang->line('best_contact_2_contact_post');
                    } elseif ($this->input->post('bestcontact_job') == '3') {
                        $bestcontact_job = $this->lang->line('best_contact_3_contact_post');
                    } elseif ($this->input->post('bestcontact_job') == '4') {
                        $bestcontact_job = $this->lang->line('best_contact_4_contact_post');
                    } else {
                        $bestcontact_job = $this->lang->line('best_contact_5_contact_post');
                    }
                    if ($this->input->post('yeu_cau_trinh_Do') != "0") {
                        $temp_trinhdo = $this->input->post('yeu_cau_trinh_Do');
                    } else {
                        $temp_trinhdo = $this->input->post('level_job');
                    }

                    $temp_cach_lien_he = "";
                    if ($this->input->post('checkbox_lienhetructiep') == "on") {
                        $temp_cach_lien_he .= "Trực tiếp";
                    }
                    if ($this->input->post('checkbox_lienhedienthoai') == "on") {
                        if (isset($temp_cach_lien_he)) {
                            $temp_cach_lien_he .= "-";
                        }
                        $temp_cach_lien_he .= "Gọi điện thoại";
                    }
                    if ($this->input->post('checkbox_Email') == "on") {
                        if (isset($temp_cach_lien_he)) {
                            $temp_cach_lien_he .= "-";
                        }
                        $temp_cach_lien_he .= "Gửi Email";
                    }

                    if ($this->input->post('checkbox_Chatyahoo_sype') == "on") {
                        if (isset($temp_cach_lien_he)) {
                            $temp_cach_lien_he .= "-";
                        }
                        $temp_cach_lien_he .= "Chat Yahoo,Skype";
                    }
                    if ($this->input->post('checkbox_website') == "on") {
                        if (isset($temp_cach_lien_he)) {
                            $temp_cach_lien_he .= "-";
                        }
                        $temp_cach_lien_he .= "Qua website";
                    }


                    $dataEdit = array(
                        'job_title' => trim($this->filter->injection_html($this->input->post('title_job'))),
                        'job_field' => (int)$this->input->post('field_job'),
                        'job_position' => trim($this->filter->injection_html($this->input->post('position_job'))),
                        'job_level' => $temp_trinhdo,
                        'job_foreign_language' => trim($this->filter->injection_html($this->input->post('foreign_language_job'))),
                        'job_computer' => trim($this->filter->injection_html($this->input->post('computer_job'))),
                        'job_age' => (int)$this->input->post('age1_job') . '-' . (int)$this->input->post('age2_job'),
                        'job_sex' => (int)$this->input->post('sex_job'),
                        'job_require' => trim($this->filter->injection_html($this->input->post('require_job'))),
                        'job_exper' => (int)$this->input->post('experience_job'),
                        'job_province' => (int)$this->input->post('province_job'),
                        'job_time_job' => $this->filter->injection($time_job),
                        'job_salary' => $this->filter->injection($salary_job . $datesalary_job),
                        'job_timetry' => $this->filter->injection($try_job),
                        'job_interest' => trim($this->filter->injection_html($this->input->post('interest_job'))),
                        'job_quantity' => (int)$this->input->post('quantity_job'),
                        'job_record' => trim($this->filter->injection_html($this->input->post('record_job'))),
                        'job_time_surrend' => mktime(0, 0, 0, (int)$this->input->post('month_job'), (int)$this->input->post('day_job'), (int)$this->input->post('year_job')),
                        'job_detail' => trim($this->filter->injection_html(str_replace("&curren;", "#", $this->input->post('txtContent')))),
                        'job_jober' => trim($this->filter->injection_html($this->input->post('name_job'))),
                        'job_address' => trim($this->filter->injection_html($this->input->post('address_job'))),
                        'job_phone' => trim($this->filter->injection_html($this->input->post('phone_job'))),
                        'job_mobile' => trim($this->filter->injection_html($this->input->post('mobile_job'))),
                        'job_email' => trim($this->filter->injection_html($this->input->post('email_job'))),
                        'job_website' => trim($this->filter->injection_html($this->filter->link($this->input->post('website_job')))),
                        'job_name_contact' => trim($this->filter->injection_html($this->input->post('namecontact_job'))),
                        'job_address_contact' => trim($this->filter->injection_html($this->input->post('addresscontact_job'))),
                        'job_phone_contact' => trim($this->filter->injection_html($this->input->post('phonecontact_job'))),
                        'job_mobile_contact' => trim($this->filter->injection_html($this->input->post('mobilecontact_job'))),
                        'job_email_contact' => trim($this->filter->injection_html($this->input->post('emailcontact_job'))),
                        'job_yahoo' => trim($this->filter->injection_html($this->input->post('yahoo_job'))),
                        'job_skype' => trim($this->filter->injection_html($this->input->post('skype_job'))),
                        'job_best_contact' => $temp_cach_lien_he,
                        'job_nganhnghe_dien' => trim($this->filter->injection_html($this->input->post('nganhnghe_dien'))),
                        'job_gioithieu_nhatuyendung' => trim($this->filter->injection_html($this->input->post('gioi_thieu_nha_tuyen_dung'))),
                        'job_fax_nhatuyendung' => trim($this->filter->injection_html($this->input->post('fax_job_nha_tuyen_dung'))),
                        'job_enddate' => mktime(0, 0, 0, (int)$this->input->post('endmonth_job'), (int)$this->input->post('endday_job'), (int)$this->input->post('endyear_job'))
                    );
                    if ($this->job_model->update($dataEdit, "job_id = " . $job->job_id)) {
                        $this->session->set_flashdata('sessionSuccessEditJobAccount', 1);

                    }

                    $this->session->set_userdata('sessionTimePosted', time());
                    redirect(base_url() . trim(uri_string(), '/'), 'location');
                } else {
                    $data['title_job'] = $job->job_title;
                    $data['field_job'] = $job->job_field;
                    $data['position_job'] = $job->job_position;
                    $data['level_job'] = $job->job_level;
                    $data['foreign_language_job'] = $job->job_foreign_language;
                    $data['computer_job'] = $job->job_computer;
                    $ageJob = explode('-', $job->job_age);
                    $data['age1_job'] = $ageJob[0];
                    $data['age2_job'] = array_pop($ageJob);
                    $data['sex_job'] = $job->job_sex;
                    $data['require_job'] = $job->job_require;
                    $data['experience_job'] = $job->job_exper;
                    $data['province_job'] = $job->job_province;
                    $data['job_exper'] = $job->job_exper;
                    if ($job->job_time_job == $this->lang->line('time_job_1_job_edit')) {
                        $data['time_job'] = 1;
                    } elseif ($job->job_time_job == $this->lang->line('time_job_2_job_edit')) {
                        $data['time_job'] = 2;
                    } elseif ($job->job_time_job == $this->lang->line('time_job_3_job_edit')) {
                        $data['time_job'] = 3;
                    } elseif ($job->job_time_job == $this->lang->line('time_job_4_job_edit')) {
                        $data['time_job'] = 4;
                    } else {
                        $data['time_job'] = 5;
                    }
                    $salaryJob = explode('|', $job->job_salary);
                    $data['salary_job'] = $salaryJob[0];
                    $salaryJob = explode('/', array_pop($salaryJob));
                    $data['currency_job'] = $salaryJob[0];
                    $salaryJob = array_pop($salaryJob);
                    if ($salaryJob == $this->lang->line('day_job_edit')) {
                        $data['datesalary_job'] = 1;
                    } elseif ($salaryJob == $this->lang->line('year_job_edit')) {
                        $data['datesalary_job'] = 3;
                    } else {
                        $data['datesalary_job'] = 2;
                    }
                    $timeTryJob = explode(' ', $job->job_timetry);
                    $data['try_job'] = $timeTryJob[0];
                    $timeTryJob = array_pop($timeTryJob);
                    if ($timeTryJob == $this->lang->line('day_job_edit')) {
                        $data['datetry_job'] = 1;
                    } elseif ($timeTryJob == $this->lang->line('year_job_edit')) {
                        $data['datetry_job'] = 3;
                    } else {
                        $data['datetry_job'] = 2;
                    }
                    $data['interest_job'] = $job->job_interest;
                    $data['quantity_job'] = $job->job_quantity;
                    $data['record_job'] = $job->job_record;
                    $data['day_job'] = date('d', $job->job_time_surrend);
                    $data['month_job'] = date('m', $job->job_time_surrend);
                    $data['year_job'] = date('Y', $job->job_time_surrend);
                    $data['txtContent'] = $job->job_detail;
                    $data['name_job'] = $job->job_jober;
                    $data['address_job'] = $job->job_address;
                    $data['phone_job'] = $job->job_phone;
                    $data['mobile_job'] = $job->job_mobile;
                    $data['email_job'] = $job->job_email;
                    $data['website_job'] = $job->job_website;
                    $data['namecontact_job'] = $job->job_name_contact;
                    $data['addresscontact_job'] = $job->job_address_contact;
                    $data['phonecontact_job'] = $job->job_phone_contact;
                    $data['mobilecontact_job'] = $job->job_mobile_contact;
                    $data['emailcontact_job'] = $job->job_email_contact;
                    $data['yahoo_job'] = $job->job_yahoo;
                    $data['skype_job'] = $job->job_skype;
                    $data['job_nganhnghe_dien'] = $job->job_nganhnghe_dien;
                    $data['job_detail'] = $job->job_detail;
                    $data['job_gioithieu_nhatuyendung'] = $job->job_gioithieu_nhatuyendung;
                    $data['job_fax_nhatuyendung'] = $job->job_fax_nhatuyendung;
                    if ($job->job_best_contact == $this->lang->line('best_contact_1_contact_job_edit')) {
                        $data['bestcontact_job'] = 1;
                    } elseif ($job->job_best_contact == $this->lang->line('best_contact_2_contact_job_edit')) {
                        $data['bestcontact_job'] = 2;
                    } elseif ($job->job_best_contact == $this->lang->line('best_contact_3_contact_job_edit')) {
                        $data['bestcontact_job'] = 3;
                    } elseif ($job->job_best_contact == $this->lang->line('best_contact_4_contact_job_edit')) {
                        $data['bestcontact_job'] = 4;
                    } else {
                        $data['bestcontact_job'] = 5;
                    }
                    $data['endday_job'] = date('d', $job->job_enddate);
                    $data['endmonth_job'] = date('m', $job->job_enddate);
                    $data['endyear_job'] = date('Y', $job->job_enddate);
                }
                #BEGIN: Create captcha post job

                $aCaptcha = $this->createCaptcha(md5(microtime()) . '.' . (int)$this->session->userdata('sessionUser') . 'edij.jpg');
                if(!empty($aCaptcha)) {
                    $data['captcha']                = $aCaptcha['captcha']; 
                    $data['imageCaptchaEditJobAccount']    = $aCaptcha['imageCaptchaContact'];

                    $this->session->set_userdata('sessionCaptchaEditJobAccount', $aCaptcha['captcha']);
                    $this->session->set_userdata('sessionPathCaptchaEditJobAccount', $aCaptcha['imageCaptchaContact']); 
                }

                #END Create captcha post job
            }
            #Load view
            //print_r($title_job);die();
            $this->load->view('home/account/job/edit', $data);
        } elseif (strtolower($this->uri->segment(3)) == 'favorite') {
            $this->load->model('job_favorite_model');
            #BEGIN: Menu 2
            $data['menuSelected'] = 'favorite_job';
            #END Menu 2
            #BEGIN: Delete
            if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
                $this->job_favorite_model->delete($this->input->post('checkone'), "jof_id", (int)$this->session->userdata('sessionUser'), "jof_user");
                redirect(base_url() . trim(uri_string(), '/'), 'location');
            }
            #END Delete
            #Define url for $getVar
            $action = array('search', 'keyword', 'sort', 'by', 'page');
            $getVar = $this->uri->uri_to_assoc(4, $action);
            #BEGIN: Search & sort
            $where = "jof_user = " . (int)$this->session->userdata('sessionUser');
            $sort = 'jof_id';
            $by = 'DESC';
            $sortUrl = '';
            $pageSort = '';
            $pageUrl = '';
            $keyword = '';
            if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
                $keyword = $this->filter->html($getVar['keyword']);
                switch (strtolower($getVar['search'])) {
                    case 'title':
                        $sortUrl .= '/search/title/keyword/' . $getVar['keyword'];
                        $pageUrl .= '/search/title/keyword/' . $getVar['keyword'];
                        $where .= " AND job_title LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                        break;
                }
            }
            #If have sort
            if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
                switch (strtolower($getVar['sort'])) {
                    case 'title':
                        $pageUrl .= '/sort/title';
                        $sort = "job_title";
                        break;
                    case 'salary':
                        $pageUrl .= '/sort/salary';
                        $sort = "job_salary";
                        break;
                    case 'postdate':
                        $pageUrl .= '/sort/postdate';
                        $sort = "job_begindate";
                        break;
                    case 'date':
                        $pageUrl .= '/sort/date';
                        $sort = "jof_date";
                        break;
                    default:
                        $pageUrl .= '/sort/id';
                        $sort = "jof_id";
                }
                if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                    $pageUrl .= '/by/desc';
                    $by = "DESC";
                } else {
                    $pageUrl .= '/by/asc';
                    $by = "ASC";
                }
            }
            #If have page
            if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
                $start = (int)$getVar['page'];
                $pageSort .= '/page/' . $start;
            } else {
                $start = 0;
            }
            #END Search & sort
            #Keyword
            $data['keyword'] = $keyword;
            #BEGIN: Create link sort
            $data['sortUrl'] = base_url() . 'account/job/favorite' . $sortUrl . '/sort/';
            $data['pageSort'] = $pageSort;
            #END Create link sort
            #BEGIN: Pagination
            $this->load->library('pagination');
            #Count total record
            $totalRecord = count($this->job_favorite_model->fetch_join("jof_id", "LEFT", "tbtt_job", "tbtt_job_favorite.jof_job = tbtt_job.job_id", $where, "", ""));
            $config['base_url'] = base_url() . 'account/job/favorite' . $pageUrl . '/page/';
            $config['total_rows'] = $totalRecord;
            $config['per_page'] = settingOtherAccount;
            $config['num_links'] = 1;
            $config['uri_segment'] = 4;
            $config['cur_page'] = $start;
            $this->pagination->initialize($config);
            $data['linkPage'] = $this->pagination->create_links();
            #END Pagination
            #sTT - So thu tu
            $data['sTT'] = $start + 1;
            #Fetch record
            $select = "jof_id, jof_date, job_id, job_title, job_view, job_field, job_salary, job_begindate";
            $limit = settingOtherAccount;
            $data['favoriteJob'] = $this->job_favorite_model->fetch_join($select, "LEFT", "tbtt_job", "tbtt_job_favorite.jof_job = tbtt_job.job_id", $where, $sort, $by, $start, $limit);
            #Load view
            $this->load->view('home/account/job/favorite', $data);
        } else {
            #BEGIN: Delete
            if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
                $idCheckOneJob = implode(',', $this->input->post('checkone'));
                $checkOneJob = $this->job_model->fetch("job_id", "job_id IN($idCheckOneJob) AND job_user = " . (int)$this->session->userdata('sessionUser'));
                $idJob = array();
                foreach ($checkOneJob as $checkOneJobArray) {
                    $idJob[] = $checkOneJobArray->job_id;
                }
                if (count($idJob) > 0) {
                    $this->load->model('job_favorite_model');
                    $this->load->model('job_bad_model');
                    $this->job_favorite_model->delete($idJob, "jof_job");
                    $this->job_bad_model->delete($idJob, "jba_job");
                    $this->job_model->delete($idJob, "job_id");
                }
                redirect(base_url() . trim(uri_string(), '/'), 'location');
            }
            #END Delete
            $this->load->library('hash');
            #BEGIN: Search & sort
            $where = "job_user = " . (int)$this->session->userdata('sessionUser');
            $sort = 'job_id';
            $by = 'DESC';
            $sortUrl = '';
            $pageSort = '';
            $pageUrl = '';
            $keyword = '';
            if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
                $keyword = $this->filter->html($getVar['keyword']);
                switch (strtolower($getVar['search'])) {
                    case 'title':
                        $sortUrl .= '/search/title/keyword/' . $getVar['keyword'];
                        $pageUrl .= '/search/title/keyword/' . $getVar['keyword'];
                        $where .= " AND job_title LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                        break;
                }
            }
            #If have sort
            if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
                switch (strtolower($getVar['sort'])) {
                    case 'title':
                        $pageUrl .= '/sort/title';
                        $sort = "job_title";
                        break;
                    case 'field':
                        $pageUrl .= '/sort/field';
                        $sort = "fie_name";
                        break;
                    case 'postdate':
                        $pageUrl .= '/sort/postdate';
                        $sort = "job_begindate";
                        break;
                    case 'enddate':
                        $pageUrl .= '/sort/enddate';
                        $sort = "job_enddate";
                        break;
                    default:
                        $pageUrl .= '/sort/id';
                        $sort = "job_id";
                }
                if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                    $pageUrl .= '/by/desc';
                    $by = "DESC";
                } else {
                    $pageUrl .= '/by/asc';
                    $by = "ASC";
                }
            }
            #If have page
            if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
                $start = (int)$getVar['page'];
                $pageSort .= '/page/' . $start;
            } else {
                $start = 0;
            }
            #END Search & sort
            #Keyword
            $data['keyword'] = $keyword;
            #BEGIN: Create link sort
            $data['sortUrl'] = base_url() . 'account/job' . $sortUrl . '/sort/';
            $data['pageSort'] = $pageSort;
            #END Create link sort
            #BEGIN: Status
            $statusUrl = $pageUrl . $pageSort;
            $data['statusUrl'] = base_url() . 'account/job' . $statusUrl;
            if ($getVar['status'] != FALSE && trim($getVar['status']) != '' && $getVar['id'] != FALSE && (int)$getVar['id'] > 0) {
                switch (strtolower($getVar['status'])) {
                    case 'active':
                        $this->job_model->update(array('job_status' => 1), "job_id = " . (int)$getVar['id'] . " AND job_user = " . (int)$this->session->userdata('sessionUser'));
                        break;
                    case 'deactive':
                        $this->job_model->update(array('job_status' => 0), "job_id = " . (int)$getVar['id'] . " AND job_user = " . (int)$this->session->userdata('sessionUser'));
                        break;
                }
                redirect($data['statusUrl'], 'location');
            }
            #END Status
            #BEGIN: Pagination
            $this->load->library('pagination');
            #Count total record
            $totalRecord = count($this->job_model->fetch_join("job_id", "LEFT", "tbtt_field", "tbtt_job.job_field = tbtt_field.fie_id", "", "", "", "", "", "", $where, "", ""));
            $config['base_url'] = base_url() . 'account/job' . $pageUrl . '/page/';
            $config['total_rows'] = $totalRecord;
            $config['per_page'] = settingOtherAccount;
            $config['num_links'] = 1;
            $config['uri_segment'] = 4;
            $config['cur_page'] = $start;
            $this->pagination->initialize($config);
            $data['linkPage'] = $this->pagination->create_links();
            #END Pagination
            #sTT - So thu tu
            $data['sTT'] = $start + 1;
            #Fetch record
            $select = "job_id, job_title, job_field, job_view, job_begindate, job_enddate, job_status, fie_name";
            $limit = settingOtherAccount;
            $data['job'] = $this->job_model->fetch_join($select, "LEFT", "tbtt_field", "tbtt_job.job_field = tbtt_field.fie_id", "", "", "", "", "", "", $where, $sort, $by, $start, $limit);
            #Load view
            $this->load->view('home/account/job/defaults', $data);
        }
    }

    function employ()
    {
        $this->load->model('employ_model');
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu 1
        $data['menuSelected'] = 'employ';
        $data['menuType'] = 'account';
        #END Menu 1
        #BEGIN: Advertise        
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar
        $action = array('edit', 'search', 'keyword', 'sort', 'by', 'status', 'id', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        if (strtolower($this->uri->segment(3)) == 'edit' && $getVar['edit'] != FALSE) {
            $employ = $this->employ_model->get("*", "emp_id = " . (int)$getVar['edit'] . " AND emp_user = " . (int)$this->session->userdata('sessionUser'));
            if (count($employ) != 1 || !$this->check->is_id($getVar['edit'])) {
                redirect(base_url() . 'account/employ', 'location');
                die();
            }
            #BEGIN: Unlink captcha
            $this->load->helper('unlink');
            unlink_captcha($this->session->flashdata('sessionPathCaptchaEditEmployAccount'));
            #END Unlink captcha
            if ($this->session->flashdata('sessionSuccessEditEmployAccount')) {
                $data['successEditEmployAccount'] = true;
            } else {
                $this->load->library('form_validation');
                $data['successEditEmployAccount'] = false;
                #BEGIN: Province

                $data['province'] = $this->province_model->fetch("pre_id, pre_name", "pre_status = 1", "pre_order", "ASC");
                #END Province
                #BEGIN: Field
                $this->load->model('field_model');
                $data['field'] = $this->field_model->fetch("fie_id, fie_name", "fie_status = 1", "fie_order", "ASC");
                #END Field
                if ($this->input->post('captcha_employ') && time() - (int)$this->session->userdata('sessionTimePosted') <= (int)settingTimePost) {
                    redirect(base_url() . 'account/employ/edit/' . $getVar['edit'], 'location');
                    die();
                }
                #BEGIN: Set rules
                $this->form_validation->set_rules('title_employ', 'lang:title_employ_label_employ_edit', 'trim|required');
                $this->form_validation->set_rules('field_employ', 'lang:field_employ_label_employ_edit', 'required|callback__exist_field');
                $this->form_validation->set_rules('position_employ', 'lang:position_employ_label_employ_edit', 'trim|required');
                $this->form_validation->set_rules('province_employ', 'lang:province_employ_label_employ_edit', 'required|callback__exist_province');
                $this->form_validation->set_rules('salary_employ', 'lang:salary_employ_label_employ_edit', 'trim|required|is_natural_no_zero');
                $this->form_validation->set_rules('txtContent', 'lang:txtcontent_label_employ_edit', 'trim|required|min_length[10]|max_length[10000]');
                $this->form_validation->set_rules('name_employ', 'lang:name_employ_label_employ_edit', 'trim|required');
                $this->form_validation->set_rules('level_employ', 'lang:level_employ_label_employ_edit', 'trim|required');
                $this->form_validation->set_rules('address_employ', 'lang:address_employ_label_employ_edit', 'trim|required');
                $this->form_validation->set_rules('phone_employ', 'lang:phone_employ_label_employ_edit', 'trim|required|callback__is_phone');
                $this->form_validation->set_rules('mobile_employ', 'lang:mobile_employ_label_employ_edit', 'trim|callback__is_phone');
                $this->form_validation->set_rules('email_employ', 'lang:email_employ_label_employ_edit', 'trim|required|valid_email');
                $this->form_validation->set_rules('yahoo_employ', 'lang:yahoo_employ_label_employ_edit', 'trim|callback__valid_nick');
                $this->form_validation->set_rules('skype_employ', 'lang:skype_employ_label_employ_edit', 'trim|callback__valid_nick');
                $this->form_validation->set_rules('endday_employ', 'lang:endday_employ_label_employ_edit', 'required|callback__valid_enddate_employ_edit');
                //$this->form_validation->set_rules('captcha_employ', 'lang:captcha_employ_label_employ_edit', 'required|callback__valid_captcha_employ_edit');
                #END Set rules
                #BEGIN: Set message
                $this->form_validation->set_message('required', $this->lang->line('required_message'));
                $this->form_validation->set_message('_valid_nick', $this->lang->line('_valid_nick_message'));
                $this->form_validation->set_message('is_natural_no_zero', $this->lang->line('is_natural_no_zero_message'));
                $this->form_validation->set_message('valid_email', $this->lang->line('valid_email_message'));
                $this->form_validation->set_message('min_length', $this->lang->line('min_length_message'));
                $this->form_validation->set_message('max_length', $this->lang->line('max_length_message'));
                $this->form_validation->set_message('_exist_province', $this->lang->line('_exist_province_message'));
                $this->form_validation->set_message('_exist_field', $this->lang->line('_exist_field_message'));
                $this->form_validation->set_message('_valid_enddate_employ_edit', $this->lang->line('_valid_enddate_message'));
                $this->form_validation->set_message('_is_phone', $this->lang->line('_is_phone_message'));
                //$this->form_validation->set_message('_valid_captcha_employ_edit', $this->lang->line('_valid_captcha_message_employ_edit'));
                //$this->form_validation->set_error_delimiters('<div class="div_errorpost">', '</div>');
                #END Set message
                if ($this->form_validation->run() != FALSE) {
                    if ($this->input->post('time_employ') == '1') {
                        $time_employ = $this->lang->line('time_employ_1_employ_edit');
                    } elseif ($this->input->post('time_employ') == '2') {
                        $time_employ = $this->lang->line('time_employ_2_employ_edit');
                    } elseif ($this->input->post('time_employ') == '3') {
                        $time_employ = $this->lang->line('time_employ_3_employ_edit');
                    } elseif ($this->input->post('time_employ') == '4') {
                        $time_employ = $this->lang->line('time_employ_4_employ_edit');
                    } else {
                        $time_employ = $this->lang->line('time_employ_5_employ_edit');
                    }
                    if (strtoupper($this->input->post('currency_employ')) == 'USD') {
                        $salary_employ = (int)$this->input->post('salary_employ') . '|USD/';
                    } else {
                        $salary_employ = (int)$this->input->post('salary_employ') . '|VND/';
                    }
                    if ($this->input->post('datesalary_employ') == '3') {
                        $datesalary_employ = $this->lang->line('year_employ_edit');
                    } elseif ($this->input->post('datesalary_employ') == '1') {
                        $datesalary_employ = $this->lang->line('day_employ_edit');
                    } else {
                        $datesalary_employ = $this->lang->line('month_employ_edit');
                    }
                    $dataEdit = array(
                        'emp_title' => trim($this->filter->injection_html($this->input->post('title_employ'))),
                        'emp_field' => (int)$this->input->post('field_employ'),
                        'emp_position' => trim($this->filter->injection_html($this->input->post('position_employ'))),
                        'emp_province' => (int)$this->input->post('province_employ'),
                        'emp_time_job' => $this->filter->injection($time_employ),
                        'emp_salary' => $this->filter->injection($salary_employ . $datesalary_employ),
                        'emp_detail' => trim($this->filter->injection_html($this->input->post('txtContent'))),
                        'emp_fullname' => trim($this->filter->injection_html($this->input->post('name_employ'))),
                        'emp_age' => (int)$this->input->post('age_employ'),
                        'emp_sex' => (int)$this->input->post('sex_employ'),
                        'emp_level' => trim($this->filter->injection_html($this->input->post('level_employ'))),
                        'emp_foreign_language' => trim($this->filter->injection_html($this->input->post('foreign_language_employ'))),
                        'emp_computer' => trim($this->filter->injection_html($this->input->post('computer_employ'))),
                        'emp_exper' => (int)$this->input->post('experience_employ'),
                        'emp_address' => trim($this->filter->injection_html($this->input->post('address_employ'))),
                        'emp_phone' => trim($this->filter->injection_html($this->input->post('phone_employ'))),
                        'emp_mobile' => trim($this->filter->injection_html($this->input->post('mobile_employ'))),
                        'emp_email' => trim($this->filter->injection_html($this->input->post('email_employ'))),
                        'emp_yahoo' => trim($this->filter->injection_html($this->input->post('yahoo_employ'))),
                        'emp_skype' => trim($this->filter->injection_html($this->input->post('skype_employ'))),
                        'emp_enddate' => mktime(0, 0, 0, (int)$this->input->post('endmonth_employ'), (int)$this->input->post('endday_employ'), (int)$this->input->post('endyear_employ'))
                    );
                    if ($this->employ_model->update($dataEdit, "emp_id = " . $employ->emp_id)) {
                        $this->session->set_flashdata('sessionSuccessEditEmployAccount', 1);
                    }
                    $this->session->set_userdata('sessionTimePosted', time());
                    redirect(base_url() . trim(uri_string(), '/'), 'location');
                } else {
                    $data['title_employ'] = $employ->emp_title;
                    $data['field_employ'] = $employ->emp_field;
                    $data['position_employ'] = $employ->emp_position;
                    $data['province_employ'] = $employ->emp_province;
                    if ($employ->emp_time_job == $this->lang->line('time_employ_1_employ_edit')) {
                        $data['time_employ'] = 1;
                    } elseif ($employ->emp_time_job == $this->lang->line('time_employ_2_employ_edit')) {
                        $data['time_employ'] = 2;
                    } elseif ($employ->emp_time_job == $this->lang->line('time_employ_3_employ_edit')) {
                        $data['time_employ'] = 3;
                    } elseif ($employ->emp_time_job == $this->lang->line('time_employ_4_employ_edit')) {
                        $data['time_employ'] = 4;
                    } else {
                        $data['time_employ'] = 5;
                    }
                    $salaryEmploy = explode('|', $employ->emp_salary);
                    $data['salary_employ'] = $salaryEmploy[0];
                    $salaryEmploy = explode('/', array_pop($salaryEmploy));
                    $data['currency_employ'] = $salaryEmploy[0];
                    $salaryEmploy = array_pop($salaryEmploy);
                    if ($salaryEmploy == $this->lang->line('year_employ_edit')) {
                        $data['datesalary_employ'] = 3;
                    } elseif ($salaryEmploy == $this->lang->line('day_employ_edit')) {
                        $data['datesalary_employ'] = 1;
                    } else {
                        $data['datesalary_employ'] = 2;
                    }
                    $data['txtContent'] = $employ->emp_detail;
                    $data['name_employ'] = $employ->emp_fullname;
                    $data['age_employ'] = $employ->emp_age;
                    $data['sex_employ'] = $employ->emp_sex;
                    $data['level_employ'] = $employ->emp_level;
                    $data['foreign_language_employ'] = $employ->emp_foreign_language;
                    $data['computer_employ'] = $employ->emp_computer;
                    $data['experience_employ'] = $employ->emp_exper;
                    $data['address_employ'] = $employ->emp_address;
                    $data['phone_employ'] = $employ->emp_phone;
                    $data['mobile_employ'] = $employ->emp_mobile;
                    $data['email_employ'] = $employ->emp_email;
                    $data['yahoo_employ'] = $employ->emp_yahoo;
                    $data['skype_employ'] = $employ->emp_skype;
                    $data['endday_employ'] = date('d', $employ->emp_enddate);
                    $data['endmonth_employ'] = date('m', $employ->emp_enddate);
                    $data['endyear_employ'] = date('Y', $employ->emp_enddate);
                }
                #BEGIN: Create captcha post employ
                $aCaptcha = $this->createCaptcha(md5(microtime()) . '.' . (int)$this->session->userdata('sessionUser') . 'edie.jpg');
                if(!empty($aCaptcha)) {
                    $data['captcha']                = $aCaptcha['captcha']; 
                    $data['imageCaptchaEditEmployAccount']    = $aCaptcha['imageCaptchaContact'];

                    $this->session->set_userdata('sessionCaptchaEditEmployAccount', $aCaptcha['captcha']);
                    $this->session->set_userdata('sessionPathCaptchaEditEmployAccount', $aCaptcha['imageCaptchaContact']); 
                }

                #END Create captcha post employ
            }
            #Load view
            $this->load->view('home/account/employ/edit', $data);
        } elseif (strtolower($this->uri->segment(3)) == 'favorite') {
            $this->load->model('employ_favorite_model');
            #BEGIN: Menu 2
            $data['menuSelected'] = 'favorite_employ';
            #END Menu 2
            #BEGIN: Delete
            if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
                $this->employ_favorite_model->delete($this->input->post('checkone'), "emf_id", (int)$this->session->userdata('sessionUser'), "emf_user");
                redirect(base_url() . trim(uri_string(), '/'), 'location');
            }
            #END Delete
            #Define url for $getVar
            $action = array('search', 'keyword', 'sort', 'by', 'page');
            $getVar = $this->uri->uri_to_assoc(4, $action);
            #BEGIN: Search & sort
            $where = "emf_user = " . (int)$this->session->userdata('sessionUser');
            $sort = 'emf_id';
            $by = 'DESC';
            $sortUrl = '';
            $pageSort = '';
            $pageUrl = '';
            $keyword = '';
            if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
                $keyword = $this->filter->html($getVar['keyword']);
                switch (strtolower($getVar['search'])) {
                    case 'title':
                        $sortUrl .= '/search/title/keyword/' . $getVar['keyword'];
                        $pageUrl .= '/search/title/keyword/' . $getVar['keyword'];
                        $where .= " AND emp_title LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                        break;
                }
            }
            #If have sort
            if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
                switch (strtolower($getVar['sort'])) {
                    case 'title':
                        $pageUrl .= '/sort/title';
                        $sort = "emp_title";
                        break;
                    case 'salary':
                        $pageUrl .= '/sort/salary';
                        $sort = "emp_salary";
                        break;
                    case 'postdate':
                        $pageUrl .= '/sort/postdate';
                        $sort = "emp_begindate";
                        break;
                    case 'date':
                        $pageUrl .= '/sort/date';
                        $sort = "emf_date";

                        break;
                    default:
                        $pageUrl .= '/sort/id';
                        $sort = "emf_id";
                }
                if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                    $pageUrl .= '/by/desc';
                    $by = "DESC";
                } else {
                    $pageUrl .= '/by/asc';
                    $by = "ASC";
                }
            }
            #If have page
            if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
                $start = (int)$getVar['page'];
                $pageSort .= '/page/' . $start;
            } else {
                $start = 0;
            }
            #END Search & sort
            #Keyword
            $data['keyword'] = $keyword;
            #BEGIN: Create link sort
            $data['sortUrl'] = base_url() . 'account/employ/favorite' . $sortUrl . '/sort/';
            $data['pageSort'] = $pageSort;
            #END Create link sort
            #BEGIN: Pagination
            $this->load->library('pagination');
            #Count total record
            $totalRecord = count($this->employ_favorite_model->fetch_join("emf_id", "LEFT", "tbtt_employ", "tbtt_employ_favorite.emf_employ = tbtt_employ.emp_id", $where, "", ""));
            $config['base_url'] = base_url() . 'account/employ/favorite' . $pageUrl . '/page/';
            $config['total_rows'] = $totalRecord;
            $config['per_page'] = settingOtherAccount;
            $config['num_links'] = 1;
            $config['uri_segment'] = 4;
            $config['cur_page'] = $start;
            $this->pagination->initialize($config);
            $data['linkPage'] = $this->pagination->create_links();
            #END Pagination
            #sTT - So thu tu
            $data['sTT'] = $start + 1;
            #Fetch record
            $select = "emf_id, emf_date, emp_id, emp_title, emp_view, emp_field, emp_salary, emp_begindate";
            $limit = settingOtherAccount;
            $data['favoriteEmploy'] = $this->employ_favorite_model->fetch_join($select, "LEFT", "tbtt_employ", "tbtt_employ_favorite.emf_employ = tbtt_employ.emp_id", $where, $sort, $by, $start, $limit);
            #Load view
            $this->load->view('home/account/employ/favorite', $data);
        } else {
            #BEGIN: Delete
            if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
                $idCheckOneEmploy = implode(',', $this->input->post('checkone'));
                $checkOneEmploy = $this->employ_model->fetch("emp_id", "emp_id IN($idCheckOneEmploy) AND emp_user = " . (int)$this->session->userdata('sessionUser'));
                $idEmploy = array();
                foreach ($checkOneEmploy as $checkOneEmployArray) {
                    $idEmploy[] = $checkOneEmployArray->emp_id;
                }
                if (count($idEmploy) > 0) {
                    $this->load->model('employ_favorite_model');
                    $this->load->model('employ_bad_model');
                    $this->employ_favorite_model->delete($idEmploy, "emf_employ");
                    $this->employ_bad_model->delete($idEmploy, "emb_employ");
                    $this->employ_model->delete($idEmploy, "emp_id");
                }
                redirect(base_url() . trim(uri_string(), '/'), 'location');
            }
            #END Delete
            $this->load->library('hash');
            #BEGIN: Search & sort
            $where = "emp_user = " . (int)$this->session->userdata('sessionUser');
            $sort = 'emp_id';
            $by = 'DESC';
            $sortUrl = '';
            $pageSort = '';
            $pageUrl = '';
            $keyword = '';
            if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
                $keyword = $this->filter->html($getVar['keyword']);
                switch (strtolower($getVar['search'])) {
                    case 'title':
                        $sortUrl .= '/search/title/keyword/' . $getVar['keyword'];
                        $pageUrl .= '/search/title/keyword/' . $getVar['keyword'];
                        $where .= " AND emp_title LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                        break;
                }
            }
            #If have sort
            if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
                switch (strtolower($getVar['sort'])) {
                    case 'title':
                        $pageUrl .= '/sort/title';
                        $sort = "emp_title";
                        break;
                    case 'field':
                        $pageUrl .= '/sort/field';
                        $sort = "fie_name";
                        break;
                    case 'postdate':
                        $pageUrl .= '/sort/postdate';
                        $sort = "emp_begindate";
                        break;
                    case 'enddate':
                        $pageUrl .= '/sort/enddate';
                        $sort = "emp_enddate";
                        break;
                    default:
                        $pageUrl .= '/sort/id';
                        $sort = "emp_id";
                }
                if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                    $pageUrl .= '/by/desc';
                    $by = "DESC";
                } else {
                    $pageUrl .= '/by/asc';
                    $by = "ASC";
                }
            }
            #If have page
            if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
                $start = (int)$getVar['page'];
                $pageSort .= '/page/' . $start;
            } else {
                $start = 0;
            }
            #END Search & sort
            #Keyword
            $data['keyword'] = $keyword;
            #BEGIN: Create link sort
            $data['sortUrl'] = base_url() . 'account/employ' . $sortUrl . '/sort/';
            $data['pageSort'] = $pageSort;
            #END Create link sort
            #BEGIN: Status
            $statusUrl = $pageUrl . $pageSort;
            $data['statusUrl'] = base_url() . 'account/employ' . $statusUrl;
            if ($getVar['status'] != FALSE && trim($getVar['status']) != '' && $getVar['id'] != FALSE && (int)$getVar['id'] > 0) {
                switch (strtolower($getVar['status'])) {
                    case 'active':
                        $this->employ_model->update(array('emp_status' => 1), "emp_id = " . (int)$getVar['id'] . " AND emp_user = " . (int)$this->session->userdata('sessionUser'));
                        break;
                    case 'deactive':
                        $this->employ_model->update(array('emp_status' => 0), "emp_id = " . (int)$getVar['id'] . " AND emp_user = " . (int)$this->session->userdata('sessionUser'));
                        break;
                }
                redirect($data['statusUrl'], 'location');
            }
            #END Status
            #BEGIN: Pagination
            $this->load->library('pagination');
            #Count total record
            $totalRecord = count($this->employ_model->fetch_join("emp_id", "LEFT", "tbtt_field", "tbtt_employ.emp_field = tbtt_field.fie_id", "", "", "", "", "", "", $where, "", ""));
            $config['base_url'] = base_url() . 'account/employ' . $pageUrl . '/page/';
            $config['total_rows'] = $totalRecord;
            $config['per_page'] = settingOtherAccount;
            $config['num_links'] = 1;
            $config['uri_segment'] = 4;
            $config['cur_page'] = $start;
            $this->pagination->initialize($config);
            $data['linkPage'] = $this->pagination->create_links();
            #END Pagination
            #sTT - So thu tu
            $data['sTT'] = $start + 1;
            #Fetch record
            $select = "emp_id, emp_title, emp_field, emp_view, emp_begindate, emp_enddate, emp_status, fie_name";
            $limit = settingOtherAccount;
            $data['employ'] = $this->employ_model->fetch_join($select, "LEFT", "tbtt_field", "tbtt_employ.emp_field = tbtt_field.fie_id", "", "", "", "", "", "", $where, $sort, $by, $start, $limit);
            #Load view
            $this->load->view('home/account/employ/defaults', $data);
        }
    }

    function order()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == BranchUser
            || $group_id == AffiliateStoreUser
            || $group_id == AffiliateUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == StaffStoreUser
        ) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        $data['viewbyparent'] = array();
        if ($this->uri->segment(3) == 'viewbyparent' || ($this->uri->segment(3) == 'coupon' && $group_id > 3)) {
            $list = $this->shop_tree();
            if (empty($list[0])) {
                $_view_data = '';
            } else {
                $_view_data = implode(",", $list[0]);
                $data['viewbyparent'] = array(
                    'url' => 'viewbyparent',
                    'data' => $_view_data
                );
            }
        }

        #BEGIN: Delete
        if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
            $this->showcart_model->delete($this->input->post('checkone'), "shc_id", (int)$this->session->userdata('sessionUser'), "shc_buyer");
            redirect(base_url() . trim(uri_string(), '/'), 'location');
        }
        #END Delete
        $data['successAddShowcart'] = '';
        if ($this->session->flashdata('sessionSuccessAddShowcart')) {
            $data['successAddShowcart'] = $this->session->flashdata('sessionSuccessAddShowcart');
        }
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'showcart';
        $data['menuType'] = 'account';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        if($group_id == StaffStoreUser) {
            $uid = $this->session->userdata('sessionUser');
            $parent_id = $this->user_model->get("parent_id", "use_id = $uid")->parent_id;
            $parent_group = $this->user_model->get("use_group", "use_id = $parent_id")->use_group;
            $shop = $this->shop_model->get("*", "sho_user = " . $parent_id);
            $data['shopid'] = $shop->sho_id;
        } else {
            $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
            $data['shopid'] = $shop->sho_id;
        }
        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch('adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position, adv_iframe', "adv_status = 1 AND adv_enddate >= $currentDate", 'adv_order', 'ASC');
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar
        $action = array('search', 'keyword', 'sort', 'by', 'page');
        $protypeorder = $this->uri->segment(3);
        if (isset($protypeorder) && $protypeorder == 'coupon') {
            $protype = 2;
        } else {
            $protype = 0;
        }
        $getVar = $this->uri->uri_to_assoc(4, $action);
        #BEGIN: Search & Filter
        if($group_id == StaffStoreUser) {
            $where = 'shc_saler = ' . $parent_id;
        } else {
            $where = 'shc_saler = ' . (int)$this->session->userdata('sessionUser');
        }
        $sort = 'shc_orderid';
        $by = 'DESC';
        $sortUrl = '/' . $protypeorder;
        $pageSort = '';
        $pageUrl = '/' . $protypeorder;
        $keyword = '';

        #If search
        //        if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
        //        $keyword = $this->filter->html($getVar['keyword']);
        //        switch (strtolower($getVar['search'])) {
        //            case 'name':
        //                $sortUrl .= '/search/name/keyword/' . $getVar['keyword'];
        //                $pageUrl .= '/search/name/keyword/' . $getVar['keyword'];
        //                $where .= " AND pro_name LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
        //                break;
        //        }
        //    }

        #If sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "shc_orderid";
                    break;
                case 'order_id':
                    $pageUrl .= '/sort/order_id';
                    $sort = "shc_orderid";
                    break;
                case 'user':
                    $pageUrl .= '/sort/user';
                    $sort = "use_fullname";
                    break;
                case 'cost':
                    $pageUrl .= '/sort/cost';
                    $sort = "pro_cost";
                    break;
                case 'quantity':
                    $pageUrl .= '/sort/quantity';
                    $sort = "shc_quantity";
                    break;
                case 'saler':
                    $pageUrl .= '/sort/saler';
                    $sort = "use_fullname";
                    break;
                case 'date':
                    $pageUrl .= '/sort/date';
                    $sort = "date";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "id";
            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & Filter
        #Keyword
        $data['keyword'] = $keyword;
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/order' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        $order_date = $this->input->post('daterange') ? $this->input->post('daterange') : NULL;
        //  $protype = $this->input->post('pro_type') ? $this->input->post('pro_type') : NULL;
        $order_date = explode(' - ', $order_date);
        $strat_date_order = strtotime($order_date[0]);
        $end_date_order = strtotime($order_date[1]);
        $limit = 20;
        #Count total record
        if ($this->session->userdata('sessionGroup') == AffiliateStoreUser || ($this->session->userdata('sessionGroup') == StaffStoreUser && $parent_group == AffiliateStoreUser)) {
            $tree = array();
            if ($this->session->userdata('sessionGroup') == StaffStoreUser) {
                $getp = $this->user_model->fetch('use_id,parent_id', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
                $tree[] = (int)$getp[0]->parent_id;
            }
            //lấy danh sách chi nhánh thuộc Gian hàng
            if($group_id == StaffStoreUser){
                $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $parent_id );
            } else {
                $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $this->session->userdata('sessionUser') );
            }
            if (!empty($sub_tructiep)) {
                foreach ($sub_tructiep as $key => $value) {
                    $tree[] = $value->use_id;
                }
            }
            $id = implode(' OR tbtt_showcart.shc_saler = ', $tree);
            if($group_id == StaffStoreUser) {
                $saler = '((tbtt_showcart.shc_saler = ' . $parent_id . ' AND pro_of_shop = 0)';
            } else {
                $saler = '((tbtt_showcart.shc_saler = ' . (int)$this->session->userdata('sessionUser') . ' AND pro_of_shop = 0)';
            }
            if (!empty($id)) {
                $saler .= ' OR ((tbtt_showcart.shc_saler = ' . $id . ') AND pro_of_shop > 0)';
            }
            $saler .= ')';
        } else {
            if ($this->session->userdata('sessionGroup') == BranchUser || ($this->session->userdata('sessionGroup') == StaffStoreUser && $parent_group == BranchUser)) {
                if($group_id == StaffStoreUser) {
                    $saler = 'tbtt_showcart.shc_saler = ' . $parent_id;
                } else {
                    $saler = 'tbtt_showcart.shc_saler = ' . (int)$this->session->userdata('sessionUser');
                }
            }
        }

        $params = array(
            'select' => 'pro_id, user_process, tbtt_showcart.*, tbtt_order.*, pro_name, pro_sku, pro_image, ord_smobile, status_id, pro_dir, pro_quality, pro_type, tbtt_user.use_id, tbtt_user.use_username, tbtt_user.use_fullname, tbtt_detail_product.dp_images, tbtt_detail_product.dp_color, tbtt_detail_product.dp_size, tbtt_detail_product.dp_material, tbtt_detail_product.dp_cost, tbtt_detail_product.dp_instock',
            //'shc_saler' => $this->session->userdata('sessionUser'),
            'where' => $saler,
            'sort' => $sort,
            'by' => $by,
            'start' => $start,
            'limit' => $limit,
            'is_count' => true,
            'order_id' => $this->input->post('order_id') ? $this->input->post('order_id') : NULL,
            'username' => $this->input->post('username') ? $this->input->post('username') : NULL,
            'ordmobile' => $this->input->post('ordmobile') ? $this->input->post('ordmobile') : NULL,
            'ship_order' => $this->input->post('ship_order') ? $this->input->post('ship_order') : NULL,
            'coupon_code' => $this->input->post('coupon_code') ? $this->input->post('coupon_code') : NULL,
            'start_date' => $strat_date_order,
            'end_date' => $end_date_order,
            'pro_type' => $protype,
            'order_status' => $this->input->post('order_status') ? $this->input->post('order_status') : NULL,
        );

        $totalRecord = $this->order_model->list_order_by_id_shop($params, $data['viewbyparent']);
        $config['base_url'] = base_url() . 'account/order' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limit;
        $config['num_links'] = 1;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $data['sTT'] = $start + 1;
        $apply = $this->uri->segment(4);
        $id_order = $this->uri->segment(5);
        if ($apply && $apply == 'apply') {
            if ($this->order_model->update(array('status_use' => 2), 'id = ' . $id_order)) {
                redirect(base_url() . 'account/order/coupon', 'location');
            }
        }
        #Fetch record system/application/models/af_order_model.php       
        $this->db->select('status_id, text');
        $this->db->from('tbtt_status');
        $this->db->where('published', 1);
        $this->db->order_by("status_id", "asc");
        // Get the results
        $query = $this->db->get();
        $temp_result = $query->result_array();
        $data['status_order'] = $temp_result;
        $params['is_count'] = false;
        $data['ismyorder'] = $this->order_model->get('*', 'order_saler = ' . (int)$this->session->userdata('sessionUser'));
        $data['showcart'] = $this->order_model->list_order_by_id_shop($params, $data['viewbyparent']);
        $data['params'] = $params;
        $get_u = $this->user_model->fetch_join('use_id, parent_id, use_group, sho_link, domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . (int)$this->session->userdata('sessionUser') . '"');
        switch ($get_u[0]->use_group) {
            case AffiliateStoreUser:
            case BranchUser:
                if ($get_u[0]->domain != '') {
                    $domain = $get_u[0]->domain;
                } else {
                    $parent = $get_u[0]->sho_link;
                }
                break;
            case StaffStoreUser:
            case StaffUser:
                $get_p = $this->user_model->fetch_join('use_id, parent_id, use_group, sho_link, domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_u[0]->parent_id . '"');

                if ($get_p[0]->domain != '') {
                    $domain = $get_p[0]->domain;
                } else {
                    $parent = $get_p[0]->sho_link;
                }
                break;
            case AffiliateUser:
                $get_p = $this->user_model->fetch_join('use_id, parent_id, use_group, sho_link, domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_u[0]->parent_id . '"');
                if ($get_p[0]->use_group == AffiliateStoreUser || $get_p[0]->use_group == BranchUser) {
                    if ($get_p[0]->domain != '') {
                        $domain = $get_p[0]->domain;
                    } else {
                        $parent = $get_p[0]->sho_link;
                    }
                } else {
                    if ($get_p[0]->use_group == StaffStoreUser || $get_p[0]->use_group == StaffUser) {
                        $get_p1 = $this->user_model->fetch_join('use_id, parent_id, use_group, sho_link, domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_p[0]->parent_id . '"');
                        if ($get_p1[0]->domain != '') {
                            $domain = $get_p1[0]->domain;
                        } else {
                            $parent = $get_p1[0]->sho_link;
                        }
                    } else {
                        $get_p1 = $this->user_model->fetch_join('use_id, parent_id, use_group, sho_link, domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_p[0]->parent_id . '"');
                        if ($get_p1[0]->use_group == StaffStoreUser && $get_p[0]->use_group == StaffUser) {
                            $get_p2 = $this->user_model->fetch_join('use_id, parent_id, use_group, sho_link, domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_p1[0]->parent_id . '"');
                            if ($get_p1[0]->domain != '') {
                                $domain = $get_p2[0]->domain;
                            } else {
                                $parent = $get_p2[0]->sho_link;
                            }
                        }
                    }
                }
                break;
        }
        $data['domain'] = $domain;
        $data['parent'] = $parent;
        #Load view
        $this->load->view('home/account/showcart/order', $data);
    }

    function listbran_order()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == BranchUser
            || $group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == StaffUser
            || $group_id == StaffStoreUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        $datefrom = $_REQUEST['datefrom'];
        $dateto = $_REQUEST['dateto'];
        $startdate = strtotime($datefrom);
        $enddate = strtotime($dateto);
        $enddatenull = mktime(0, 0, 0, 01, 01, 2006);

        $searchtime = '';
        $select = '';
        $where = '';
        $sort = '';
        $by = '';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";
            }

            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }

        }
        #END Search & sort
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }

        if ($datefrom != '' && $dateto != '') {
            $searchtime .= " AND s.shc_change_status_date >= " . (float)$startdate . " AND s.shc_change_status_date <= " . (float)$enddate;
        } else {
            $searchtime .= " AND s.shc_change_status_date >= " . (float)$enddatenull;
        }


        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/statisticlistbran' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort

        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record


        $where = 'use_status = 1 and (use_group =' . BranchUser . ') and parent_id IN(' . (int)$this->session->userdata('sessionUser') . ')';
        #sTT - So thu tu
        // $totalRecord = count($this->user_model->get_list_DSo_by_NVKD("use_id, (SELECT SUM(s.shc_total) FROM tbtt_showcart s INNER JOIN tbtt_user u ON s.af_id_parent = u.use_id WHERE s.af_id_parent = us.use_id AND s.shc_total > 0 " .$searchtime. ") AS showcarttotal", $where, $sort, $by, $start, $limit));
        $totalRecord = count($this->user_model->fetch("parent_id,use_id,use_username, use_fullname,use_email,use_mobile", $where, $sort, $by, $start, ''));
        $config['base_url'] = base_url() . 'account/salesemployee' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $limit = settingOtherAccount;
        $config['per_page'] = $limit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        // $data['linkPage'] = $this->pagination->create_links();
        $data['stt'] = $start;
        #END Pagination
        $liststoreAF = $this->user_model->fetch("parent_id,use_id,use_username, use_fullname,use_email,use_mobile", $where, $sort, $by, $start, $limit);
        $data['totalRecord'] = $totalRecord;
        $LArray = array();
        if (!empty($liststoreAF)) {
            foreach ($liststoreAF as $key => $row) {
                $Str = $this->user_model->get('use_username, use_fullname,use_email,use_mobile, use_group, parent_id, use_id', 'use_id = ' . $row->parent_id);
                $info_parent = '';
                $haveDomain = '';
                $pshop = '';

                $pgroup = $Str->use_group;
                if ($Str->use_group == 3) {
                    $info_parent .= 'GH: ' . $Str->use_username;
                    $checkDomain = $this->shop_model->get('sho_id, sho_link, domain', 'sho_user = ' . $Str->use_id);
                    if ($checkDomain) {
                        $haveDomain .= $checkDomain->domain;
                        $pshop .= $checkDomain->sho_link;
                    }
                } elseif ($Str->use_group == 14) {
                    $info_parent = 'CN: ' . $Str->use_username;
                    $pa_cn = $this->user_model->get('use_username, use_group, parent_id', 'use_id = ' . $Str->parent_id);
                    if (!empty($pa_cn)) {
                        if ($pa_cn->use_group == AffiliateStoreUser) {
                            $info_parent .= ', GH: ' . $pa_cn->use_username;
                        } else {
                            if ($pa_cn->use_group == StaffStoreUser) {
                                $pa_nvgh = $this->user_model->get('use_username, use_group, parent_id', 'use_id = ' . $pa_cn->parent_id);
                                $info_parent .= ', NVGH: ' . $pa_cn->use_username . ', GH: ' . $pa_nvgh->use_username;
                            }
                        }
                    }
                } elseif ($Str->use_group == 15) {
                    $info_parent = 'NVGH: ' . $Str->use_username;
                    $pa_cn = $this->user_model->get('use_username, use_group, parent_id', 'use_id = ' . $Str->parent_id);
                    $pa_nvgh = $this->user_model->get('use_username, use_group, parent_id', 'use_id = ' . $pa_cn->parent_id);
                    if (!empty($pa_cn) && $pa_cn->use_group == AffiliateStoreUser) {
                        $info_parent .= ', GH: ' . $pa_cn->use_username;

                    }
                } elseif ($Str->use_group == 11) {
                    $info_parent = 'NV: ' . $Str->use_username;
                    $pa_nv = $this->user_model->get('use_username, use_group, parent_id', 'use_id = ' . $Str->parent_id);
                    if (!empty($pa_nv) && $pa_nv->use_group == 14) {
                        $info_parent .= ', CN: ' . $pa_nv->use_username;
                        $pa_cn = $this->user_model->get('use_username, use_group, parent_id', 'use_id = ' . $pa_nv->parent_id);
                        if (!empty($pa_cn) && $pa_cn->use_group == 3) {
                            $info_parent .= ', GH: ' . $pa_cn->use_username;
                        }
                    } elseif (!empty($pa_nv) && $pa_nv->use_group == 3) {
                        $info_parent .= ', GH: ' . $pa_nv->use_username;
                    }
                } else {
                }


                $LArray[] = array(
                    'use_id' => $row->use_id,
                    'use_group' => $row->use_group,
                    'use_username' => $row->use_username,
                    'use_fullname' => $row->use_fullname,
                    'use_email' => $row->use_email,
                    'use_mobile' => $row->use_mobile,
                    'parent_id' => $row->parent_id,
                    'showcarttotal' => $row->showcarttotal,
                    'info_parent' => $info_parent
                );
            }
        }
        $data['liststoreAF'] = $LArray;

        //Tinh tong danh so
        $total = 0;
        $data['total'] = $total;

        $data['menuSelected'] = 'showcart';
        $data['menuType'] = 'account';

        $this->load->view('home/account/showcart/listbran_order', $data);
    }

    function order_bran()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == BranchUser
            || $group_id == AffiliateStoreUser
            || $group_id == AffiliateUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == StaffStoreUser
        ) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        $data['viewbyparent'] = array();
        if ($this->uri->segment(3) == 'viewbyparent' || ($this->uri->segment(3) == 'coupon' && $group_id > 3)) {
            $list = $this->shop_tree();
            if (empty($list[0])) {
                $_view_data = '';
            } else {
                $_view_data = implode(",", $list[0]);
                $data['viewbyparent'] = array(
                    'url' => 'viewbyparent',
                    'data' => $_view_data
                );
            }
        }

        #BEGIN: Delete
        if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
            $this->showcart_model->delete($this->input->post('checkone'), "shc_id", (int)$this->session->userdata('sessionUser'), "shc_buyer");
            redirect(base_url() . trim(uri_string(), '/'), 'location');
        }
        #END Delete
        $data['successAddShowcart'] = '';
        if ($this->session->flashdata('sessionSuccessAddShowcart')) {
            $data['successAddShowcart'] = $this->session->flashdata('sessionSuccessAddShowcart');
        }
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuSelected'] = 'showcart';
        $data['menuType'] = 'account';
        $this->load->model('af_order_model');
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar
        $action = array('search', 'keyword', 'sort', 'by', 'page');
        $protypeorder = $this->uri->segment(3);
        if (isset($protypeorder) && $protypeorder == 'coupon') {
            $protype = 2;
        } else {
            $protype = 0;
        }
        $getVar = $this->uri->uri_to_assoc(4, $action);
        #BEGIN: Search & Filter
        $where = "shc_saler = " . (int)$this->session->userdata('sessionUser');
        $sort = "shc_orderid";
        $by = "DESC";
        $sortUrl = '/' . $protypeorder;
        $pageSort = '';
        $pageUrl = '/' . $protypeorder;
        $keyword = '';

        #If search
        //        if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
        //        $keyword = $this->filter->html($getVar['keyword']);
        //        switch (strtolower($getVar['search'])) {
        //            case 'name':
        //                $sortUrl .= '/search/name/keyword/' . $getVar['keyword'];
        //                $pageUrl .= '/search/name/keyword/' . $getVar['keyword'];
        //                $where .= " AND pro_name LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
        //                break;
        //        }
        //    }

        #If sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "shc_orderid";
                    break;
                case 'order_id':
                    $pageUrl .= '/sort/order_id';
                    $sort = "shc_orderid";
                    break;
                case 'user':
                    $pageUrl .= '/sort/user';
                    $sort = "use_fullname";
                    break;
                case 'cost':
                    $pageUrl .= '/sort/cost';
                    $sort = "pro_cost";
                    break;
                case 'quantity':
                    $pageUrl .= '/sort/quantity';
                    $sort = "shc_quantity";
                    break;
                case 'saler':
                    $pageUrl .= '/sort/saler';
                    $sort = "use_fullname";
                    break;
                case 'date':
                    $pageUrl .= '/sort/date';
                    $sort = "date";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "id";
            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & Filter
        #Keyword
        $data['keyword'] = $keyword;
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/order' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        $order_date = $this->input->post('daterange') ? $this->input->post('daterange') : NULL;
        //  $protype = $this->input->post('pro_type') ? $this->input->post('pro_type') : NULL;
        $order_date = explode(' - ', $order_date);
        $strat_date_order = strtotime($order_date[0]);
        $end_date_order = strtotime($order_date[1]);
        $limit = 20;
        #Count total record
        $saler = $this->session->userdata('sessionUser');
        if ($this->session->userdata('sessionGroup') == AffiliateStoreUser || $this->session->userdata('sessionGroup') == StaffStoreUser) {
            $tree = array();
            $GH = (int)$this->session->userdata('sessionUser');
            if ($this->session->userdata('sessionGroup') == StaffStoreUser) {
                $getp = $this->user_model->fetch('use_id,parent_id', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
                $tree[] = $GH = (int)$getp[0]->parent_id;
            }
            $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . BranchUser . ',' . StaffStoreUser . ') AND use_status = 1 AND parent_id = "' . $this->session->userdata('sessionUser') . '"');
            if (!empty($sub_tructiep)) {
                foreach ($sub_tructiep as $key => $value) {
                    //Nếu là chi nhánh, lấy danh sách nhân viên

                    if ($value->use_group == StaffStoreUser) {
                        //Lấy danh sách CN dưới nó cua NVGH
                        $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                        if (!empty($sub_cn)) {
                            foreach ($sub_cn as $k => $vlue) {
                                $tree[] = $vlue->use_id;
                            }
                        }
                    } else {
                        $tree[] = $value->use_id;
                    }
                }
            }
            $id = implode(",", $tree);
            $where = '((tbtt_showcart.shc_saler=' . $GH . ' AND pro_of_shop=0)';
            if (!empty($id)) {
                $where .= ' OR ((tbtt_showcart.shc_saler IN(' . $id . ')) AND pro_of_shop>0)';
            }
            $where .= ')';
            if ($this->session->userdata('sessionGroup') == StaffStoreUser) {
                // $where .= ' AND ((use_group != '.AffiliateStoreUser.' and tbtt_showcart.af_id=0) OR (tbtt_showcart.af_id>0))';
                // $where .= ' AND ((tbtt_showcart.af_id>0))';
            }
        } else {
            if ($this->session->userdata('sessionGroup') == BranchUser) {
                $where = 'tbtt_showcart.shc_saler = ' . (int)$this->session->userdata('sessionUser');
            }
        }
        if ($this->uri->segment(2) == 'bran_order') {
            $where .= " AND shc_saler = " . (int)$this->uri->segment(3);
        }
        $protype = array(0, 2);
        $params = array(
            'select' => 'pro_id,tbtt_showcart.*, tbtt_order.*, pro_name, pro_sku, pro_image,ord_smobile,status_id, pro_dir, pro_quality, pro_type, tbtt_user.use_id, tbtt_user.use_username, tbtt_user.use_fullname',
            'shc_saler' => $saler,
            'where' => $where,
            'sort' => $sort,
            'by' => $by,
            'start' => $start,
            'limit' => $limit,
            'is_count' => true,
            'order_id' => $this->input->post('order_id') ? $this->input->post('order_id') : NULL,
            'username' => $this->input->post('username') ? $this->input->post('username') : NULL,
            'ordmobile' => $this->input->post('ordmobile') ? $this->input->post('ordmobile') : NULL,
            'ship_order' => $this->input->post('ship_order') ? $this->input->post('ship_order') : NULL,
            'coupon_code' => $this->input->post('coupon_code') ? $this->input->post('coupon_code') : NULL,
            'start_date' => $strat_date_order,
            'end_date' => $end_date_order,
            'pro_type' => NULL,
            'order_status' => $this->input->post('order_status') ? $this->input->post('order_status') : NULL,
        );

        $totalRecord = $this->order_model->list_order_by_id_shop($params, $data['viewbyparent']);
        $config['base_url'] = base_url() . 'account/order' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limit;
        $config['num_links'] = 1;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $data['sTT'] = $start + 1;
        $apply = $this->uri->segment(4);
        $id_order = $this->uri->segment(5);
        if ($apply && $apply == 'apply') {
            if ($this->order_model->update(array('status_use' => 2), 'id = ' . $id_order)) {
                redirect(base_url() . 'account/order/coupon', 'location');
            }
        }
        #Fetch record system/application/models/af_order_model.php
        // $data['status_order'] = $this->af_order_model->getStatus();
        $this->db->select('status_id, text');
        $this->db->from('tbtt_status');
        $this->db->where('published', 1);
        $this->db->order_by("status_id", "asc");
        // Get the results
        $query = $this->db->get();
        $temp_result = $query->result_array();
        $data['status_order'] = $temp_result;
        $params['is_count'] = false;
        $data['ismyorder'] = $this->order_model->get('*', 'order_saler = ' . (int)$this->session->userdata('sessionUser'));
        $data['showcart'] = $this->order_model->list_order_by_id_shop($params, $data['viewbyparent']);
        $data['params'] = $params;

        #Load view
        $this->load->view('home/account/showcart/order_bran', $data);
    }

    function user_order_detail()
    {
        $group_id = $this->session->userdata('sessionGroup');

        // if ($group_id == AffiliateStoreUser
        //     || $group_id == AffiliateUser
        //     || $group_id == BranchUser
        //     || $group_id == NormalUser
        // ) {
        // } else {
        //     redirect(base_url() . "account", 'location');
        //     die();
        // }

        #BEGIN: Delete
        if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
            $this->showcart_model->delete($this->input->post('checkone'), "shc_id", (int)$this->session->userdata('sessionUser'), "shc_buyer");
            redirect(base_url() . trim(uri_string(), '/'), 'location');
        }
        #END Delete
        $data['successAddShowcart'] = '';
        if ($this->session->flashdata('sessionSuccessAddShowcart')) {
            $data['successAddShowcart'] = $this->session->flashdata('sessionSuccessAddShowcart');
        }
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
	    $data['menuPanelGroup'] = 2;
        $data['menuSelected'] = 'showcart';
        $data['menuType'] = 'account';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar
        $action = array('search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #BEGIN: Search & Filter
        $where = "shc_saler = " . (int)$this->session->userdata('sessionUser').' AND `tbtt_showcart`.`shc_orderid` = '.(int)$this->uri->segment(3);
        $sort = "id";
        $by = "DESC";
        $sortUrl = '';
        $pageSort = '';
        $pageUrl = '';
        $keyword = '';
        #If search
        if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
            $keyword = $this->filter->html($getVar['keyword']);
            switch (strtolower($getVar['search'])) {
                case 'name':
                    $sortUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $pageUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $where .= " AND pro_name LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                    break;
            }
        }
        #If sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "shc_orderid";
                    break;
                case 'order_id':
                    $pageUrl .= '/sort/order_id';
                    $sort = "id";
                    break;
                case 'user':
                    $pageUrl .= '/sort/user';
                    $sort = "use_fullname";
                    break;
                case 'date':
                    $pageUrl .= '/sort/date';
                    $sort = "date";
                    break;
                case 'quantity':
                    $pageUrl .= '/sort/quantity';
                    $sort = "shc_quantity";
                    break;
                case 'saler':
                    $pageUrl .= '/sort/saler';
                    $sort = "use_fullname";
                    break;
                case 'date':
                    $pageUrl .= '/sort/date';
                    $sort = "date";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "id";
            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & Filter
        #Keyword
        $data['keyword'] = $keyword;
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/user_order' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');


        #Count total record
        $params = array(
            'select' => 'tbtt_order.*',
            'where' => $where,
            'sort' => $sort,
            'by' => $by,
            'start' => $start,
            'limit' => settingOtherAccount,
            'is_count' => true,
            'order_id' => $this->uri->segment(3),
            'id_user' => $this->session->userdata('sessionUser'),
            'username' => $this->input->post('username') ? $this->input->post('username') : NULL,
            'shc_buyer' => $this->session->userdata('sessionUser')
        );

        $totalRecord = $this->order_model->list_order_by_id_shop($params);
        $config['base_url'] = base_url() . 'account/user_order_detail' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $data['sTT'] = $start + 1;
        #Fetch record
        $select = "tbtt_shop.*, tbtt_order.*, tbtt_user.use_fullname";

        $params['is_count'] = false;

        $data['showcart'] = $this->order_model->list_order_by_id_shop($params);

        //$orders = $this->order_model->list_order_by_id_user($params);        
        $data['params'] = $params;
        //$data['orders'] = $orders;
        $products = $this->showcart_model->get_products_by_order_user($params['order_id'], $params['shc_buyer'],true);
        
        $data['products'] = $products;
        $data['info_user_recivce'] = $this->order_model->getUser_receive_info($params['order_id']);
        $data['statuses'] = $this->user_model->get_list_statuses(); 
        #Load view
        $this->load->view('home/account/showcart/user_order_detail', $data);
    }

    function user_order()
    {
        $group_id = $this->session->userdata('sessionGroup');
        // if ($group_id == AffiliateStoreUser
        //     || $group_id == NormalUser
        //     || $group_id == AffiliateUser
        // ){} else {
        //     redirect(base_url() . "account", 'location');
        //     die();
        // }

        #BEGIN: Delete
        if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
            $this->showcart_model->delete($this->input->post('checkone'), "shc_id", (int)$this->session->userdata('sessionUser'), "shc_buyer");
            redirect(base_url() . trim(uri_string(), '/'), 'location');
        }
        #END Delete
        $data['successAddShowcart'] = '';
        if ($this->session->flashdata('sessionSuccessAddShowcart')) {
            $data['successAddShowcart'] = $this->session->flashdata('sessionSuccessAddShowcart');
        }
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
	    $data['menuPanelGroup'] = 2;
        $data['menuSelected'] = 'showcart';
        $data['menuType'] = 'account';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar
        $segment = $this->uri->segment(3);
        $title_show = '';
        if($segment == 'product'){
            $pro_type = 0;
            $title_show = 'sản phẩm';            
        }else{
            if($segment == 'coupon'){
                $pro_type = 2;
                $title_show = 'coupon';
            }else{
                $pro_type = '0,2';
                $title_show = 'sản phẩm và coupon';
            }
        }
        $action = array('search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(4, $action);
        #BEGIN: Search & Filter
        $where = "order_user = " . (int)$this->session->userdata('sessionUser');
        $sort = "id";
        $by = "DESC";
        $sortUrl = '';
        $pageSort = '';
        $pageUrl = '';
        $keyword = '';
        #If search
        if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
            $keyword = $this->filter->html($getVar['keyword']);
            switch (strtolower($getVar['search'])) {
                case 'name':
                    $sortUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $pageUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $where .= " AND pro_name LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                    break;
            }
        }
        #If sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "id";
                    break;
                case 'order_id':
                    $pageUrl .= '/sort/order_id';
                    $sort = "id";
                    break;
                case 'user':
                    $pageUrl .= '/sort/user';
                    $sort = "use_fullname";
                    break;
                case 'date':
                    $pageUrl .= '/sort/date';
                    $sort = "date";
                    break;
                case 'quantity':
                    $pageUrl .= '/sort/quantity';
                    $sort = "shc_quantity";
                    break;
                case 'saler':
                    $pageUrl .= '/sort/saler';
                    $sort = "use_fullname";
                    break;
                case 'date':
                    $pageUrl .= '/sort/date';
                    $sort = "date";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "id";
            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & Filter
        #Keyword
        $data['keyword'] = $keyword;
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/user_order' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        $protype = $this->input->post('pro_type');
        #END Create link sort
        $orderid_apply = $_REQUEST['apply'] ? (int)$_REQUEST['apply'] : '';
        if ($orderid_apply > 0) {
            $this->order_model->update(array('status_use' => 1), 'id = ' . $orderid_apply);
            redirect(base_url() . "account/user_order", 'location');
        }
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $params = array(
            'select' => '*',
            'where' => $where,
            'sort' => $sort,
            'by' => $by,
            'start' => $start,
            'limit' => settingOtherAccount,
            'is_count' => true,
            'order_id' => $this->input->post('order_id') ? $this->input->post('order_id') : NULL,
            'username' => $this->input->post('username') ? $this->input->post('username') : NULL,
            'pro_type' => $protype,
            'id_user' => $this->session->userdata('sessionUser')
        );
        $totalRecord = $this->order_model->list_order_by_id_user($params);
        $config['base_url'] = base_url() . 'account/user_order' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $data['sTT'] = $start + 1;
        #Fetch record
        $select = "tbtt_shop.*, tbtt_order.*, tbtt_user.use_fullname";
        $params['is_count'] = false;

        //$data['showcart'] = $this->order_model->list_order_by_id_shop($params);

        //$orders = $this->order_model->list_order_by_id_user($params);
        // $slet = 'SELECT tbtt_order.*, ord_sname, ord_saddress, ord_province, shc_status, pro_name, pro_sku, pro_descr, pro_cost, pro_image, pro_dir FROM (tbtt_order) INNER JOIN tbtt_user_receive ON tbtt_user_receive.order_id = tbtt_order.id INNER JOIN tbtt_showcart ON tbtt_showcart.shc_orderid = tbtt_order.id INNER JOIN tbtt_product ON tbtt_product.pro_id = tbtt_showcart.shc_product WHERE `order_user` =784 ORDER BY tbtt_order.id DESC ';
        $slc = 'dp_images,shc_dp_pro_id,sho_link, domain,tbtt_order.*, ord_sname, ord_saddress, ord_province,shc_status, tbtt_product.pro_id, tbtt_product.pro_name, tbtt_product.pro_category, pro_sku, pro_descr, pro_cost, pro_image, pro_dir, pro_type, tbtt_product.af_amt, tbtt_product.af_rate, is_product_affiliate';
        $table1 = 'tbtt_user_receive';
        $join1 = 'INNER';
        $on1 = 'tbtt_user_receive.order_id = tbtt_order.id';
        $table2 = 'tbtt_showcart';
        $join2 = 'INNER';
        $on2 = 'tbtt_showcart.shc_orderid = tbtt_order.id';
        $table3 = 'tbtt_product';
        $join3 = 'INNER';
        $on3 = 'tbtt_product.pro_id = tbtt_showcart.shc_product';
        $table4 = 'tbtt_shop';
        $join4 = 'LEFT';
        $on4 = 'tbtt_showcart.shc_saler = tbtt_shop.sho_user';
        $table5 = 'tbtt_detail_product';
        $join5 = 'LEFT';
        $on5 = 'tbtt_detail_product.id = shc_dp_pro_id';
        if ($params['order_id'] != '') {
            $where .= " and tbtt_order.id = " . $params['order_id'];
        }
        $where .= " and tbtt_product.pro_type IN(" . $pro_type.")";
        $orders = $this->order_model->fetch_join6($slc, $join1, $table1, $on1, $join2, $table2, $on2, $join3, $table3, $on3, $join4, $table4, $on4, $where, 'tbtt_order.id', 'DESC', $start, -1, false, $join5, $table5, $on5);
        // $orders = $this->order_model->fetch_join4($slc, $join1, $table1, $on1, $join2, $table2, $on2, $join3, $table3, $on3, 'order_user = ' . (int)$this->session->userdata('sessionUser'), 'tbtt_order.id', 'DESC', $start, -1);
        $data['af_get_key'] = $this->user_model->get('*', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
        $data['params'] = $params;
        $data['orders'] = $orders;
        $data['title_show'] = $title_show;
        $data['pro_type'] = $pro_type;
        #Load view
        $this->load->view('home/account/showcart/user_order', $data);
    }

    function customer()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser || $group_id == AffiliateUser || $group_id == BranchUser) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        #BEGIN: Delete
        if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
            $this->showcart_model->delete($this->input->post('checkone'), "shc_id", (int)$this->session->userdata('sessionUser'), "shc_buyer");
            redirect(base_url() . trim(uri_string(), '/'), 'location');
        }
        #END Delete
        $data['successAddShowcart'] = '';
        if ($this->session->flashdata('sessionSuccessAddShowcart')) {
            $data['successAddShowcart'] = $this->session->flashdata('sessionSuccessAddShowcart');
        }
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'showcart';
        $data['menuType'] = 'account';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar
        $action = array('search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #BEGIN: Search & Filter


        $tree = array();
        $tree[] = (int)$this->session->userdata('sessionUser');
        if ($this->session->userdata('sessionGroup') == StaffStoreUser) {
            $getp = $this->user_model->fetch('use_id,parent_id', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
            $tree[] = (int)$getp[0]->parent_id;
        }
        $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . BranchUser . ',' . StaffStoreUser . ') AND use_status = 1 AND parent_id = "' . (int)$this->session->userdata('sessionUser') . '"');
        if (!empty($sub_tructiep)) {
            foreach ($sub_tructiep as $key => $value) {
                //Nếu là chi nhánh, lấy danh sách nhân viên
                if ($value->use_group == StaffStoreUser) {
                    //Lấy danh sách CN dưới nó cua NVGH
                    $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_cn)) {
                        foreach ($sub_cn as $k => $vlue) {
                            $tree[] = $vlue->use_id;
                        }
                    }
                } else {
                    $tree[] = $value->use_id;
                }
            }
        }
        $id = implode(",", $tree);
        $where = 'tbtt_showcart.shc_saler IN(' . $id . ')';

        $sort = "order_user";
        $by = "DESC";
        $sortUrl = '';
        $pageSort = '';
        $pageUrl = '';
        $keyword = '';
        #If search
        if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
            $keyword = $this->filter->html($getVar['keyword']);
            switch (strtolower($getVar['search'])) {
                case 'name':
                    $sortUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $pageUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $where .= " AND pro_name LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                    break;
            }
        }
        #If sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "order_user";
                    break;
                case 'user_id':
                    $pageUrl .= '/sort/user_id';
                    $sort = "use_username";
                    break;
                case 'fullname':
                    $pageUrl .= '/sort/fullname';
                    $sort = "use_fullname";
                    break;
                case 'cost':
                    $pageUrl .= '/sort/cost';
                    $sort = "pro_cost";
                    break;
                case 'counter':
                    $pageUrl .= '/sort/counter';
                    $sort = "count_order";
                    break;
                case 'saler':
                    $pageUrl .= '/sort/saler';
                    $sort = "use_fullname";
                    break;
                case 'date':
                    $pageUrl .= '/sort/date';
                    $sort = "date";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "id";
            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & Filter
        #Keyword
        $data['keyword'] = $keyword;
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/customer' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');

        #Count total record
        $limit = settingOtherAccount;
        $params = array(
            'select' => 'DISTINCT tbtt_order.order_user,id, count(tbtt_order.order_user) as count_order, use_id, use_username, use_email, use_address, use_fullname, use_mobile ',
            'shc_saler' => $this->session->userdata('sessionUser'),
            'where' => $where,
            'sort' => $sort,
            'by' => $by,
            'start' => $start,
            'limit' => settingOtherAccount,
            'is_count' => true,
            'use_username' => $this->input->post('use_username') != '' ? $this->input->post('use_username') : NULL,
            'use_fullname' => $this->input->post('use_fullname') != '' ? $this->input->post('use_fullname') : NULL,
            'mobile' => $this->input->post('mobile') != '' ? $this->input->post('mobile') : NULL,
        );

        $totalRecord = $this->showcart_model->get_customers($params);
        $config['base_url'] = base_url() . 'account/customer' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $data['sTT'] = $start + 1;
        #Fetch record
        $select = "tbtt_shop.*, tbtt_order.*, tbtt_user.use_fullname";
        $params['is_count'] = false;
        $customers = $this->showcart_model->get_customers($params);
        $data['customers'] = $customers;
        $data['params'] = $params;
        $arr = array();
        foreach ($customers as $customer) {
            $countId = 0;
            $params = array(
                'select' => 'DISTINCT id',
                'where' => 'tbtt_showcart.shc_saler IN(' . $id . ') and order_user = ' . $customer->order_user,
                'group_by' => 'order_user,id,shc_saler'
            );
            $count_orders = $this->showcart_model->get_customers($params);
            foreach ($count_orders as $count_order) {
                $countId++;
            }
            $arr[$customer->order_user] = $countId;
        }
        $data['arrCount'] = $arr;
        #Load view
        $this->load->view('home/account/showcart/customer', $data);
    }

    function list_orders()
    {
        $shc_buyer = (int)$this->uri->segment(4);

        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser || $group_id == AffiliateUser || $group_id == BranchUser) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }


        #BEGIN: Delete
        if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
            $this->showcart_model->delete($this->input->post('checkone'), "shc_id", (int)$this->session->userdata('sessionUser'), "shc_buyer");
            redirect(base_url() . trim(uri_string(), '/'), 'location');
        }
        #END Delete
        $data['successAddShowcart'] = '';
        if ($this->session->flashdata('sessionSuccessAddShowcart')) {
            $data['successAddShowcart'] = $this->session->flashdata('sessionSuccessAddShowcart');
        }
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuSelected'] = 'showcart';
        $data['menuType'] = 'account';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar
        $action = array('search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #BEGIN: Search & Filter
        $where = "shc_saler = " . (int)$this->session->userdata('sessionUser');


        $tree = array();
        $tree[] = (int)$this->session->userdata('sessionUser');
        if ($this->session->userdata('sessionGroup') == StaffStoreUser) {
            $getp = $this->user_model->fetch('use_id,parent_id', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
            $tree[] = (int)$getp[0]->parent_id;
        }
        $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . BranchUser . ',' . StaffStoreUser . ') AND use_status = 1 AND parent_id = "' . $this->session->userdata('sessionUser') . '"');
        if (!empty($sub_tructiep)) {
            foreach ($sub_tructiep as $key => $value) {
                //Nếu là chi nhánh, lấy danh sách nhân viên

                if ($value->use_group == StaffStoreUser) {
                    //Lấy danh sách CN dưới nó cua NVGH
                    $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_cn)) {
                        foreach ($sub_cn as $k => $vlue) {
                            $tree[] = $vlue->use_id;
                        }
                    }
                } else {
                    $tree[] = $value->use_id;
                }
            }
        }
        $id = implode(",", $tree);
        $where = 'tbtt_showcart.shc_saler IN(' . $id . ')';

        $sort = "shc_orderid";
        $by = "DESC";
        $sortUrl = '';
        $pageSort = '';
        $pageUrl = '';
        $keyword = '';
        #If search
        if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
            $keyword = $this->filter->html($getVar['keyword']);
            switch (strtolower($getVar['search'])) {
                case 'name':
                    $sortUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $pageUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $where .= " AND pro_name LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                    break;
            }
        }
        #If sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "shc_orderid";
                    break;
                case 'user_id':
                    $pageUrl .= '/sort/user_id';
                    $sort = "shc_saler";
                    break;
                case 'fullname':
                    $pageUrl .= '/sort/fullname';
                    $sort = "use_fullname";
                    break;
                case 'cost':
                    $pageUrl .= '/sort/cost';
                    $sort = "pro_cost";
                    break;
                case 'counter':
                    $pageUrl .= '/sort/counter';
                    $sort = "count_order";
                    break;
                case 'saler':
                    $pageUrl .= '/sort/saler';
                    $sort = "use_fullname";
                    break;
                case 'date':
                    $pageUrl .= '/sort/date';
                    $sort = "date";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "id";
            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & Filter
        #Keyword
        $data['keyword'] = $keyword;
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/customer' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');

        #Count total record
        $limit = settingOtherAccount;
        $params = array(
            'select' => 'tbtt_showcart.*, tbtt_order.*, tbtt_user.use_id, tbtt_user.use_username, tbtt_user.use_fullname',
            'shc_saler' => $where,
            'where' => $where,
            'sort' => $sort,
            'by' => $by,
            'start' => $start,
            'limit' => settingOtherAccount,
            'is_count' => true,
            'use_username' => $this->input->post('use_username') != '' ? $this->input->post('use_username') : NULL,
            'use_fullname' => $this->input->post('use_fullname') != '' ? $this->input->post('use_fullname') : NULL,
            'mobile' => $this->input->post('mobile') != '' ? $this->input->post('mobile') : NULL,
            'shc_buyer' => $shc_buyer
        );

        $totalRecord = 0;//$this->showcart_model->get_customers($params);
        $config['base_url'] = base_url() . 'account/customer' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $data['sTT'] = $start + 1;
        #Fetch record
        $select = "tbtt_shop.*, tbtt_order.*, tbtt_user.use_fullname";

        $params['is_count'] = false;


        //$data['customers'] = $this->showcart_model->get_customers($params);
        $data['params'] = $params;

        $data['orders'] = $this->showcart_model->get_orders_by_user($params);
        $data['order_url'] = $this->uri->uri_string();
        #Load view
        $this->load->view('home/account/showcart/list_orders', $data);
    }

    /*
    (c) sunguyen@icsc
        sunguyen da bo ham nay
    */
    function customer_old()
    {
        #BEGIN: CHECK GROUP

        if ((int)$this->session->userdata('sessionGroup') == 1) {
            redirect(base_url() . 'account', 'location');
            die();
        }
        #END CHECK GROUP

        #BEGIN: Delete - update status
        if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
            $idCheckOne = implode(',', $this->input->post('checkone'));
            $this->showcart_model->update(array('shc_status' => 0), "shc_id IN($idCheckOne) AND shc_saler = " . (int)$this->session->userdata('sessionUser'));
            redirect(base_url() . trim(uri_string(), '/'), 'location');
        }
        #END Delete - update status

        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuSelected'] = 'customer';
        $data['menuType'] = 'account';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar
        $action = array('search', 'keyword', 'sort', 'by', 'process', 'id', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #BEGIN: Search & Filter
        $where = "shc_status = 1 AND shc_saler = " . (int)$this->session->userdata('sessionUser');
        $sort = "shc_id";
        $by = "DESC";
        $sortUrl = '';
        $pageSort = '';
        $pageUrl = '';
        $keyword = '';
        #If search
        if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
            $keyword = $this->filter->html($getVar['keyword']);
            switch (strtolower($getVar['search'])) {
                case 'customer':
                    $sortUrl .= '/search/customer/keyword/' . $getVar['keyword'];
                    $pageUrl .= '/search/customer/keyword/' . $getVar['keyword'];
                    $where .= " AND use_fullname LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                    break;
            }
        }
        #If sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'customer':
                    $pageUrl .= '/sort/customer';
                    $sort = "use_fullname";
                    break;
                case 'product':
                    $pageUrl .= '/sort/product';
                    $sort = "pro_name";
                    break;
                case 'cost':
                    $pageUrl .= '/sort/cost';
                    $sort = "pro_cost";
                    break;
                case 'quantity':
                    $pageUrl .= '/sort/quantity';
                    $sort = "shc_quantity";
                    break;
                case 'buydate':
                    $pageUrl .= '/sort/buydate';
                    $sort = "shc_buydate";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "shc_id";
            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & Filter
        #Keyword
        $data['keyword'] = $keyword;
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/customer' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Process
        $processUrl = $pageUrl . $pageSort;
        $data['processUrl'] = base_url() . 'account/customer' . $processUrl;
        if ($getVar['process'] != FALSE && trim($getVar['process']) != '' && $getVar['id'] != FALSE && (int)$getVar['id'] > 0) {
            switch (strtolower($getVar['process'])) {
                case 'active':
                    $this->showcart_model->update(array('shc_process' => 1), "shc_id = " . (int)$getVar['id'] . " AND shc_saler = " . (int)$this->session->userdata('sessionUser'));
                    break;
                case 'deactive':
                    $this->showcart_model->update(array('shc_process' => 0), "shc_id = " . (int)$getVar['id'] . " AND shc_saler = " . (int)$this->session->userdata('sessionUser'));
                    break;
            }
            redirect($data['processUrl'], 'location');
        }
        #END Process
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $totalRecord = count($this->showcart_model->fetch_join("shc_id", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", "LEFT", "tbtt_user", "tbtt_showcart.shc_buyer = tbtt_user.use_id", $where, "", ""));
        $config['base_url'] = base_url() . 'account/customer' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $data['sTT'] = $start + 1;
        #Fetch record
        $select = "shc_id, shc_buydate, shc_process, shc_quantity, pro_id, pro_name, pro_descr, pro_dir, pro_image, pro_category, pro_cost, pro_currency, pro_view, use_fullname, use_email, use_phone";
        $limit = settingOtherAccount;
        $data['customer'] = $this->showcart_model->fetch_join($select, "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", "LEFT", "tbtt_user", "tbtt_showcart.shc_buyer = tbtt_user.use_id", $where, $sort, $by, $start, $limit);
        #Load view
        $this->load->view('home/account/showcart/customer', $data);
    }

    function lichsugiaodich()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'naptien';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter

        $this->load->model('uptin_model');
        $user_id = (int)$this->session->userdata('sessionUser');
        $data['balance'] = $this->uptin_model->getBalanceByUserId((int)$this->session->userdata('sessionUser'));
        $data['lichsugiaodich'] = $this->uptin_model->getgiaodich("*", "and user_id=$user_id", "date_time", "DESC");

        $subtract = 0;
        $add = 0;

        foreach ($data['lichsugiaodich'] as $giaodich) {
            if ($giaodich->prefix == '-') {
                $subtract = $subtract + $giaodich->amount;
            }
            if ($giaodich->prefix == '+') {
                $add = $add + $giaodich->amount;
            }
        }
        $data['add'] = $add;
        $data['subtract'] = $subtract;
        $this->load->view('home/account/uptin/lichsugiaodich', $data);
    }

    function danhsachdondathangnoptien()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $this->load->model('nap_tien_model');

        if ($this->uri->segment(3) == "active") {

            $this->nap_tien_model->update(array('soh_confirmed' => 1), "soh_id = " . (int)$this->uri->segment(4));
            redirect(base_url() . "account/danhsachnaptien", 'location');

        }
        if ($this->uri->segment(3) == "deactive") {

            $this->nap_tien_model->update(array('soh_confirmed' => 0), "soh_id = " . (int)$this->uri->segment(4));
            redirect(base_url() . "account/danhsachnaptien", 'location');

        }
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'naptien';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        $this->load->model('uptin_model');
        $user_id = (int)$this->session->userdata('sessionUser');
        $this->load->model('nap_tien_model');
        $data['balance'] = $this->uptin_model->getBalanceByUserId((int)$this->session->userdata('sessionUser'));
        $data['lichsugiaodich'] = $this->nap_tien_model->fetch("*", "soh_userid = " . $user_id, "soh_id", "DESC");
        $data['tongtienthanhtoan'] = $this->nap_tien_model->get(" SUM(soh_money) as tongtien ", "soh_userid = " . $user_id);
        $subtract = 0;
        $add = 0;
        $data['add'] = $add;
        $data['subtract'] = $subtract;
        $this->load->view('home/account/uptin/danhsachnaptien', $data);
    }

    function naptien_baokim()
    {
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'naptien';
        $this->load->view('home/account/naptien/baokim', $data);
    }

    function process_baokim()
    {
        $this->load->model('baokim_model');
        $this->load->model('uptin_model');
        $order_id = '18giay' . time();
        $this->session->set_flashdata('order_id', $order_id);
        $total_amount = $this->input->post('total_amount');
        $order_description = $this->lang->line("Thanh Toan qua BaoKim");
        $url_success = base_url() . "account/verifyresponse_baokim/";
        $url_cancel = base_url() . "account/fail_transaction_baokim/";
        $url_detail = "";
        $url = $this->baokim_model->createRequestUrl($order_id, $total_amount, $shipping_fee, $tax_fee, $order_description, $url_success, $url_cancel, $url_detail);
        $result = $this->baokim_model->verifyResponseUrl();
        redirect($url);
    }

    function verifyresponse_baokim()
    {
        parse_str($_SERVER['QUERY_STRING'], $_GET);
        $order_id = $_GET['order_id'];
        // echo "<pre>";print_r($_GET);echo "</pre>";
        /*echo "<pre>";print_r($this->session->flashdata('order_id'));echo "</pre>";
        echo "<pre>";print_r($_GET['order_id']);echo "</pre>";
        die();*/
        //if($order_id != $this->session->flashdata('order_id'))
        //redirect(base_url()."account/fail_transaction_baokim/");
        $this->load->model('baokim_model');
        $this->load->model('uptin_model');
        $transaction_status = $_GET['transaction_status'];
        if ($this->baokim_model->verifyResponseUrl($_GET) && $transaction_status == 4) {
            $net_amount = round($_GET['net_amount'] / 10000);
            $fee_amount = $_GET['fee_amount'];
            $transaction_id = $_GET['transaction_id'];
            //Mot so thong tin khach hang khac
            $customer_name = $_GET['customer_name'];
            $customer_address = $_GET['customer_address'];
            $username = $this->session->userdata('sessionUsername');
            //  echo "<pre>".$net_amount." va ";print_r($username);echo "</pre>";die();
            $return = $this->uptin_model->insertWallet($username, (int)$net_amount, $this->lang->line('NAPTIENBK'));

            if ($return)
                redirect(base_url() . "account/baokim_success/");
            else redirect(base_url() . "account/fail_transaction_baokim/");
        } else
            // echo "<pre>new";print_r($_GET);echo "</pre>";die();
            redirect(base_url() . "account/fail_transaction_baokim/");

    }

    function baokim_success()
    {
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'naptien';
        $this->load->view('home/account/naptien/baokim_success', $data);
    }

    function fail_transaction_baokim()
    {
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'naptien';
        $this->load->view('home/account/naptien/baokim_fail', $data);
    }

    function showcart()
    {
        #BEGIN: Delete
        if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
            $this->showcart_model->delete($this->input->post('checkone'), "shc_id", (int)$this->session->userdata('sessionUser'), "shc_buyer");
            redirect(base_url() . trim(uri_string(), '/'), 'location');
        }
        #END Delete
        $data['successAddShowcart'] = '';
        if ($this->session->flashdata('sessionSuccessAddShowcart')) {
            $data['successAddShowcart'] = $this->session->flashdata('sessionSuccessAddShowcart');
        }
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuSelected'] = 'showcart';
        $data['menuType'] = 'account';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar
        $action = array('search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #BEGIN: Search & Filter
        $where = "shc_buyer = " . (int)$this->session->userdata('sessionUser');
        $sort = "shc_id";
        $by = "DESC";
        $sortUrl = '';
        $pageSort = '';
        $pageUrl = '';
        $keyword = '';
        #If search
        if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
            $keyword = $this->filter->html($getVar['keyword']);
            switch (strtolower($getVar['search'])) {
                case 'name':
                    $sortUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $pageUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $where .= " AND pro_name LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                    break;
            }
        }
        #If sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "pro_name";
                    break;
                case 'cost':
                    $pageUrl .= '/sort/cost';
                    $sort = "pro_cost";
                    break;
                case 'quantity':
                    $pageUrl .= '/sort/quantity';
                    $sort = "shc_quantity";
                    break;
                case 'saler':
                    $pageUrl .= '/sort/saler';
                    $sort = "use_fullname";
                    break;
                case 'buydate':
                    $pageUrl .= '/sort/buydate';
                    $sort = "shc_buydate";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "shc_id";
            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & Filter
        #Keyword
        $data['keyword'] = $keyword;
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/showcart' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $totalRecord = count($this->showcart_model->fetch_join("shc_id", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", "LEFT", "tbtt_user", "tbtt_showcart.shc_saler = tbtt_user.use_id", $where, "", ""));
        $config['base_url'] = base_url() . 'account/showcart' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $data['sTT'] = $start + 1;
        #Fetch record
        $select = "shc_id, shc_buydate, shc_process, shc_quantity, pro_id, pro_name, pro_descr, pro_dir, pro_image, pro_category, pro_cost, pro_currency, pro_view, use_fullname, use_email, use_phone, pro_saleoff, pro_saleoff_value, pro_type_saleoff";
        $limit = settingOtherAccount;
        $data['showcart'] = $this->showcart_model->fetch_join($select, "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", "LEFT", "tbtt_user", "tbtt_showcart.shc_saler = tbtt_user.use_id", $where, $sort, $by, $start, $limit);
        #Load view
        $this->load->view('home/account/showcart/showcart', $data);
    }

    function order_temp()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == NormalUser || $group_id == AffiliateStoreUser) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        #BEGIN: Delete
        if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
            $this->showcart_model->delete($this->input->post('checkone'), "shc_id", (int)$this->session->userdata('sessionUser'), "shc_buyer");
            redirect(base_url() . trim(uri_string(), '/'), 'location');
        }
        #END Delete
        $data['successAddShowcart'] = '';
        if ($this->session->flashdata('sessionSuccessAddShowcart')) {
            $data['successAddShowcart'] = $this->session->flashdata('sessionSuccessAddShowcart');
        }
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuSelected'] = 'showcart';
        $data['menuType'] = 'account';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Menu
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar
        $action = array('search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #BEGIN: Search & Filter
        $where = "order_user = " . (int)$this->session->userdata('sessionUser');
        $sort = "id";
        $by = "DESC";
        $sortUrl = '';
        $pageSort = '';
        $pageUrl = '';
        $keyword = '';
        #If search
        if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
            $keyword = $this->filter->html($getVar['keyword']);
            switch (strtolower($getVar['search'])) {
                case 'name':
                    $sortUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $pageUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $where .= " AND pro_name LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                    break;
            }
        }
        #If sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "id";
                    break;
                case 'cost':
                    $pageUrl .= '/sort/cost';
                    $sort = "pro_cost";
                    break;
                case 'quantity':
                    $pageUrl .= '/sort/quantity';
                    $sort = "shc_quantity";
                    break;
                case 'saler':
                    $pageUrl .= '/sort/saler';
                    $sort = "use_fullname";
                    break;
                case 'buydate':
                    $pageUrl .= '/sort/buydate';
                    $sort = "shc_buydate";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "id";
            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & Filter
        #Keyword
        $data['keyword'] = $keyword;
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/order' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $totalRecord = count($this->order_model->fetch_join($select, "LEFT", "tbtt_shop", "tbtt_shop.sho_user  = tbtt_order.order_user", $where, $sort, $by, $start, $limit));
        $config['base_url'] = base_url() . 'account/order' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $data['sTT'] = $start + 1;
        #Fetch record
        $select = "*";
        $limit = settingOtherAccount;
        $data['showcart'] = $this->order_model->fetch_join($select, "LEFT", "tbtt_shop", "tbtt_shop.sho_user  = tbtt_order.order_user", $where, $sort, $by, $start, $limit);

        #Load view
        $this->load->view('home/account/showcart/order', $data);
    }

    function ajax()
    {
        $this->load->library('hash');
        if ($this->input->post('id') && $this->check->is_id($this->input->post('id')) && $this->input->post('enddate') && $this->input->post('token') && $this->input->post('token') == $this->hash->create($this->session->userdata('sessionUser'))) {
            $id = (int)$this->input->post('id');
            $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
            $endDate = explode('-', $this->input->post('enddate'));
            if (isset($endDate[0]) && isset($endDate[1]) && isset($endDate[2])) {
                $endDate = mktime(0, 0, 0, $endDate[1], $endDate[0], $endDate[2]);
            } else {
                $endDate = $currentDate;
            }
            $maxDate = $currentDate + (6 * 31 * 24 * 3600);#6 month
            switch ((int)$this->input->post('type')) {
                case 2:
                    $ads = $this->ads_model->get("ads_id", "ads_id = $id AND ads_user = " . (int)$this->session->userdata('sessionUser'));
                    if (count($ads) == 1) {
                        if ($endDate > $currentDate) {
                            if ($endDate > $maxDate) {
                                $endDate = $maxDate;
                            }
                            $this->ads_model->update(array('ads_enddate' => (int)$endDate), "ads_id = $id AND ads_user = " . (int)$this->session->userdata('sessionUser'));
                        }
                    }
                    break;
                case 3:
                    $this->load->model('job_model');
                    $job = $this->job_model->get("job_id", "job_id = $id AND job_user = " . (int)$this->session->userdata('sessionUser'));
                    if (count($job) == 1) {
                        if ($endDate > $currentDate) {
                            if ($endDate > $maxDate) {
                                $endDate = $maxDate;
                            }
                            $this->job_model->update(array('job_enddate' => (int)$endDate), "job_id = $id AND job_user = " . (int)$this->session->userdata('sessionUser'));
                        }
                    }
                    break;
                case 4:
                    $this->load->model('employ_model');
                    $employ = $this->employ_model->get("emp_id", "emp_id = $id AND emp_user = " . (int)$this->session->userdata('sessionUser'));
                    if (count($employ) == 1) {
                        if ($endDate > $currentDate) {
                            if ($endDate > $maxDate) {
                                $endDate = $maxDate;
                            }
                            $this->employ_model->update(array('emp_enddate' => (int)$endDate), "emp_id = $id AND emp_user = " . (int)$this->session->userdata('sessionUser'));
                        }
                    }
                    break;
                default:
                    $this->load->model('product_model');
                    $product = $this->product_model->get("pro_id", "pro_id = $id AND pro_user = " . (int)$this->session->userdata('sessionUser'));
                    if (count($product) == 1) {
                        if ($endDate > $currentDate) {
                            if ($endDate > $maxDate) {
                                $endDate = $maxDate;
                            }
                            $this->product_model->update(array('pro_enddate' => (int)$endDate), "pro_id = $id AND pro_user = " . (int)$this->session->userdata('sessionUser'));
                        }
                    }
            }
        } else {
            show_404();
        }
    }


    function _is_phone($str)
    {
        if ($this->check->is_phone($str)) {
            return true;
        }
        return false;
    }

    function _exist_province($str)
    {
        if (count($this->province_model->get("pre_id", "pre_status = 1 AND pre_id = " . (int)$str)) == 1) {
            return true;
        }
        return false;
    }

    function _exist_district($str)
    {
        $this->load->model('district_model');
        if (count($this->district_model->find_by(array('DistrictCode' => $str), 'DistrictCode'))) {
            return true;
        }
        return false;
    }

    function _exist_email_edit()
    {
        $userId = (int)$this->session->userdata('sessionUser');
        if (count($this->user_model->get("use_id", "use_id != {$userId} AND use_email = '" . trim(strtolower($this->filter->injection_html($this->input->post('email_account')))) . "'")) > 0) {
            return false;
        }
        return true;
    }

    function _valid_captcha_edit($str)
    {
        if ($this->session->flashdata('sessionCaptchaEditAccount') && $this->session->flashdata('sessionCaptchaEditAccount') === $str) {
            return true;
        }
        return false;
    }

    function _valid_captcha_changepassword($str)
    {
        if ($this->session->flashdata('sessionCaptchaChangePasswordAccount') && $this->session->flashdata('sessionCaptchaChangePasswordAccount') === $str) {
            return true;
        }
        return false;
    }

    function _valid_old_password()
    {
        $this->load->library('hash');
        $user = $this->user_model->get("use_password, use_salt", "use_id = " . (int)$this->session->userdata('sessionUser'));
        if ($user->use_password === $this->hash->create($this->input->post('oldpassword_changepass'), $user->use_salt, 'md5sha512')) {
            return true;
        }
        return false;
    }

    function _exist_shop()
    {
        if (count($this->shop_model->get("sho_id", "sho_name = '" . trim($this->filter->injection_html($this->input->post('name_shop'))) . "'")) > 0) {
            return false;
        }
        return true;
    }

    function _exist_link_shop()
    {
        if (count($this->shop_model->get("sho_id", "sho_link = '" . trim(strtolower($this->filter->injection_html($this->input->post('link_shop')))) . "'")) > 0) {
            return false;
        }
        return true;
    }

    function _valid_link_shop($str)
    {
        $reject = array('home', 'product', 'ads', 'job', 'employ', 'defaults', 'shop', 'notify', 'guide', 'add', 'activation', 'post', 'delete', 'edit', 'view', 'register', 'login', 'showcart', 'forgot', 'status', 'sort', 'by', 'contact', 'search', 'account', 'logout', 'adm', 'admi', 'admin', 'admini', 'adminis', 'administ', 'administr', 'administra', 'administrat', 'administrato', 'administrator', 'quantri', 'system', 'media', 'templates', 'index', 'robots', '.htaccess', 'application', 'language', 'vietnamese', 'english', 'model', 'database', 'view', 'js', 'images', 'banners', 'logos');
        foreach ($reject as $rejectArray) {
            if (trim(strtolower($str)) == $rejectArray) {
                return false;
            }
        }
        return true;
    }

    function _valid_website($str)
    {
        if (preg_match('/[^0-9a-z_.-]/i', $str)) {
            return false;
        }
        return true;
    }

    function _valid_captcha_shop($str)
    {
        if ($this->session->flashdata('sessionCaptchaEditShopAccount') && $this->session->flashdata('sessionCaptchaEditShopAccount') === $str) {
            return true;
        }
        return false;
    }

    function _valid_captcha_contact($str)
    {
        if ($this->session->flashdata('sessionCaptchaSendContactAccount') && $this->session->flashdata('sessionCaptchaSendContactAccount') === $str) {
            return true;
        }
        return false;
    }

    function _exist_title_contact()
    {
        $this->load->model('contact_model');
        if (count($this->contact_model->get("con_id", "con_title = '" . trim($this->filter->injection_html($this->input->post('title_contact'))) . "'")) > 0) {
            return false;
        }
        return true;
    }

    function _exist_category($str)
    {
        if (count($this->category_model->get("cat_id", "cat_status = 1 AND cat_id = " . (int)$str)) == 1) {
            return true;
        }
        return false;
    }

    function _valid_nick($str)
    {
        if (preg_match('/[^0-9a-z._-]/i', $str)) {
            return false;
        }
        return true;
    }

    function _valid_enddate_edit_product()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        $endDate = mktime(0, 0, 0, (int)$this->input->post('month_pro'), (int)$this->input->post('day_pro'), (int)$this->input->post('year_pro'));
        if ($this->check->is_more($currentDate, $endDate)) {
            return false;
        }
        return true;
    }

    function _valid_captcha_edit_product($str)
    {
        if ($this->session->flashdata('sessionCaptchaEditProductAccount') && $this->session->flashdata('sessionCaptchaEditProductAccount') === $str) {
            return true;
        }
        return false;
    }

    function _valid_enddate_edit_ads()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        $endDate = mktime(0, 0, 0, (int)$this->input->post('month_ads'), (int)$this->input->post('day_ads'), (int)$this->input->post('year_ads'));
        if ($this->check->is_more($currentDate, $endDate)) {
            return false;
        }
        return true;
    }

    function _valid_captcha_edit_ads($str)
    {
        if ($this->session->flashdata('sessionCaptchaEditAdsAccount') && $this->session->flashdata('sessionCaptchaEditAdsAccount') === $str) {
            return true;
        }
        return false;
    }

    function _valid_age_job_edit()
    {
        $fromAge = (int)$this->input->post('age1_job');
        $toAge = (int)$this->input->post('age2_job');
        if ($this->check->is_more($fromAge, $toAge, false)) {
            return false;
        }
        return true;
    }

    function _exist_field($str)
    {
        if (count($this->field_model->get("fie_id", "fie_status = 1 AND fie_id = " . (int)$str)) == 1) {
            return true;
        }
        return false;
    }

    function _valid_date_job_edit()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        $date = mktime(0, 0, 0, (int)$this->input->post('month_job'), (int)$this->input->post('day_job'), (int)$this->input->post('year_job'));
        if ($this->check->is_more($currentDate, $date)) {
            return false;
        }
        return true;
    }

    function _valid_enddate_job_edit()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        $endDate = mktime(0, 0, 0, (int)$this->input->post('endmonth_job'), (int)$this->input->post('endday_job'), (int)$this->input->post('endyear_job'));
        if ($this->check->is_more($currentDate, $endDate)) {
            return false;
        }
        return true;
    }

    //quang san pham  het han
    function hethan()
    {
        $this->load->model('product_model');
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu 1
        $data['menuSelected'] = 'product';
        $data['menuType'] = 'account';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
        $this->load->model('manufacturer_model');
        $this->load->model('category_model');
        $data['manufacturer_category'] = $this->manufacturer_model->fetch("*");
        $cat_level_0 = $this->category_model->fetch("*", "parent_id = 0 AND cat_status = 1", "cat_order, cat_id", "ASC");
        if (isset($cat_level_0)) {
            foreach ($cat_level_0 as $key => $item) {
                $cat_level_1 = $this->category_model->fetch("*", "parent_id = " . (int)$item->cat_id . " AND cat_status = 1");
                $cat_level_0[$key]->child_count = count($cat_level_1);
            }
        }
        $data['catlevel0'] = $cat_level_0;
        $maxorder = $this->category_model->get("max(cat_order) as maxorder");
        $data['next_order'] = (int)$maxorder->maxorder + 1;
        $maxindex = $this->category_model->get("max(cat_index) as maxindex");
        $data['next_index'] = (int)$maxindex->maxindex + 1;

        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
        #END Menu 1
        #BEGIN: Advertise

        if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
            $this->load->library('file');
            $idCheckOneProduct = implode(',', $this->input->post('checkone'));
            $checkOneProduct = $this->product_model->fetch("pro_id, pro_image, pro_dir", "pro_id IN($idCheckOneProduct) AND pro_user = " . (int)$this->session->userdata('sessionUser'));
            $idProduct = array();
            foreach ($checkOneProduct as $checkOneProductArray) {
                $idProduct[] = $checkOneProductArray->pro_id;
                #Remove image
                if ($checkOneProductArray->pro_image != 'none.gif') {
                    $imageArray = explode(',', $checkOneProductArray->pro_image);
                    foreach ($imageArray as $imageArrays) {
                        if (trim($imageArrays) != '' && file_exists('media/images/product/' . $checkOneProductArray->pro_dir . '/' . $imageArrays)) {
                            @unlink('media/images/product/' . $checkOneProductArray->pro_dir . '/' . $imageArrays);
                        }
                    }
                    for ($i = 1; $i <= 3; $i++) {
                        if (file_exists('media/images/product/' . $checkOneProductArray->pro_dir . '/thumbnail_' . $i . '_' . $imageArray[0])) {
                            @unlink('media/images/product/' . $checkOneProductArray->pro_dir . '/thumbnail_' . $i . '_' . $imageArray[0]);
                        }
                    }
                    if (trim($checkOneProductArray->pro_dir) != '' && is_dir('media/images/product/' . $checkOneProductArray->pro_dir) && count($this->file->load('media/images/product/' . $checkOneProductArray->pro_dir, 'index.html')) == 0) {
                        if (file_exists('media/images/product/' . $checkOneProductArray->pro_dir . '/index.html')) {
                            @unlink('media/images/product/' . $checkOneProductArray->pro_dir . '/index.html');
                        }
                        @rmdir('media/images/product/' . $checkOneProductArray->pro_dir);
                    }
                }
            }


            if (count($idProduct) > 0) {
                $this->load->model('product_favorite_model');
                $this->load->model('product_comment_model');
                $this->load->model('product_bad_model');

                $this->product_favorite_model->delete($idProduct, "prf_product");
                $this->product_comment_model->delete($idProduct, "prc_product");
                $this->product_bad_model->delete($idProduct, "prb_product");
                $this->showcart_model->delete($idProduct, "shc_product");
                $this->product_model->delete($idProduct, "pro_id");
            }


            redirect(base_url() . trim(uri_string(), '/'), 'location');
        }


        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar
        $action = array('edit', 'search', 'keyword', 'sort', 'by', 'status', 'id', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        $this->load->model('product_favorite_model');
        #BEGIN: Menu 2
        $data['menuSelected'] = 'favorite_product';
        #END Menu 2
        #BEGIN: Delete
        if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
            $this->product_favorite_model->delete($this->input->post('checkone'), "prf_id", (int)$this->session->userdata('sessionUser'), "prf_user");
            redirect(base_url() . trim(uri_string(), '/'), 'location');
        }
        #END Delete
        #Define url for $getVar
        $action = array('search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(4, $action);
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Search & sort
        $where = "pro_user = " . (int)$this->session->userdata('sessionUser') . " "; //AND pro_enddate < $currentDate

        $sort = 'pro_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageSort = '';
        $pageUrl = '';
        $keyword = '';
        if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
            $keyword = $this->filter->html($getVar['keyword']);
            switch (strtolower($getVar['search'])) {
                case 'name':
                    $sortUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $pageUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $where .= " AND pro_name LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                    break;
            }
        }
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "pro_name";
                    break;
                case 'cost':
                    $pageUrl .= '/sort/cost';
                    $sort = "pro_cost";
                    break;
                case 'postdate':
                    $pageUrl .= '/sort/postdate';
                    $sort = "pro_begindate";
                    break;
                case 'date':
                    $pageUrl .= '/sort/date';
                    $sort = "pro_date";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "pro_id";
            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #Keyword
        $data['keyword'] = $keyword;
        #BEGIN: Create link sort
        $statusUrl = $pageUrl . $pageSort;
        $data['sortUrl'] = base_url() . 'account/sanpham/hethan' . $sortUrl . '/sort/';
        $data['statusUrl'] = base_url() . 'account/sanpham/hethan' . $statusUrl;
        if ($getVar['status'] != FALSE && trim($getVar['status']) != '' && $getVar['id'] != FALSE && (int)$getVar['id'] > 0) {
            switch (strtolower($getVar['status'])) {
                case 'active':
                    $this->product_model->update(array('pro_status' => 1), "pro_id = " . (int)$getVar['id'] . " AND pro_user = " . (int)$this->session->userdata('sessionUser'));
                    break;
                case 'deactive':
                    $this->product_model->update(array('pro_status' => 0), "pro_id = " . (int)$getVar['id'] . " AND pro_user = " . (int)$this->session->userdata('sessionUser'));
                    break;
            }
            redirect($data['statusUrl'], 'location');
        }

        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $totalRecord = count($this->product_model->fetch_join("pro_id", "LEFT", "tbtt_category", "tbtt_product.pro_category = tbtt_category.cat_id", "", "", "", "", "", "", $where, "", ""));
        $config['base_url'] = base_url() . 'account/sanpham/hethan' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $data['sTT'] = $start + 1;
        #Fetch record
        $select = "pro_id, pro_name, pro_descr, pro_category, pro_dir, pro_image, pro_begindate, pro_enddate, pro_status, pro_view, cat_name";
        $limit = settingOtherAccount;
        $data['product'] = $this->product_model->fetch_join($select, "LEFT", "tbtt_category", "tbtt_product.pro_category = tbtt_category.cat_id", "", "", "", "", "", "", $where, $sort, $by, $start, $limit);
        #Load view       
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
        $this->load->view('home/account/product/hethan', $data);
    }

    //end het han
    //quang san pham khong gia

    function khonggia()
    {
        $this->load->model('product_model');
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu 1
        $data['menuSelected'] = 'product';
        $data['menuType'] = 'account';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
        $this->load->model('manufacturer_model');
        $this->load->model('category_model');
        $data['manufacturer_category'] = $this->manufacturer_model->fetch("*");
        $cat_level_0 = $this->category_model->fetch("*", "parent_id = 0 AND cat_status = 1", "cat_order, cat_id", "ASC");
        if (isset($cat_level_0)) {
            foreach ($cat_level_0 as $key => $item) {
                $cat_level_1 = $this->category_model->fetch("*", "parent_id = " . (int)$item->cat_id . " AND cat_status = 1");
                $cat_level_0[$key]->child_count = count($cat_level_1);
            }
        }
        $data['catlevel0'] = $cat_level_0;
        $maxorder = $this->category_model->get("max(cat_order) as maxorder");
        $data['next_order'] = (int)$maxorder->maxorder + 1;
        $maxindex = $this->category_model->get("max(cat_index) as maxindex");
        $data['next_index'] = (int)$maxindex->maxindex + 1;

        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
        #END Menu 1
        #BEGIN: Advertise

        if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
            $this->load->library('file');
            $idCheckOneProduct = implode(',', $this->input->post('checkone'));
            $checkOneProduct = $this->product_model->fetch("pro_id, pro_image, pro_dir", "pro_id IN($idCheckOneProduct) AND pro_user = " . (int)$this->session->userdata('sessionUser'));
            $idProduct = array();
            foreach ($checkOneProduct as $checkOneProductArray) {
                $idProduct[] = $checkOneProductArray->pro_id;
                #Remove image
                if ($checkOneProductArray->pro_image != 'none.gif') {
                    $imageArray = explode(',', $checkOneProductArray->pro_image);
                    foreach ($imageArray as $imageArrays) {
                        if (trim($imageArrays) != '' && file_exists('media/images/product/' . $checkOneProductArray->pro_dir . '/' . $imageArrays)) {
                            @unlink('media/images/product/' . $checkOneProductArray->pro_dir . '/' . $imageArrays);
                        }
                    }
                    for ($i = 1; $i <= 3; $i++) {
                        if (file_exists('media/images/product/' . $checkOneProductArray->pro_dir . '/thumbnail_' . $i . '_' . $imageArray[0])) {
                            @unlink('media/images/product/' . $checkOneProductArray->pro_dir . '/thumbnail_' . $i . '_' . $imageArray[0]);
                        }
                    }
                    if (trim($checkOneProductArray->pro_dir) != '' && is_dir('media/images/product/' . $checkOneProductArray->pro_dir) && count($this->file->load('media/images/product/' . $checkOneProductArray->pro_dir, 'index.html')) == 0) {
                        if (file_exists('media/images/product/' . $checkOneProductArray->pro_dir . '/index.html')) {
                            @unlink('media/images/product/' . $checkOneProductArray->pro_dir . '/index.html');
                        }
                        @rmdir('media/images/product/' . $checkOneProductArray->pro_dir);
                    }
                }
            }


            if (count($idProduct) > 0) {
                $this->load->model('product_favorite_model');
                $this->load->model('product_comment_model');
                $this->load->model('product_bad_model');

                $this->product_favorite_model->delete($idProduct, "prf_product");
                $this->product_comment_model->delete($idProduct, "prc_product");
                $this->product_bad_model->delete($idProduct, "prb_product");
                $this->showcart_model->delete($idProduct, "shc_product");
                $this->product_model->delete($idProduct, "pro_id");
            }

            redirect(base_url() . trim(uri_string(), '/'), 'location');
        }


        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar
        $action = array('edit', 'search', 'keyword', 'sort', 'by', 'status', 'id', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        $this->load->model('product_favorite_model');
        #BEGIN: Menu 2
        $data['menuSelected'] = 'favorite_product';
        #END Menu 2
        #BEGIN: Delete

        if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
            $this->product_favorite_model->delete($this->input->post('checkone'), "prf_id", (int)$this->session->userdata('sessionUser'), "prf_user");
            redirect(base_url() . trim(uri_string(), '/'), 'location');
        }
        #END Delete
        #Define url for $getVar
        $action = array('search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(4, $action);
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Search & sort
        $where = "pro_user = " . (int)$this->session->userdata('sessionUser') . " AND pro_enddate >= $currentDate AND pro_cost = 0";

        $sort = 'pro_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageSort = '';
        $pageUrl = '';
        $keyword = '';
        if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
            $keyword = $this->filter->html($getVar['keyword']);
            switch (strtolower($getVar['search'])) {
                case 'name':
                    $sortUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $pageUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $where .= " AND pro_name LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                    break;
            }
        }
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "pro_name";
                    break;
                case 'cost':
                    $pageUrl .= '/sort/cost';
                    $sort = "pro_cost";
                    break;
                case 'postdate':
                    $pageUrl .= '/sort/postdate';
                    $sort = "pro_begindate";
                    break;
                case 'date':
                    $pageUrl .= '/sort/date';
                    $sort = "pro_date";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "pro_id";
            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #Keyword


        $statusUrl = $pageUrl . $pageSort;
        $data['statusUrl'] = base_url() . 'account/sanpham/khonggia' . $statusUrl;
        if ($getVar['status'] != FALSE && trim($getVar['status']) != '' && $getVar['id'] != FALSE && (int)$getVar['id'] > 0) {
            switch (strtolower($getVar['status'])) {
                case 'active':
                    $this->product_model->update(array('pro_status' => 1), "pro_id = " . (int)$getVar['id'] . " AND pro_user = " . (int)$this->session->userdata('sessionUser'));
                    break;
                case 'deactive':
                    $this->product_model->update(array('pro_status' => 0), "pro_id = " . (int)$getVar['id'] . " AND pro_user = " . (int)$this->session->userdata('sessionUser'));
                    break;
            }
            redirect($data['statusUrl'], 'location');
        }


        $data['keyword'] = $keyword;
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/sanpham/khonggia' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $totalRecord = count($this->product_model->fetch_join("pro_id", "LEFT", "tbtt_category", "tbtt_product.pro_category = tbtt_category.cat_id", "", "", "", "", "", "", $where, "", ""));
        $config['base_url'] = base_url() . 'account/sanpham/khonggia' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $data['sTT'] = $start + 1;
        #Fetch record
        $select = "pro_id, pro_name, pro_descr, pro_category, pro_dir, pro_image, pro_begindate, pro_enddate, pro_status, pro_view, cat_name";
        $limit = settingOtherAccount;

        $data['product'] = $this->product_model->fetch_join($select, "LEFT", "tbtt_category", "tbtt_product.pro_category = tbtt_category.cat_id", "", "", "", "", "", "", $where, $sort, $by, $start, $limit);
        #Load view        
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
        $this->load->view('home/account/product/khonggia', $data);
    }

    //edn khong gia

    function _valid_captcha_job_edit($str)
    {
        if ($this->session->flashdata('sessionCaptchaEditJobAccount') && $this->session->flashdata('sessionCaptchaEditJobAccount') === $str) {
            return true;
        }
        return false;
    }
    
    function xoa_hinh_anh()
    {
        $dk_xoa = $this->input->post('dk_xoa');
        $field_dk_xoa = $this->input->post('field_dk_xoa');
        $tem_field_img = $this->input->post('tem_field_img');
        $table_update = $this->input->post('table_update');
        $imgpath = $this->input->post('imgpath');
        $imgname = $this->input->post('imgname');        
        $where = $field_dk_xoa . " = " . $dk_xoa;        
        if ($where && $where != "") {
            $this->db->where($where);
        }        
        $this->db->update($table_update, array($tem_field_img => ''));
        
        $this->load->library('ftp');
        $config['hostname'] = IP_CLOUDSERVER;
        $config['username'] = USER_CLOUDSERVER;
        $config['password'] = PASS_CLOUDSERVER;
        $config['port']     = PORT_CLOUDSERVER;                
        $config['debug']    = FALSE;
        $this->ftp->connect($config);        
        $lfile = array();       
        $lfile = $this->ftp->list_files('/public_html/'.$imgpath);
        if (in_array($imgname, $lfile)){
            $this->ftp->delete_file('/public_html/' . $imgpath . $imgname);             
        }  
        $this->ftp->close();        
    }

    //ajax xoa hinh nay
    function xoa_hinh_one()
    {
        $dk_xoa = $this->input->post('dk_xoa');
        $field_dk_xoa = $this->input->post('field_dk_xoa');
        $tem_field_img = $this->input->post('tem_field_img');
        $table_update = $this->input->post('table_update');

        $where = $field_dk_xoa . " = " . $dk_xoa;

        $this->db->cache_delete_all();
        if (!file_exists('system/cache/index.html')) {
            $this->load->helper('file');
            @write_file('system/cache/index.html', '<p>Directory access is forbidden.</p>');
        }
        
        if ($where && $where != "") {
            $this->db->where($where);
        }
        
        $this->db->update($table_update, array($tem_field_img => ''));
    }

    function xoa_hinh_one_and_defalut()
    {
        $dk_xoa = $this->input->post('dk_xoa');
        $field_dk_xoa = $this->input->post('field_dk_xoa');
        $tem_field_img = $this->input->post('tem_field_img');
        $table_update = $this->input->post('table_update');
        $duong_dan = $this->input->post('duong_dan');

        $where = $field_dk_xoa . " = " . $dk_xoa;
        $this->db->cache_delete_all();
        if (!file_exists('system/cache/index.html')) {
            $this->load->helper('file');
            @write_file('system/cache/index.html', '<p>Directory access is forbidden.</p>');
        }
        if ($where && $where != "") {
            $this->db->where($where);
        }
        if ($table_update = "tbtt_shop") {

        }
        $this->db->update($table_update, array($tem_field_img => 'defaults.png', $duong_dan => 'defaults'));
        if (file_exists('media/images/raovat/' . $duong_dan . '/' . $tem_field_img)) {
            @unlink('media/images/raovat/' . $duong_dan . '/' . $tem_field_img);
        }
    }

    function xoa_hinh_one_and_shop()
    {        
        $dk_xoa = $this->input->post('dk_xoa');
        $field_dk_xoa = $this->input->post('field_dk_xoa');
        $tem_field_img = $this->input->post('tem_field_img');
        $table_update = $this->input->post('table_update');
        $duong_dan = $this->input->post('duong_dan');
        $ten_duong_dan = $this->input->post('ten_duong_dan');
        $ten_hinh = $this->input->post('ten_hinh');
        
        //Connect FTP to server cloud
        $this->load->library('ftp');
        $config['hostname'] = IP_CLOUDSERVER;
        $config['username'] = USER_CLOUDSERVER;
        $config['password'] = PASS_CLOUDSERVER;
        $config['port']     = PORT_CLOUDSERVER;                
        $config['debug']    = FALSE;
        $this->ftp->connect($config);

        $where = $field_dk_xoa . " = " . $dk_xoa;
        $this->db->cache_delete_all();
        if (!file_exists('system/cache/index.html')) {
            $this->load->helper('file');
            @write_file('system/cache/index.html', '<p>Directory access is forbidden.</p>');
        }
        if ($where && $where != "") {
            $this->db->where($where);
        }
        if ($table_update = "tbtt_shop") {
            if ($tem_field_img == "sho_bgimg") {
                $duong_dan_url = "shop/bgs";
            }
            if ($tem_field_img == "sho_banner") {
                $duong_dan_url = "shop/banners";
            }
            if ($tem_field_img == "sho_logo") {
                $duong_dan_url = "shop/logos";
            }
        }

        $this->db->update($table_update, array($tem_field_img => ''));
        
        if (file_exists(DOMAIN_CLOUDSERVER . 'media/' . $duong_dan_url . '/' . $ten_duong_dan . '/' . $ten_hinh) && $ten_hinh != 'defaults.png') {
            //@unlink('media/' . $duong_dan_url . '/' . $ten_duong_dan . '/' . $ten_hinh);
            $this->ftp->delete_file(DOMAIN_CLOUDSERVER . 'media/' . $duong_dan_url . '/' . $ten_duong_dan . '/' . $ten_hinh);
        }        
        $this->ftp->close();
    }

    function xoa_hinh_nhieu()
    {
        $dk_xoa = $this->input->post('dk_xoa');
        $dulieu_xoa = $this->input->post('dulieu_xoa');

        $where = "pro_id = " . (int)$dk_xoa;
        $this->db->cache_delete_all();
        if (!file_exists('system/cache/index.html')) {
            $this->load->helper('file');
            @write_file('system/cache/index.html', '<p>Directory access is forbidden.</p>');
        }
        if ($where && $where != "") {
            $this->db->where($where);
        }
        $this->db->update("tbtt_product", array('pro_image' => $dulieu_xoa));
    }

    function del_img_pro()
    {
        $id_pro = $this->input->post('id_pro');
        $img_name = $this->input->post('img_name');
        $img_num = $this->input->post('img_num');
        $product = $this->product_model->get("tbtt_product.*", "pro_id = " . (int)$id_pro . " AND pro_user = " . (int)$this->session->userdata('sessionUser'));
        $arrimg = explode(',', $product->pro_image);
        $filepath = 'media/images/product/' . $product->pro_dir . '/';
        $where = "pro_id = " . (int)$id_pro;
        $this->db->cache_delete_all();

        //Connect FTP to server cloud
        $this->load->library('ftp');
        $config['hostname'] = IP_CLOUDSERVER;
        $config['username'] = USER_CLOUDSERVER;
        $config['password'] = PASS_CLOUDSERVER;
        $config['port']     = PORT_CLOUDSERVER;                
        $config['debug']    = FALSE;
        $this->ftp->connect($config);
        $path = '/public_html/media/images/product';
        $ldir = array();
        $lfile = array();
        $ldir = $this->ftp->list_files($path);
        $lfile = $this->ftp->list_files($path .'/'. $product->pro_dir);

        switch ($img_num) {
            case '0':
                if (in_array($product->pro_dir, $ldir) && in_array($arrimg[0], $lfile)) {
                    $this->ftp->delete_file($path .'/'. $product->pro_dir .'/'. $arrimg[0]);
                    $this->ftp->delete_file($path .'/'. $product->pro_dir .'/thumbnail_1_'. $arrimg[0]);
                    $this->ftp->delete_file($path .'/'. $product->pro_dir .'/thumbnail_2_'. $arrimg[0]);
                    $this->ftp->delete_file($path .'/'. $product->pro_dir .'/thumbnail_3_'. $arrimg[0]);
                    $this->ftp->close();
                }
                unset($arrimg[0]);
                break;
            case '1':
                if (in_array($product->pro_dir, $ldir) && in_array($arrimg[1], $lfile)) {
                    $this->ftp->delete_file($path .'/'. $product->pro_dir .'/'. $arrimg[1]);
                    $this->ftp->delete_file($path .'/'. $product->pro_dir .'/thumbnail_1_'. $arrimg[1]);
                    $this->ftp->delete_file($path .'/'. $product->pro_dir .'/thumbnail_2_'. $arrimg[1]);
                    $this->ftp->delete_file($path .'/'. $product->pro_dir .'/thumbnail_3_'. $arrimg[1]);
                    $this->ftp->close();
                }
                unset($arrimg[1]);
                break;
            case '2':
                if (in_array($product->pro_dir, $ldir) && in_array($arrimg[2], $lfile)) {
                    $this->ftp->delete_file($path .'/'. $product->pro_dir .'/'. $arrimg[2]);
                    $this->ftp->delete_file($path .'/'. $product->pro_dir .'/thumbnail_1_'. $arrimg[2]);
                    $this->ftp->delete_file($path .'/'. $product->pro_dir .'/thumbnail_2_'. $arrimg[2]);
                    $this->ftp->delete_file($path .'/'. $product->pro_dir .'/thumbnail_3_'. $arrimg[2]);
                    $this->ftp->close();
                }
                unset($arrimg[2]);
                break;
            case '3':
                if (in_array($product->pro_dir, $ldir) && in_array($arrimg[3], $lfile)) {
                    $this->ftp->delete_file($path .'/'. $product->pro_dir .'/'. $arrimg[3]);
                    $this->ftp->delete_file($path .'/'. $product->pro_dir .'/thumbnail_1_'. $arrimg[3]);
                    $this->ftp->delete_file($path .'/'. $product->pro_dir .'/thumbnail_2_'. $arrimg[3]);
                    $this->ftp->delete_file($path .'/'. $product->pro_dir .'/thumbnail_3_'. $arrimg[3]);
                    $this->ftp->close();
                }
                unset($arrimg[3]);
                break;
            case '4':
                if (in_array($product->pro_dir, $ldir) && in_array($arrimg[4], $lfile)) {
                    $this->ftp->delete_file($path .'/'. $product->pro_dir .'/'. $arrimg[4]);
                    $this->ftp->delete_file($path .'/'. $product->pro_dir .'/thumbnail_1_'. $arrimg[4]);
                    $this->ftp->delete_file($path .'/'. $product->pro_dir .'/thumbnail_2_'. $arrimg[4]);
                    $this->ftp->delete_file($path .'/'. $product->pro_dir .'/thumbnail_3_'. $arrimg[4]);
                    $this->ftp->close();
                }
                unset($arrimg[4]);
                break;
        }

        $arrimg1 = implode(',', $arrimg);
        if (!file_exists('system/cache/index.html')) {
            $this->load->helper('file');
            @write_file('system/cache/index.html', '<p>Directory access is forbidden.</p>');
        }

        if ($where && $where != "") {
            $this->db->where($where);
        }
        $this->db->update("tbtt_product", array('pro_image' => $arrimg1));
    }

    function xoa_hinh_tintuc()
    {
        $dk_xoa = $this->input->post('dk_xoa');
        $dulieu_xoa = $this->input->post('dulieu_xoa');

        $where = "not_id = " . (int)$dk_xoa;
        $this->db->cache_delete_all();
        if (!file_exists('system/cache/index.html')) {
            $this->load->helper('file');
            @write_file('system/cache/index.html', '<p>Directory access is forbidden.</p>');
        }
        if ($where && $where != "") {
            $this->db->where($where);
        }
        $this->db->update("tbtt_content", array('not_image' => $dulieu_xoa));
    }

    function theo_doi_hoi_dap()
    {
        $id_hds = $this->input->post('id_hds');
        $id_user = (int)$this->input->post('id_user');
        $hds_theo_doi = $this->input->post('hds_theo_doi');
        $this->load->model('hds_model');
        $shop = $this->hds_model->get("*", "hds_theo_doi like '%," . $id_user . ",%' AND hds_id=" . (int)$id_hds);
        if ($shop->hds_id != "") {
            echo "Bạn đã theo dõi hỏi đáp này rồi";
        } else {
            if ($hds_theo_doi != "") {
                $update_theo_doi = $hds_theo_doi . $id_user . ",";
            } else {
                $update_theo_doi = "," . $id_user . ",";
            }


            if ($this->hds_model->update(array('hds_theo_doi' => $update_theo_doi), "hds_id = " . (int)$id_hds)) {
                echo "Thực hiện thành công";
            }
        }
    }

    function delete_theo_doi_hoi_dap()
    {
        $value_theodoi = $this->input->post('value_theodoi');
        $hds_id = $this->input->post('hds_id');
        $vowels = array("," . $this->session->userdata('sessionUser') . "");
        $onlyconsonants = str_replace($vowels, "", $value_theodoi);
        $this->load->model('hds_model');
        if ($this->hds_model->update(array('hds_theo_doi' => $onlyconsonants), "hds_id = " . (int)$hds_id)) {
            echo "Thực hiện thành công";
        }
    }

    function kiem_tra_link_shop()
    {
        $tenlink = $this->input->post('tenlink');
        $idUser = (int)$this->input->post('idUser');
        $shop = $this->shop_model->get("*", "sho_user <> " . $idUser . " AND sho_link = '" . $tenlink . "'");
        echo $shop->sho_link;
    }

    function _valid_enddate_employ_edit()
    {
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        $endDate = mktime(0, 0, 0, (int)$this->input->post('endmonth_employ'), (int)$this->input->post('endday_employ'), (int)$this->input->post('endyear_employ'));
        if ($this->check->is_more($currentDate, $endDate)) {
            return false;
        }
        return true;
    }

    function _valid_captcha_employ_edit($str)
    {
        if ($this->session->flashdata('sessionCaptchaEditEmployAccount') && $this->session->flashdata('sessionCaptchaEditEmployAccount') === $str) {
            return true;
        }
        return false;
    }

    function ajax_update_order()
    {
        $order_id = $this->uri->segment(3);
        $val = $this->uri->segment(4);

        $this->order_model->update_order($order_id, $val);
        die();
    }

    function order_detail()
    {
        $data['order_id'] = $this->uri->segment(3);
        if ($data['order_id'] == "") {
            redirect(base_url() . 'account');
        }

        $userdata = $this->session->userdata;
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));

        $group_id = $this->session->userdata('sessionGroup');
        if($group_id == StaffStoreUser) {
            $user_id = $this->user_model->get("parent_id", "use_id = " . $this->session->userdata('sessionUser'))->parent_id;
            $user_group = $this->user_model->get("use_group", "use_id = " . $user_id)->use_group;
        } else {
            $user_id = $this->session->userdata('sessionUser');
            $user_group = $this->session->userdata('sessionGroup');
        }

        if ($group_id <= 3 || ($group_id == StaffStoreUser && $user_group == AffiliateStoreUser) ) {
            $where['shc_saler'] = $user_id;
        }

        #BEGIN: Menu
        $data['menuSelected'] = 'showcart';
        $data['menuType'] = 'account';
        $tree = array();
        $this->getTreeInList($user_id, $tree);
        $tree[] = $user_id;
        $tree = implode(',', $tree);

        if ($this->input->post('order_status')) {
            $data = array(
                'shc_status' => $this->input->post('order_status')
            );
            $where = array(
                'shc_saler' => $user_id,
                'shc_orderid' => $this->uri->segment(3)
            );
            $this->showcart_model->update($data, $where);
            redirect(base_url() . "account/order_detail/" . $this->uri->segment(3), 'location');
        }
        $saler = '';
        if ($this->session->userdata('sessionGroup') == AffiliateStoreUser || ($group_id == StaffStoreUser && $user_group == AffiliateStoreUser) ){
            $tree = array();
            $GH = $user_id;
            // if ($this->session->userdata('sessionGroup') == StaffStoreUser) {
            //     $getp = $this->user_model->fetch('use_id,parent_id', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
            //     $tree[] = $GH = (int)$getp[0]->parent_id;
            // }

            $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $user_id );
            if (!empty($sub_tructiep)) {
                foreach ($sub_tructiep as $key => $value) {
                    //Nếu là chi nhánh, lấy danh sách nhân viên

                    // if ($value->use_group == StaffStoreUser) {
                    //     //Lấy danh sách CN dưới nó cua NVGH
                    //     $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                    //     if (!empty($sub_cn)) {
                    //         foreach ($sub_cn as $k => $vlue) {
                    //             $tree[] = $vlue->use_id;
                    //         }
                    //     }
                    // } else {
                    //     $tree[] = $value->use_id;
                    // }
                    $tree[] = $value->use_id;
                }
            }
            $id = implode(",", $tree);
            $saler = '((showcart.shc_saler=' . $GH . ' AND pro_of_shop=0)';
            if (!empty($id)) {
                $saler .= ' OR ((showcart.shc_saler IN(' . $id . ')) AND pro_of_shop>0)';
            }
            $saler .= ')';
        } else {
            if ($this->session->userdata('sessionGroup') == BranchUser || ($group_id == StaffStoreUser && $user_group == BranchUser)) {
                $saler = 'showcart.shc_saler = ' . $user_id;
            }
        }
        #END Menu 
        $where['where'] = $saler;
        $where['id'] = $data['order_id'];
        $order = $this->order_model->getDetailOrders($where);
        $data['list_product'] = $order;
        $get_u = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = ' . $user_id );

        switch ($get_u[0]->use_group) {
            case AffiliateStoreUser:
            case BranchUser:
                if ($get_u[0]->domain != '') {
                    $domain = $get_u[0]->domain;
                } else {
                    $parent = $get_u[0]->sho_link;
                }
                break;
            case StaffStoreUser:
            case StaffUser:
                $get_p = $this->user_model->fetch_join('use_id, parent_id, use_group, sho_link, domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_u[0]->parent_id . '"');

                if ($get_p[0]->domain != '') {
                    $domain = $get_p[0]->domain;
                } else {
                    $parent = $get_p[0]->sho_link;
                }
                break;
            case AffiliateUser:
                $get_p = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_u[0]->parent_id . '"');
                if ($get_p[0]->use_group == AffiliateStoreUser || $get_p[0]->use_group == BranchUser) {
                    if ($get_p[0]->domain != '') {
                        $domain = $get_p[0]->domain;
                    } else {
                        $parent = $get_p[0]->sho_link;
                    }
                } else {
                    if ($get_p[0]->use_group == StaffStoreUser || $get_p[0]->use_group == StaffUser) {
                        $get_p1 = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_p[0]->parent_id . '"');
                        if ($get_p1[0]->domain != '') {
                            $domain = $get_p1[0]->domain;
                        } else {
                            $parent = $get_p1[0]->sho_link;
                        }
                    } else {
                        $get_p1 = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_p[0]->parent_id . '"');
                        if ($get_p1[0]->use_group == StaffStoreUser && $get_p[0]->use_group == StaffUser) {
                            $get_p2 = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_p1[0]->parent_id . '"');
                            if ($get_p1[0]->domain != '') {
                                $domain = $get_p2[0]->domain;
                            } else {
                                $parent = $get_p2[0]->sho_link;
                            }
                        }
                    }
                }
                break;
        }
        $data['domain'] = $domain;
        $data['parent'] = $parent;
        $data['flash_message'] = $this->session->flashdata('flash_message');
        //$tinhThanh = $this->district_model->get('DistrictName, ProvinceName', array('vtp_code' => $order[0]->ord_district));
        if ($order[0]->shipping_method == 'GHN' || $order[0]->shipping_method == 'GHTK') {
            $tinhThanh = $this->district_model->get('DistrictName, ProvinceName', array('DistrictCode' => $order[0]->ord_district));
        }else{
            $tinhThanh = $this->district_model->get('DistrictName, ProvinceName', array('vtp_code' => $order[0]->ord_district));
        }
        $data['_province'] = $tinhThanh->ProvinceName;
        $data['_district'] = $tinhThanh->DistrictName;

        ##Load:: view
        $this->load->view('home/account/order_detail', $data);
    }

    // tung begin add
    function docs($id_category)
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == BranchUser
            || $group_id == StaffStoreUser
            || $group_id == StaffUser
        ) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu 1
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'docs';
        $data['menuType'] = 'account';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
        #END Menu 1
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position, adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Get random category
        $this->load->model('category_model');
        $this->load->model('content_model');
        #If have page
        $getVar = $this->uri->uri_to_assoc();
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        $limit = 5;
        $this->load->library('pagination');
        $totalRecord = count($this->content_model->fetch("not_id", "not_status = 1 and id_category = " . $id_category . " and group_docs =  " . (int)$this->session->userdata('sessionGroup') . ""));
        $config['base_url'] = base_url() . 'account/docs/' . $id_category . '/' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = 5;
        $config['num_links'] = 5;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        $retArrayTintuc = array();
        $where = "";
        if (count($retArrayTintuc) > 0) {
            foreach ($retArrayTintuc as $item) {
                $where .= $item->cat_id . ",";
            }
            $where .= $id_category;
        } else {
            $where = $id_category;
        }
        $detail_content = $this->content_model->fetch("not_id, not_title, not_begindate,not_detail,not_image,not_dir_image, not_view", "not_status = 1 and id_category = " . $where . " and group_docs = " . (int)$this->session->userdata('sessionGroup'), "not_id", "DESC", $start, $limit);
        $data['detail_content'] = $detail_content;
        $this->load->helper('text');
        $this->load->model('content_category_model');
        $title_category = $this->content_category_model->get("", "cat_id = " . $id_category . "");
        $data['title_category'] = $title_category;
        $data['category_view_right'] = $this->content_category_model->fetch("*", "cat_type = 1");
        $this->load->view('home/account/docs/category', $data);
    }

    function docsdetail($id_detail)
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == BranchUser
            || $group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
        ) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu 1
        $data['menuSelected'] = 'docs';
        $data['menuType'] = 'account';
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
        #END Menu 1
        #BEGIN: Advertise
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        $this->load->model('category_model');
        $this->load->model('content_model');
        $detail_docs = $this->content_model->get("not_id, not_title, not_begindate,not_detail,not_image,not_dir_image,id_category", "not_status = 1 and not_id = " . $id_detail . "");
        $data['detail_docs'] = $detail_docs;
        $this->db->distinct('pro_category');
        $this->load->helper('text');
        $this->load->view('home/account/docs/detail', $data);
    }

    function affiliate_store()
    {
        $data['menuSelected'] = 'tree';
        $data['menuType'] = 'account';
        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(4, $action);
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "use_fullname";
                    break;
                case 'shopname':
                    $pageUrl .= '/sort/shopname';
                    $sort = "sho_name";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/tree/affiliate' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        $where = 'use_status = 1 and use_group = 2 and parent_id =' . (int)$this->session->userdata('sessionUser');
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $totalRecord = count($this->user_model->fetch("use_id", $where, "", ""));
        $config['base_url'] = base_url() . 'account/tree/affiliate' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $limmit = -1;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $staffs = $this->user_model->fetch_join("use_id,use_username, use_fullname,use_email,use_mobile,tbtt_shop.sho_link, tbtt_shop.sho_name", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", $where, $sort, $by, $start, $limit);

        $data['staffs'] = $staffs;
        #Load view
        $this->load->view('home/account/staff/affiliate', $data);
    }

    function treestore()
    {
        $use_id = (int)$this->input->post('use_id');
        $shop_id = (int)$this->input->post('shop_id');
        if (isset($use_id) && $use_id > 0) {
            $this->db->cache_off();
            $this->user_model->update(array('parent_id' => $use_id), 'use_id = ' . $shop_id);
            echo '1';
            exit();
        }
        $tree = array();
        $this->getTreeInList($this->session->userdata('sessionUser'), $tree);
        if (count($tree) > 0) {
            $tree_list = $this->user_model->fetch("use_id, use_username", "use_id IN (" . implode(',', $tree) . ")", "", "");
        }
        $data['tree_list'] = $tree_list;

        $tree[] = $this->session->userdata('sessionUser');
        $tree = implode(',', $tree);
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'shop';
        $data['menuType'] = 'account';
        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(4, $action);
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "use_fullname";
                    break;
                case 'shopname':
                    $pageUrl .= '/sort/shopname';
                    $sort = "sho_name";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/tree/store' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        if (count($tree) > 0) {
            $where = 'use_status = 1 and use_group = 3 and parent_id IN (' . $tree . ')';
        }
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $limmit = 20;
        $staffssum = $this->user_model->fetch_join1("use_id, use_username, use_fullname, use_email, use_mobile, tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id, tbtt_showcart.*, SUM(tbtt_showcart.shc_total) As showcarttotal,", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.shc_saler", $where, $sort, $by, $start, '');
        $totalRecord = count($staffssum);
        $config['base_url'] = base_url() . 'account/tree/store' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limmit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $total_sum_staff = 0;
        foreach ($staffssum as $key => $items) {
            $total_sum_staff += $items->showcarttotal;
        }
        $data['total_sum_staff'] = $total_sum_staff;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $staffs = $this->user_model->fetch_join1("use_id, use_username, use_fullname, use_email, use_mobile, tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id, tbtt_showcart.*, SUM(tbtt_showcart.shc_total) As showcarttotal,", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.shc_saler", $where, $sort, $by, $start, $limmit);
        $data['staffs'] = $staffs;
        for ($i = 0; $i < count($staffs); $i++) {
            $this->db->cache_off();
            $parentUser = $this->user_model->get("use_id, use_username", "use_id = " . $staffs[$i]->parent_id);
            $staffs[$i]->username_parent = $parentUser->use_username;
            $staffs[$i]->userid_parent = $parentUser->use_id;
        }
        $data['stt'] = $start + 1;

        $LArray = array();
        if (!empty($staffs)) {
            foreach ($staffs as $key => $row) {
                $info = $this->get_my_shop($row->use_id);
                $LArray[] = array(
                    'info_parent' => $info['info_parent'],
                    'pshop' => $info['pshop'],
                    'link_gh' => $info['link_gh']
                );
            }
        }
        $data['linkGH'] = $LArray;
        #Load view
        $this->load->view('home/account/staff/treestore', $data);
    }

    /**
     *
     */
    function staffs()
    {	
	    $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
            || $group_id == BranchUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        $this->load->model('staff_model');
        #BEGIN: Menu 1
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'task';
        $data['menuType'] = 'account';

        $use_group_string = '(use_group = ' . BranchUser . ' OR use_group = ' . StaffUser . ' OR use_group = ' . AffiliateStoreUser . ' OR use_group = ' . Developer2User . ' OR use_group = ' . Developer1User . ' OR use_group = ' . Partner2User . ' OR use_group = ' . Partner1User . ' OR use_group = ' . StaffStoreUser . ')';        
        $staffs = $this->user_model->get('use_id,use_username, use_fullname', 'use_status = 1 and use_id =' . (int)$this->uri->segment(4));        
        $data['staffs'] = $staffs;
        
        $data['staff'] = $staffs->use_fullname;
        $data['staffuser'] = $staffs->use_username;

        $getVar = strtolower($this->uri->segment(7));
        $getday = strtolower($this->uri->segment(8));
        $getVarEdit = strtolower($this->uri->segment(9));
        $getVarid = strtolower($this->uri->segment(10));
        $getVarMonth = strtolower($this->uri->segment(6));
        $idstaff = strtolower($this->uri->segment(4));

        if (strtolower($this->uri->segment(7)) == 'day' && $getVar['day'] != FALSE && $getVarEdit['edit'] == FALSE) {
            #BEGIN: Menu 2
	        $data['menuPanelGroup'] = 4;
            $data['menuSelected'] = 'task';
            #END Menu 2
            if ($this->session->flashdata('sessionSuccessSendContactAccount')) {
                $data['successSendContactAccount'] = true;
            } else {
                $this->load->library('form_validation');
                $data['successSendContactAccount'] = false;
                #BEGIN: Set rules
                $this->form_validation->set_rules('nametask', 'lang:title_contact_label_send', 'trim|required|callback__exist_title_contact');
                $this->form_validation->set_rules('txtContent', 'lang:txtcontent_contact_label_send', 'trim|required|min_length[10]|max_length[1000]');               
                #END Set rules
                #BEGIN: Set message
                $this->form_validation->set_message('required', $this->lang->line('required_message'));
                $this->form_validation->set_message('min_length', $this->lang->line('min_length_message'));
                $this->form_validation->set_message('max_length', $this->lang->line('max_length_message'));
                $this->form_validation->set_message('_exist_title_contact', $this->lang->line('_exist_title_contact_message_send'));
                $this->form_validation->set_message('_valid_captcha_contact', $this->lang->line('_valid_captcha_contact_message_send'));
                $this->form_validation->set_error_delimiters('<div class="div_errorpost">', '</div>');
                #END Set message
                if ($this->form_validation->run() != FALSE) {
                    /*Start upload images*/
                    $this->load->library('upload');
                    $pathImage = "media/images/staff/";
                    $pathWord = "media/word/staff/";
                    $pathExcel = "media/excel/staff/";
                    $pathPdf = "media/pdf/staff/";
                    #Create folder
                    $dir_image = date('dmY');
                    $image1 = 'none.gif';
                    $image2 = 'none.gif';
                    $image3 = 'none.gif';
                    $db_file1 = 'null';
                    $db_file2 = 'null';
                    $db_file3 = 'null';
                    if (!is_dir($pathImage . $dir_image)) {
                        @mkdir($pathImage . $dir_image, 0777, true);
                        $this->load->helper('file');
                        @write_file($pathImage . $dir_image . '/index.html', '<p>Directory access is forbidden.</p>');
                    }
                    if (!is_dir($pathWord . $dir_image)) {
                        @mkdir($pathWord . $dir_image, 0777, true);
                        $this->load->helper('file');
                        @write_file($pathWord . $dir_image . '/index.html', '<p>Directory access is forbidden.</p>');
                    }
                    if (!is_dir($pathExcel . $dir_image)) {
                        @mkdir($pathExcel . $dir_image, 0777, true);
                        $this->load->helper('file');
                        @write_file($pathExcel . $dir_image . '/index.html', '<p>Directory access is forbidden.</p>');
                    }
                    if (!is_dir($pathPdf . $dir_image)) {
                        @mkdir($pathPdf . $dir_image, 0777, true);
                        $this->load->helper('file');
                        @write_file($pathPdf . $dir_image . '/index.html', '<p>Directory access is forbidden.</p>');
                    }
                    $config['upload_path'] = $pathImage . $dir_image . '/';
                    $config['allowed_types'] = 'gif|jpg|jpeg|png';
                    $config['max_size'] = 1024;#KB
                    $config['max_width'] = 1024;#px
                    $config['max_height'] = 1024;#px
                    $config['encrypt_name'] = true;
                    $this->upload->initialize($config);
                    if ($this->upload->do_upload('images1')) {
                        $uploadData = $this->upload->data();
                        if ($uploadData['is_image'] == TRUE) {
                            $image1 = $uploadData['file_name'];
                        } elseif (file_exists($pathImage . $dir_image . '/' . $uploadData['file_name'])) {
                            @unlink($pathImage . $dir_image . '/' . $uploadData['file_name']);
                        }
                    }
                    if ($image1 == 'none.gif') {
                        #Remove dir
                        $this->load->library('file');
                        if (trim($dir_image) != '' && trim($dir_image) != 'default' && is_dir('media/images/staff/' . $dir_image) && count($this->file->load('media/images/staff/' . $dir_image, 'index.html')) == 0) {
                            if (file_exists('media/images/staff/' . $dir_image . '/index.html')) {
                                @unlink('media/images/staff/' . $dir_image . '/index.html');
                            }
                            @rmdir('media/images/staff/' . $dir_image);
                        }
                    }
                    //upload image 2
                    if ($this->upload->do_upload('images2')) {
                        $uploadData2 = $this->upload->data();
                        if ($uploadData2['is_image'] == TRUE) {
                            $image2 = $uploadData2['file_name'];
                        } elseif (file_exists($pathImage . $dir_image . '/' . $uploadData2['file_name'])) {
                            @unlink($pathImage . $dir_image . '/' . $uploadData2['file_name']);
                        }
                    }
                    if ($image2 == 'none.gif') {
                        #Remove dir
                        $this->load->library('file');
                        if (trim($dir_image) != '' && trim($dir_image) != 'default' && is_dir('media/images/staff/' . $dir_image) && count($this->file->load('media/images/staff/' . $dir_image, 'index.html')) == 0) {
                            if (file_exists('media/images/staff/' . $dir_image . '/index.html')) {
                                @unlink('media/images/staff/' . $dir_image . '/index.html');
                            }
                            @rmdir('media/images/staff/' . $dir_image);
                        }
                    }
                    //upload image 3
                    if ($this->upload->do_upload('images3')) {
                        $uploadData3 = $this->upload->data();
                        if ($uploadData3['is_image'] == TRUE) {
                            $image3 = $uploadData3['file_name'];

                        } elseif (file_exists($pathImage . $dir_image . '/' . $uploadData3['file_name'])) {
                            @unlink($pathImage . $dir_image . '/' . $uploadData3['file_name']);
                        }
                    }
                    if ($image3 == 'none.gif') {
                        #Remove dir
                        $this->load->library('file');
                        if (trim($dir_image) != '' && trim($dir_image) != 'default' && is_dir('media/images/staff/' . $dir_image) && count($this->file->load('media/images/staff/' . $dir_image, 'index.html')) == 0) {
                            if (file_exists('media/images/staff/' . $dir_image . '/index.html')) {
                                @unlink('media/images/staff/' . $dir_image . '/index.html');
                            }
                            @rmdir('media/images/staff/' . $dir_image);
                        }
                    }
                    //upload file 1
                    $config['allowed_types'] = 'doc|docx';
                    $config['max_size'] = 102400;#KB                    
                    $config['encrypt_name'] = true;
                    $this->upload->initialize($config);
                    if ($this->upload->do_upload('file1')) {
                        $uploadFile1 = $this->upload->data();
                        if ($uploadFile1['is_image'] == TRUE) {
                            $db_file1 = $uploadFile1['file_name'];

                        } elseif (file_exists($pathWord . $dir_image . '/' . $uploadFile1['file_name'])) {
                            @unlink($pathWord . $dir_image . '/' . $uploadFile1['file_name']);
                        }
                    }

                    //upload file 2
                    $config['allowed_types'] = 'pdf';
                    $config['max_size'] = 102400;#KB
                    $config['encrypt_name'] = true;
                    $this->upload->initialize($config);
                    if ($this->upload->do_upload('file2')) {
                        $uploadFile2 = $this->upload->data();
                        if ($uploadFile2['is_image'] == TRUE) {
                            $db_file2 = $uploadFile2['file_name'];
                        } elseif (file_exists($pathWord . $dir_image . '/' . $uploadFile2['file_name'])) {
                            @unlink($pathWord . $dir_image . '/' . $uploadFile2['file_name']);
                        }
                    }

                    //upload file 3
                    $config['allowed_types'] = 'xls|xlsx';
                    $config['max_size'] = 102400;#KB
                    $config['encrypt_name'] = true;
                    $this->upload->initialize($config);
                    if ($this->upload->do_upload('file3')) {
                        $uploadFile3 = $this->upload->data();
                        if ($uploadFile3['is_image'] == TRUE) {
                            $db_file3 = $uploadFile3['file_name'];
                        } elseif (file_exists($pathWord . $dir_image . '/' . $uploadFile3['file_name'])) {
                            @unlink($pathWord . $dir_image . '/' . $uploadFile3['file_name']);
                        }
                    }
                    //End upload images
                    $txtContent = $this->input->post('txtContent');
                    $txtContentNote = $this->input->post('txtContentnote');

                    $currentDate = $this->input->post('currentDate');
                    $dayadd = $this->input->post('dayadd');
                    $status = $this->input->post('status');
                    $images1 = $uploadData['file_name'];
                    $images2 = $uploadData2['file_name'];
                    $images3 = $uploadData3['file_name'];
                    $files1 = $uploadFile1['file_name'];
                    $files2 = $uploadFile2['file_name'];
                    $files3 = $uploadFile3['file_name'];
                    
                    /**/
                    if ($images1 == "") {                        
                        $images1 = "";
                    }
                    if (!$uploadData2['file_name']) {
                        $images2 = "";
                    }
                    if (!$uploadData3['file_name']) {
                        $images3 = "";
                    }
                    if (!$uploadFile1['file_name']) {
                        $files1 = "";
                    }
                    if (!$uploadFile2['file_name']) {
                        $files2 = "";
                    }
                    if (!$uploadFile3['file_name']) {
                        $files3 = "";
                    }/**/
                    $userNameID = (int)$this->session->userdata('sessionUser');

                    $dataAdd = array(
                        'name' => trim($this->filter->injection_html($this->input->post('nametask'))),
                        'detail' => $txtContent,
                        'note' => $txtContentNote,
                        'created_date' => $currentDate,
                        'updated_date' => 0,
                        'added_date' => $dayadd,
                        'asigned_user' => $idstaff,
                        'store_id' => $userNameID,
                        'status' => $status,
                        'date_img' => $dir_image,
                        'images1' => $images1,
                        'images2' => $images2,
                        'images3' => $images3,
                        'file1' => $files1,
                        'file2' => $files2,
                        'file3' => $files3
                    );
                    if ($this->staff_model->add($dataAdd)) {
                        $this->session->set_flashdata('sessionSuccessSendContactAccount', 1);
                    }
                    $this->session->set_userdata('sessionTimePosted', time());
                    redirect(base_url() . 'account/staffs/task/' . $idstaff . '/month/' . $getVarMonth, 'location');
                }
            }
            $this->load->view('home/account/staff/created', $data);
        } elseif (strtolower($this->uri->segment(9)) == 'edit' && $getVarEdit['edit'] != FALSE) {
            $data['menuPanelGroup'] = 4;
	        $data['menuSelected'] = 'task';
            $this->load->model('taskcomment_model');
            #END Menu 2
            if ($this->session->flashdata('sessionSuccessSendContactAccount')) {
                $data['successSendContactAccount'] = true;
            } else {
                $this->load->library('form_validation');
                $data['successSendContactAccount'] = false;
                #BEGIN: Set rules
                $this->form_validation->set_rules('nametask', 'lang:title_contact_label_send', 'trim|required|callback__exist_title_contact');
                $this->form_validation->set_rules('txtContent', 'lang:txtcontent_contact_label_send', 'trim|required|min_length[10]|max_length[1000]');
                #BEGIN: Set message
                $this->form_validation->set_message('required', $this->lang->line('required_message'));
                $this->form_validation->set_message('min_length', $this->lang->line('min_length_message'));
                $this->form_validation->set_message('max_length', $this->lang->line('max_length_message'));
                $this->form_validation->set_message('_exist_title_contact', $this->lang->line('_exist_title_contact_message_send'));
                $this->form_validation->set_message('_valid_captcha_contact', $this->lang->line('_valid_captcha_contact_message_send'));
                $this->form_validation->set_error_delimiters('<div class="div_errorpost">', '</div>');
                #END Set message                
                $currentDate = mktime(0, 0, 0, $getVarMonth, $getday, date('Y'));
                $taskedit = $this->staff_model->get('id, name, detail, note, created_date, asigned_user, store_id, status, date_img, images1, images2, images3, file1, file2, file3 ', 'created_date = ' . $currentDate . ' and asigned_user =' . $idstaff . ' and store_id =' . (int)$this->session->userdata('sessionUser'));
                $data['taskedit'] = $taskedit;
                $select = "id, task_id, id_user, comment, use_id, use_username, use_fullname, avatar, tbtt_task_comment.created_date";
                $join = "LEFT";
                $sort = 'id';
                $by = 'DESC';
                $on = "tbtt_task_comment.id_user = tbtt_user.use_id";
                $data['comments'] = $this->taskcomment_model->fetch_join($select, $join, 'tbtt_user', $on, 'task_id = ' . $getVarid, $sort, $by, 0, -1);
                $pageUrl = '';
                $pageSort = '';
                $action = array('detail', 'search', 'keyword', 'status', 'by', 'page', 'filter', 'id');
                $get_Var = $this->uri->uri_to_assoc(11, $action);
                $data['statusUrl'] = base_url() . 'account/staffs/task/' . $idstaff . '/month/' . $getVarMonth . '/day/' . $getday . '/edit/' . $getVarid . $pageUrl . $pageSort;
                if ($get_Var['status'] != FALSE && trim($get_Var['status'])) {
                    if (strtolower($get_Var['status']) == 'active') {
                        $this->staff_model->update(array('status' => 2), "id = " . $getVarid);
                    } elseif (strtolower($get_Var['status']) == 'deactive') {
                        $this->staff_model->update(array('status' => 1), "id = " . $getVarid);
                    }

                    redirect(base_url() . 'account/staffs/task/' . $idstaff . '/month/' . $getVarMonth . '/day/' . $getday . '/edit/' . $getVarid, 'location');
                }
                if ($this->form_validation->run() != FALSE) {
                    /*Start upload images*/
                    $this->load->library('upload');
                    $pathImage = "media/images/staff/";
                    $pathWord = "media/word/staff/";
                    $pathExcel = "media/excel/staff/";
                    $pathPdf = "media/pdf/staff/";
                    #Create folder
                    $dir_image = date('dmY');
                    $image = 'none.gif';
                    if (!is_dir($pathImage . $dir_image)) {
                        @mkdir($pathImage . $dir_image, 0777, true);
                        $this->load->helper('file');
                        @write_file($pathImage . $dir_image . '/index.html', '<p>Directory access is forbidden.</p>');
                    }
                    if (!is_dir($pathWord . $dir_image)) {
                        @mkdir($pathWord . $dir_image, 0777, true);
                        $this->load->helper('file');
                        @write_file($pathWord . $dir_image . '/index.html', '<p>Directory access is forbidden.</p>');
                    }
                    if (!is_dir($pathExcel . $dir_image)) {
                        @mkdir($pathExcel . $dir_image, 0777, true);
                        $this->load->helper('file');
                        @write_file($pathExcel . $dir_image . '/index.html', '<p>Directory access is forbidden.</p>');
                    }
                    if (!is_dir($pathPdf . $dir_image)) {
                        @mkdir($pathPdf . $dir_image, 0777, true);
                        $this->load->helper('file');
                        @write_file($pathPdf . $dir_image . '/index.html', '<p>Directory access is forbidden.</p>');
                    }
                    $config['upload_path'] = $pathImage . $dir_image . '/';
                    $config['allowed_types'] = 'gif|jpg|png|doc|docx|pdf|xlsx';
                    $config['max_size'] = 1024;#KB
                    $config['max_width'] = 1024;#px
                    $config['max_height'] = 1024;#px
                    $config['encrypt_name'] = true;
                    $this->upload->initialize($config);
                    if ($this->upload->do_upload('images1')) {
                        $uploadData = $this->upload->data();
                        if ($uploadData['is_image'] == TRUE) {
                            $image = $uploadData['file_name'];
                        } elseif (file_exists($pathImage . $dir_image . '/' . $uploadData['file_name'])) {
                            @unlink($pathImage . $dir_image . '/' . $uploadData['file_name']);
                        }
                    }
                    if ($image == 'none.gif') {
                        #Remove dir
                        $this->load->library('file');
                        if (trim($dir_image) != '' && trim($dir_image) != 'default' && is_dir('media/images/staff/' . $dir_image) && count($this->file->load('media/images/staff/' . $dir_image, 'index.html')) == 0) {
                            if (file_exists('media/images/staff/' . $dir_image . '/index.html')) {
                                @unlink('media/images/staff/' . $dir_image . '/index.html');
                            }
                            @rmdir('media/images/staff/' . $dir_image);
                        }
                    }

                    //edit upload image 2
                    if ($this->upload->do_upload('images2')) {
                        $uploadData2 = $this->upload->data();
                        if ($uploadData2['is_image'] == TRUE) {
                            $image = $uploadData2['file_name'];
                        } elseif (file_exists($pathImage . $dir_image . '/' . $uploadData2['file_name'])) {
                            @unlink($pathImage . $dir_image . '/' . $uploadData2['file_name']);
                        }
                    }
                    if ($image == 'none.gif') {
                        #Remove dir
                        $this->load->library('file');
                        if (trim($dir_image) != '' && trim($dir_image) != 'default' && is_dir('media/images/staff/' . $dir_image) && count($this->file->load('media/images/staff/' . $dir_image, 'index.html')) == 0) {
                            if (file_exists('media/images/staff/' . $dir_image . '/index.html')) {
                                @unlink('media/images/staff/' . $dir_image . '/index.html');
                            }
                            @rmdir('media/images/staff/' . $dir_image);
                        }
                    }
                    //edit upload image 3
                    if ($this->upload->do_upload('images3')) {
                        $uploadData3 = $this->upload->data();
                        if ($uploadData3['is_image'] == TRUE) {
                            $image = $uploadData3['file_name'];

                        } elseif (file_exists($pathImage . $dir_image . '/' . $uploadData3['file_name'])) {
                            @unlink($pathImage . $dir_image . '/' . $uploadData3['file_name']);
                        }
                    }
                    if ($image == 'none.gif') {
                        #Remove dir
                        $this->load->library('file');
                        if (trim($dir_image) != '' && trim($dir_image) != 'default' && is_dir('media/images/staff/' . $dir_image) && count($this->file->load('media/images/staff/' . $dir_image, 'index.html')) == 0) {
                            if (file_exists('media/images/staff/' . $dir_image . '/index.html')) {
                                @unlink('media/images/staff/' . $dir_image . '/index.html');
                            }
                            @rmdir('media/images/staff/' . $dir_image);
                        }
                    }
                    $db_file1 = '';
                    $db_file2 = '';
                    $db_file3 = '';
                    //edit upload file 1
                    $config['allowed_types'] = 'doc|docx';
                    $config['max_size'] = 102400;#KB                    
                    $config['encrypt_name'] = true;
                    $this->upload->initialize($config);
                    if ($this->upload->do_upload('file1')) {
                        $uploadFile1 = $this->upload->data();
                        if ($uploadFile1['is_image'] == TRUE) {
                            $db_file1 = $uploadFile1['file_name'];

                        } elseif (file_exists($pathWord . $dir_image . '/' . $uploadFile1['file_name'])) {
                            @unlink($pathWord . $dir_image . '/' . $uploadFile1['file_name']);
                        }
                    }
                    
                    //edit upload file 2
                    $config['allowed_types'] = 'pdf';
                    $config['max_size'] = 102400;#KB
                    $config['encrypt_name'] = true;
                    $this->upload->initialize($config);
                    if ($this->upload->do_upload('file2')) {
                        $uploadFile2 = $this->upload->data();
                        if ($uploadFile2['is_image'] == TRUE) {
                            $db_file2 = $uploadFile2['file_name'];
                        } elseif (file_exists($pathWord . $dir_image . '/' . $uploadFile2['file_name'])) {
                            @unlink($pathWord . $dir_image . '/' . $uploadFile2['file_name']);
                        }
                    }

                    //edit upload file 3
                    $config['allowed_types'] = 'xls|xlsx';
                    $config['max_size'] = 102400;#KB
                    $config['encrypt_name'] = true;
                    $this->upload->initialize($config);
                    if ($this->upload->do_upload('file3')) {
                        $uploadFile3 = $this->upload->data();
                        if ($uploadFile3['is_image'] == TRUE) {
                            $db_file3 = $uploadFile3['file_name'];
                        } elseif (file_exists($pathWord . $dir_image . '/' . $uploadFile3['file_name'])) {
                            @unlink($pathWord . $dir_image . '/' . $uploadFile3['file_name']);
                        }
                    }
                    //End upload images
                    $txtContent = $this->input->post('txtContent');

                    $curDate = $this->input->post('currentDate');
                    $UpdateDate = time();
                    $userNameID = (int)$this->session->userdata('sessionUser');
                    $txtContentNote = $this->input->post('txtContentnote');
                    $txtContentComment = $this->input->post('txtContentComment');
                    $oldimages1 = $this->input->post('oldimages1');
                    $oldimages2 = $this->input->post('oldimages2');
                    $oldimages3 = $this->input->post('oldimages3');
                    $oldfile1 = $this->input->post('oldfile1');
                    $oldfile2 = $this->input->post('oldfile2');
                    $oldfile3 = $this->input->post('oldfile3');
                    $images1 = $uploadData['file_name'];
                    $images2 = $uploadData2['file_name'];
                    $images3 = $uploadData3['file_name'];
                    $files1 = $uploadFile1['file_name'];
                    $files2 = $uploadFile2['file_name'];
                    $files3 = $uploadFile3['file_name'];

                    if (!$images1) {
                        $images1 = $oldimages1;
                    }
                    if (!$images2) {
                        $images2 = $oldimages2;
                    }
                    if (!$images3) {
                        $images3 = $oldimages3;
                    }
                    if (!$files1) {
                        $files1 = $oldfile1;
                    }
                    if (!$files2) {
                        $files2 = $oldfile2;
                    }
                    if (!$files3) {
                        $files3 = $oldfile3;
                    }
                    
                    $dataEdit = array(
                        'name' => trim($this->filter->injection_html($this->input->post('nametask'))),
                        'detail' => $txtContent,
                        'note' => $txtContentNote,
                        'created_date' => $curDate,
                        'updated_date' => $UpdateDate,
                        'asigned_user' => $idstaff,
                        'store_id' => $userNameID,
                        'date_img' => $dir_image,
                        'images1' => $images1,
                        'images2' => $images2,
                        'images3' => $images3,
                        'file1' => $files1,
                        'file2' => $files2,
                        'file3' => $files3

                    );
                    if ($this->staff_model->update($dataEdit, 'id = ' . $getVarid)) {
                        $this->session->set_flashdata('sessionSuccessSendContactAccount', 1);
                    }
                    $dataAdd = array(
                        'task_id' => $getVarid,
                        'id_user' => (int)$this->session->userdata('sessionUser'),
                        'comment' => $txtContentComment,
                        'created_date' => $currentDate
                    );
                    if (isset($txtContentComment) && !empty($txtContentComment)) {
                        $this->staff_model->update($dataEdit, 'id = ' . $getVarid);
                        if ($this->taskcomment_model->add($dataAdd)) {
                            $this->session->set_flashdata('sessionSuccessSendContactAccount', 1);
                            redirect(base_url() . 'account/staffs/task/' . $idstaff . '/month/' . $getVarMonth . '/day/' . $getday . '/edit/' . $getVarid, 'location');
                        }
                    }
                    $this->session->set_userdata('sessionTimePosted', time());
                }
            }
            $this->load->view('home/account/staff/created', $data);
        } elseif (strtolower($this->uri->segment(5)) == 'month') {
            $taskuser = $this->user_model->get('use_id,use_username, use_fullname', 'use_status = 1 and use_id =' . (int)$this->uri->segment(4));
            $data['taskuser'] = $taskuser->use_fullname;
            $data['taskuserfull'] = $taskuser->use_username;
            $taskdetail = $this->staff_model->fetch('id, detail, note, created_date, asigned_user, store_id ', 'asigned_user =' . $idstaff . ' and store_id =' . (int)$this->session->userdata('sessionUser'));
            $data['taskdetail'] = $taskdetail;
            $this->load->view('home/account/staff/task', $data);
        } else {
            if (strtolower($this->uri->segment(3)) == 'all') {
                ///////modified/////////////
                $uid_login = $this->session->userdata('sessionUser');
                /////lấy nhân viên đc tạo bảo user login//////////
                $select = 'use_id, parent_id,use_username, use_fullname,use_email, use_mobile ,use_message';
                $where = 'use_status = 1 and use_group =' . StaffStoreUser . ' and parent_id = ' . $uid_login;
                ///////End modified/////////
                
                $sort = 'use_id';
                $by = 'DESC';
                $sortUrl = '';
                $pageUrl = '';
                $pageSort = '';
                $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
                $getVar = $this->uri->uri_to_assoc(4, $action);
                #If have sort
                #If have sort
                if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
                    switch (strtolower($getVar['sort'])) {
                        case 'name':
                            $pageUrl .= '/sort/name';
                            $sort = "use_username";
                            break;
                        default:
                            $pageUrl .= '/sort/id';
                            $sort = "use_id";

                    }
                    if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                        $pageUrl .= '/by/desc';
                        $by = "DESC";
                    } else {
                        $pageUrl .= '/by/asc';
                        $by = "ASC";
                    }
                }
                #END Search & sort
                #If have page
                if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
                    $start = (int)$getVar['page'];
                    $pageSort .= '/page/' . $start;
                } else {
                    $start = 0;
                }
                #END Search & sort
                #BEGIN: Create link sort
                $data['sortUrl'] = base_url() . 'account/staffs/all' . $sortUrl . '/sort/';
                $data['pageSort'] = $pageSort;
                #END Create link sort
                #BEGIN: Pagination
                $this->load->library('pagination');
                #Count total record
                $totalRecord = count($this->user_model->fetch("use_id", $where, "", ""));
                $config['base_url'] = base_url() . 'account/staffs/all' . $pageUrl . '/page/';
                $limmit = 20;
                $config['total_rows'] = $totalRecord;
                $config['per_page'] = $limmit;
                $config['num_links'] = 1;
                $config['uri_segment'] = 4;
                $config['cur_page'] = $start;
                $config['cur_page'] = $start;
                $this->pagination->initialize($config);
                $data['linkPage'] = $this->pagination->create_links();
                #END Pagination
                #sTT - So thu tu
                $data['sTT'] = $start + 1;    
                $staffs = $this->user_model->fetch($select, $where, $sort, $by, $start, $limmit);
                $LArray = array();
                if (!empty($staffs)) {
                    foreach ($staffs as $key => $row) {
                        $this->db->select('rol_id');
                        $emp_roles = $this->db->get_where('tbtt_user_emp_permission', array('user_id' => $row->use_id))->result();
                        array_walk($emp_roles, function(&$item) {
                             $item = $item->rol_id ;
                        });
                        $LArray[] = array(
                            'use_id' => $row->use_id,
                            'use_username' => $row->use_username,
                            'use_fullname' => $row->use_fullname,
                            'use_email' => $row->use_email,
                            'use_mobile' => $row->use_mobile,
                            'parent_id' => $row->parent_id,
                            'use_message' => $row->use_message,
                            'emp_roles' => $emp_roles,
                        );
                    }
                }

                // get list id parent
                $get_idnvgh = $this->user_model->fetch('*', 'use_id =' . $this->session->userdata('sessionUser'));
                $where = 'use_status = 1 and use_id ="' . $this->session->userdata('sessionUser') . '" and shc_saler = "' . $get_idnvgh[0]->parent_id . '"';
                $on2 = "tbtt_user.use_id = tbtt_showcart.af_id";
                $model_aff = $this->user_model->fetch_join1($select, "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", $on2, $where, '', '', 0, '');
                $data['doanhthu'] = $model_aff[0]->showcarttotal;

                #Load view
                $data['staffs'] = $LArray;
                $data['totalRecord'] = $totalRecord;
                //lấy data list role
                $select = '*'; $where = 'status = 1'; $order = 'id'; $by = 'ASC'; $distinct = false;
                if($this->session->userdata('sessionGroup') == BranchUser) {
                    $where .= ' AND id != 2';
                }
                //chia array thành nhiều array có 4 value
                $data['list_role'] = array_chunk($this->user_emp_role_model->fetch($select,$where,$order,$by,'','',$distinct), 4);
                $this->load->view('home/account/staff/detail', $data);
            }
        }
    }

    function viewtasks()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == StaffUser
            || $group_id == BranchUser
            || $group_id == StaffStoreUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        $this->load->model('staff_model');
        #BEGIN: Menu 1
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'task';
        $data['menuType'] = 'account';

        $use_group_string = '(use_group = ' . StaffUser . ' OR use_group = ' . AffiliateStoreUser . ' OR use_group = ' . Developer2User . ' OR use_group = ' . Developer1User . ' OR use_group = ' . Partner2User . ' OR use_group = ' . Partner1User . ')';
        $staffs = $this->user_model->fetch('use_id, use_username, use_fullname', 'use_status = 1 and ' . $use_group_string . ' and use_id =' . (int)$this->session->userdata('sessionUser'));
        $data['staffs'] = $staffs;
        $idstaff = (int)$this->session->userdata('sessionUser');
        $data['id_staff'] = $idstaff;

        foreach ($staffs as $staff) {
            if ($staff->use_id == $idstaff) {
                $data['staff'] = $staff->use_fullname;
                $data['staffuser'] = $staff->use_username;
            }
        }

        $getVar = strtolower($this->uri->segment(7));
        $getday = strtolower($this->uri->segment(8));
        $getVarEdit = strtolower($this->uri->segment(9));
        $getVarid = strtolower($this->uri->segment(10));
        $getVarMonth = strtolower($this->uri->segment(6));
        $idstaff = strtolower($this->uri->segment(4));

        if (strtolower($this->uri->segment(3)) == 'month') {
            $use_group_string = '(use_group = ' . StaffUser . ' OR use_group = ' . AffiliateStoreUser . ' OR use_group = ' . BranchUser . ')';
            $taskuser = $this->user_model->get('use_id, use_username, use_fullname', 'use_status = 1 and ' . $use_group_string . ' and use_id =' . (int)$this->session->userdata('sessionUser'));
            $data['taskuser'] = $taskuser;

            $idstaff = (int)$this->session->userdata('sessionUser');
            if ($taskuser->use_id == $idstaff) {
                $data['taskuser'] = $taskuser->use_fullname;
                $data['taskuserfull'] = $taskuser->use_username;
            }

            $taskdetail = $this->staff_model->fetch('id, detail, note, created_date, asigned_user, store_id ', 'asigned_user =' . $idstaff);
            $data['taskdetail'] = $taskdetail;

            $this->load->view('home/account/staff/viewtask', $data);
        } else {
            $sort = 'use_id';
            $by = 'DESC';
            $sortUrl = '';
            $pageUrl = '';
            $pageSort = '';
            $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
            $getVar = $this->uri->uri_to_assoc(3, $action);
            #If have sort
            if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
                switch (strtolower($getVar['sort'])) {
                    case 'name':
                        $pageUrl .= '/sort/name';
                        $sort = "use_username";
                        break;
                    case 'hoten':
                        $pageUrl .= '/sort/hoten';
                        $sort = "use_fullname";
                        break;
                    default:
                        $pageUrl .= '/sort/id';
                        $sort = "use_id";

                }
                if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                    $pageUrl .= '/by/desc';
                    $by = "DESC";
                } else {
                    $pageUrl .= '/by/asc';
                    $by = "ASC";
                }
            }
            #If have page
            if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
                $start = (int)$getVar['page'];
                $pageSort .= '/page/' . $start;
            } else {
                $start = 0;
            }
            #END Search & sort
            #BEGIN: Create link sort
            $data['sortUrl'] = base_url() . 'account/staffs' . $sortUrl . '/sort/';
            $data['pageSort'] = $pageSort;
            $where = '';
            #END Create link sort
            #BEGIN: Pagination
            $this->load->library('pagination');
            #Count total record
            $limmit = 15;
            //$totalRecord = count($this->staff_model->fetch("id", $where, "", ""));
            $totalRecord = count($this->user_model->fetch('use_id,use_username, use_fullname,use_email, use_mobile', 'use_status = 1 and use_group = 11 and parent_id =' . (int)$this->session->userdata('sessionUser'), "", "", 0, ""));
            $config['base_url'] = base_url() . 'account/staffs' . $pageUrl . '/page/';
            $config['total_rows'] = $totalRecord;
            $config['per_page'] = $limmit;
            $config['num_links'] = 1;
            $config['uri_segment'] = 3;
            $config['cur_page'] = $start;
            $this->pagination->initialize($config);
            $data['linkPage'] = $this->pagination->create_links();
            #END Pagination
            #sTT - So thu tu
            #Fetch record
            $staffs = $this->user_model->fetch('use_id,use_username, use_fullname,use_email, use_mobile', 'use_status = 1 and use_group = 11 and parent_id =' . (int)$this->session->userdata('sessionUser'), $sort, $by, $start, $limmit);
            $data['staffs'] = $staffs;
            #Load view
            $this->load->view('home/account/staff/defaults', $data);
        }
    }

    function task_today()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == BranchUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $sort = 'updated_date';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page', 'filter', 'day');
        $getVar = $this->uri->uri_to_assoc(5, $action);
        #If have page
        #END Create link sort

        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'title':
                    $pageUrl .= '/sort/title';
                    $sort = "name";
                    break;
                case 'nhanvien':
                    $pageUrl .= '/sort/nhanvien';
                    $sort = "use_username";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/staffs/task/today' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        $where = 'created_date = ' . (int)$currentDate . ' and parent_id = ' . (int)$this->session->userdata('sessionUser');
        $limmit = -1;
        #BEGIN: Menu 1
        $data['menuSelected'] = 'task';
        $data['menuType'] = 'account';

        $this->load->model('staff_model');
        $select = "id, name, detail, note, asigned_user, store_id, created_date, status, use_id, parent_id, use_username, use_fullname";
        $join = "LEFT";
        $on = "tbtt_task.asigned_user = tbtt_user.use_id";
        $data['tasklist'] = $this->staff_model->fetch_join($select, $join, 'tbtt_user', $on, $where, $sort, $by, $start, $limmit);
        $statusUrl = $pageUrl . $pageSort;
        $data['statusUrl'] = base_url() . 'account/staffs/task/today' . $statusUrl;
        $getday = strtolower($this->uri->segment(6));
        if ($getVar['filter'] != FALSE && trim($getVar['filter']) != '') {
            if (isset($getday) && $getday > 0) {
                $datefil = mktime(0, 0, 0, date('m'), $getday, date('Y'));
            }
            $data['tasklist'] = $this->staff_model->fetch_join($select, $join, 'tbtt_user', $on, 'created_date = ' . (int)$datefil . ' and parent_id = ' . (int)$this->session->userdata('sessionUser'), $sort, $by, $start, $limmit);
            // redirect($data['statusUrl'], 'location');
        }
        $totalRecord = count($data['tasklist']);
        $config['base_url'] = base_url() . 'account/staff/task/today' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        $this->load->view('home/account/staff/today', $data);
    }
    /**
     *
    */
    function mytask()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == StaffUser) {
	    
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $data['menuSelected'] = 'task';
        $data['menuType'] = 'account';
        if ($this->session->flashdata('sessionSuccessSendContactAccount')) {
            $data['successSendContactAccount'] = true;
        } else {
            $this->load->library('form_validation');
            $data['successSendContactAccount'] = false;

            $this->load->model('staff_model');
            $this->load->model('taskcomment_model');
            $idtask = $this->input->post('idtask');
            $txtContent = $this->input->post('txtContent');
            $status = $this->input->post('status');
            $pageUrl = '';
            $pageSort = '';
            $action = array('detail', 'search', 'keyword', 'status', 'by', 'page', 'filter', 'id');
            $getVar = $this->uri->uri_to_assoc(4, $action);
            $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
            $statusUrl = $pageUrl . $pageSort;
            $data['statusUrl'] = base_url() . 'account/staffs/mytask' . $statusUrl;
            $getday = strtolower($this->uri->segment(5));
            if ($idtask != FALSE && (int)$idtask > 0) {
                $this->staff_model->update(array('status' => 1), "id = " . (int)$idtask);
                echo "1";
                exit();
            }
            if ($getVar['filter'] != FALSE && trim($getVar['filter']) != '') {
                if (isset($getday) && $getday > 0) {
                    $datefil = mktime(0, 0, 0, date('m'), $getday, date('Y'));
                }
                $mytask = $this->staff_model->get('id, name, detail,images1, note, created_date, asigned_user, store_id, status ', 'created_date =' . (int)$datefil . ' and asigned_user =' . (int)$this->session->userdata('sessionUser'));
                // redirect($data['statusUrl'], 'location');
            } else {
                $mytask = $this->staff_model->get('id, name, detail, images1, note, created_date, asigned_user, store_id, status ', 'created_date =' . (int)$currentDate . ' and asigned_user =' . (int)$this->session->userdata('sessionUser'));
            }
            if (count($mytask->id) > 0) {
                $select = "id, task_id, id_user, comment, use_id, use_username, use_fullname, avatar, tbtt_task_comment.created_date";
                $join = "LEFT";
                $sort = 'id';
                $by = 'DESC';
                $on = "tbtt_task_comment.id_user = tbtt_user.use_id";
                $data['comments'] = $this->taskcomment_model->fetch_join($select, $join, 'tbtt_user', $on, 'task_id = ' . $mytask->id, $sort, $by, 0, -1);
            }
            $dataAdd = array(
                'task_id' => (int)$this->input->post('id_task'),
                'id_user' => (int)$this->session->userdata('sessionUser'),
                'comment' => $txtContent,
                'created_date' => time()
            );
            if (!empty($txtContent)) {
                if ($this->taskcomment_model->add($dataAdd)) {
                    $this->session->set_flashdata('sessionSuccessSendContactAccount', 1);
                }
                redirect(base_url() . 'account/staffs/mytask', 'location');
            }
            $dataedit = array(
                'status' => (int)$status,
                'updated_date' => time()
            );
            if (!empty($idtask)) {
                if ($this->staff_model->update($dataedit, 'id = ' . $idtask)) {
                    $this->session->set_flashdata('sessionSuccessSendContactAccount', 1);
                }
            }
            $this->session->set_userdata('sessionTimePosted', time());
        }
        $data['mytask'] = $mytask;
        $this->load->view('home/account/staff/mytask', $data);
    }

    function treetask()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == StaffUser
            || $group_id == StaffStoreUser
            || $group_id == BranchUser
        ) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        if ($this->session->flashdata('sessionSuccessSendContactAccount')) {
            $data['successSendContactAccount'] = true;
        } else {
            $this->load->library('form_validation');
            $data['successSendContactAccount'] = false;
            $data['menuSelected'] = 'task';
            $data['menuType'] = 'account';

            $this->load->model('staff_model');
            $this->load->model('taskcomment_model');
            $idtask = $this->input->post('idtask');
            $txtContent = $this->input->post('txtContent');
            $status = $this->input->post('status');
            $pageUrl = '';
            $pageSort = '';
            $action = array('detail', 'search', 'keyword', 'status', 'by', 'page', 'filter', 'id');
            $getVar = $this->uri->uri_to_assoc(3, $action);
            $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
            $statusUrl = $pageUrl . $pageSort;
            $data['statusUrl'] = base_url() . 'account/treetask' . $statusUrl;
            $getday = strtolower($this->uri->segment(4));


            if ($idtask != FALSE && (int)$idtask > 0) {
                $this->staff_model->update(array('status' => 1), "id = " . (int)$idtask);
                //  $this->load->library('user_agent');
                //  redirect($this->agent->referrer());
                echo "1";
                exit();
            }
            if ($getVar['filter'] != FALSE && trim($getVar['filter']) != '') {
                if (isset($getday) && $getday > 0) {
                    $datefil = mktime(0, 0, 0, date('m'), $getday, date('Y'));
                }
                $mytask = $this->staff_model->get('id, name,date_img, images1, images2, images3, file1, file2, file3, detail, note, created_date, asigned_user, store_id, status ', 'created_date =' . (int)$datefil . ' and asigned_user =' . (int)$this->session->userdata('sessionUser'));
                // redirect($data['statusUrl'], 'location');
            } else {
                $mytask = $this->staff_model->get('id, name,date_img, images1, images2, images3, file1, file2, file3, detail, note, created_date, asigned_user, store_id, status ', 'created_date =' . (int)$currentDate . ' and asigned_user =' . (int)$this->session->userdata('sessionUser'));
            }
            if (count($mytask->id) > 0) {
                $select = "id, task_id, id_user, comment, use_id, use_username, use_fullname";
                $join = "LEFT";
                $sort = 'id';
                $by = 'DESC';
                $on = "tbtt_task_comment.id_user = tbtt_user.use_id";
                $data['comments'] = $this->taskcomment_model->fetch_join($select, $join, 'tbtt_user', $on, 'task_id = ' . $mytask->id, $sort, $by, 0, -1);
            }
            $dataAdd = array(
                'task_id' => (int)$idtask,
                'id_user' => (int)$this->session->userdata('sessionUser'),
                'comment' => $txtContent,
                'created_date' => (int)$currentDate
            );
            if (!empty($txtContent)) {
                if ($this->taskcomment_model->add($dataAdd)) {
                    $this->session->set_flashdata('sessionSuccessSendContactAccount', 1);
                }
                redirect(base_url() . 'account/treetask', 'location');
            }
            $dataedit = array(
                'status' => (int)$status,
                'updated_date' => time()
            );
            if (!empty($idtask)) {
                if ($this->staff_model->update($dataedit, 'id = ' . $idtask)) {
                    $this->session->set_flashdata('sessionSuccessSendContactAccount', 1);
                }
            }
        }
        $data['mytask'] = $mytask;
        $this->load->view('home/account/staff/todaytree', $data);
    }

    function treetasktoday()
    {
        $data['menuPanelGroup'] = 4;
	    $data['menuSelected'] = 'task';
        $data['menuType'] = 'account';
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $sort = 'updated_date';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page', 'filter', 'day');
        $getVar = $this->uri->uri_to_assoc(5, $action);
        #If have page
        #END Create link sort

        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'title':
                    $pageUrl .= '/sort/title';
                    $sort = "name";
                    break;
                case 'nhanvien':
                    $pageUrl .= '/sort/nhanvien';
                    $sort = "use_username";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/staffs/task/today' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        $where = 'created_date = ' . (int)$currentDate . ' and parent_id = ' . (int)$this->session->userdata('sessionUser');
        $limmit = -1;        

        $this->load->model('staff_model');
        $select = "id, name, detail, note, asigned_user, store_id, created_date, status, use_id, parent_id, use_username, use_fullname";
        $join = "LEFT";
        $on = "tbtt_task.asigned_user = tbtt_user.use_id";
        $data['tasklist'] = $this->staff_model->fetch_join($select, $join, 'tbtt_user', $on, $where, $sort, $by, $start, $limmit);
        $statusUrl = $pageUrl . $pageSort;
        $data['statusUrl'] = base_url() . 'account/staffs/task/today' . $statusUrl;
        $getday = strtolower($this->uri->segment(6));
        if ($getVar['filter'] != FALSE && trim($getVar['filter']) != '') {
            if (isset($getday) && $getday > 0) {
                $datefil = mktime(0, 0, 0, date('m'), $getday, date('Y'));
            }
            $data['tasklist'] = $this->staff_model->fetch_join($select, $join, 'tbtt_user', $on, 'created_date = ' . (int)$datefil . ' and parent_id = ' . (int)$this->session->userdata('sessionUser'), $sort, $by, $start, $limmit);            
        }

        $totalRecord = count($data['tasklist']);
        $config['base_url'] = base_url() . 'account/staff/task/today' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        $this->load->view('home/account/staff/treetasktoday', $data);
    }

    function treetaskuser()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == BranchUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "use_fullname";
                    break;
                case 'group':
                    $pageUrl .= '/sort/group';
                    $sort = "use_group";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }

        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/treetaskuser' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        $where = '';
        #END Create link sort
        #Keyword
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/treetaskuser' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination

        $this->load->library('pagination');
        #Count total record
        $use_group_query = '';
        if ($group_id == Developer2User) {
            $use_group_query = '(use_group = ' . AffiliateStoreUser . ')';
        }
        if ($group_id == Developer1User) {
            $use_group_query = '(use_group = ' . AffiliateStoreUser . ' OR use_group = ' . Developer2User . ')';
        }
        if ($group_id == Partner2User) {
            $use_group_query = '(use_group = ' . AffiliateStoreUser . ' OR use_group = ' . Developer2User . ' OR use_group = ' . Developer1User . ')';
        }
        if ($group_id == Partner1User) {
            $use_group_query = '(use_group = ' . AffiliateStoreUser . ' OR use_group = ' . Developer2User . ' OR use_group = ' . Developer1User . ' OR use_group = ' . Partner2User . ')';
        }
        if ($group_id == CoreMemberUser) {
            $use_group_query = '(use_group = ' . AffiliateStoreUser . ' OR use_group = ' . Developer2User . ' OR use_group = ' . Developer1User . ' OR use_group = ' . Partner2User . ' OR use_group = ' . Partner1User . ')';
        }
        if ($group_id == CoreAdminUser) {
            $use_group_query = '(use_group = ' . AffiliateStoreUser . ' OR use_group = ' . Developer2User . ' OR use_group = ' . Developer1User . ' OR use_group = ' . Partner2User . ' OR use_group = ' . Partner1User . ' OR use_group = ' . CoreMemberUser . ' )';
        }


        $where = $use_group_query . ' and use_status = 1 and parent_id =' . (int)$this->session->userdata('sessionUser');
        $totalRecord = count($this->user_model->fetch("use_id", $where, "", ""));
        $config['base_url'] = base_url() . 'account/treetaskuser' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $limmit = -1;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu

        $staffs = $this->user_model->fetch('use_id,use_username, use_fullname,use_email, use_mobile, use_group', $where, $sort, $by);
        $data['staffs'] = $staffs;
        #Load view
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'task';
        $data['menuType'] = 'account';
        $this->load->view('home/account/staff/assigntasktree', $data);
    }

    function listaffiliate()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == StaffUser
            || $group_id == BranchUser
            || $group_id == StaffStoreUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $uid = $this->uri->segment(3);

        if ($uid > 0) {
            $u_parent = $uid;
            $user_staff = $this->user_model->get(" use_id , use_username ", "use_id = " . $uid);
            $data['user_staff'] = $user_staff;
        } else {
            $u_parent = (int)$this->session->userdata('sessionUser');
        }

        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = $uid;
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(4, $action);
        $listaffiliate = 'listaffiliate';
        $use_group = AffiliateUser;
        $urlPage = 'account/listaffiliate';
        if ($this->uri->segment(3) == 'page') {
            $uid = $this->uri->segment(4);
            $getVar = $this->uri->uri_to_assoc(3, $action);
        } else {
            $urlPage .= '/' . $uid;

        }

        if ($this->uri->segment(2) == 'listbran') {
            $use_group = BranchUser;
            $listaffiliate = 'listbran';
            $urlPage = 'account/listbran/' . $uid;
        }
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "sho_name";
                    break;
                case 'group':
                    $pageUrl .= '/sort/group';
                    $sort = "use_group";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";
            }

            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }

        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/' . $listaffiliate . '/' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        $where = '';
        #END Create link sort
        #Keyword
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/' . $listaffiliate . '/' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination

        $this->load->library('pagination');
        #Count total record

        //$use_group_query = '';
        $use_group_query = '(use_group = ' . AffiliateUser . ')';
        $tree = array();
        $this->getTreeInList($this->session->userdata('sessionUser'), $tree);
        $tree[] = $this->session->userdata('sessionUser');
        $tree = implode(',', $tree);
        if ($uid > 0 && $this->uri->segment(3) != 'page') {
            $wherestore = 'use_status = 1 and use_group = ' . $use_group . ' and parent_invited = ' . $u_parent;
        } else {
            $wherestore = 'use_status = 1 and use_group = ' . $use_group . ' and parent_id IN (' . $tree . ')';
        }
        if ($group_id == AffiliateStoreUser || $group_id == AffiliateUser || $group_id == StaffUser || $group_id == BranchUser || $group_id == StaffStoreUser) {
            $totalRecord = count($this->user_model->fetch_join1("use_id, tbtt_shop.sho_link, tbtt_shop.sho_name, tbtt_shop.sho_user, tbtt_showcart.*, SUM(tbtt_showcart.shc_total) As showcarttotal,", "LEFT", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id", $wherestore, $sort, $by, $start, ''));
        } else {
            $totalRecord = count($this->user_model->fetch_join('use_id, use_username, use_fullname, use_email, use_mobile, use_message, use_group, parent_shop, tbtt_shop.sho_link, tbtt_shop.sho_name', "LEFT", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", $wherestore, $sort, $by, '', ''));
        }
        $limit = settingOtherAccount;
        $config['base_url'] = base_url() . $urlPage . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        $data['stt'] = $start;
        #END Pagination

        $liststore = $this->user_model->fetch_join("use_id, parent_id, use_username, use_fullname, use_email, use_mobile, use_message, tbtt_shop.sho_link, tbtt_shop.sho_name,  tbtt_shop.sho_user,tbtt_shop.domain", "LEFT", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", $wherestore, $sort, $by, $start, $limit);

        $staffs = $this->user_model->fetch_join('use_id, use_username, use_fullname, use_email, use_mobile, use_message, use_group, parent_shop, tbtt_shop.sho_link, tbtt_shop.sho_name', "LEFT", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", $wherestore, $sort, $by, $start, $limit);


        $data['group_id'] = $group_id;
        $data['liststore'] = $liststore;
        $data['staffs'] = $staffs;
        $LArray = array();
        if ($group_id != CoreAdminUser && $group_id != CoreMemberUser && $group_id != Partner1User && $group_id != Partner2User && $group_id != Developer1User && $group_id != Developer2User) {
            if (!empty($liststore)) {
                foreach ($liststore as $key => $row) {
                    $info = $this->get_my_shop($row->use_id);
                    $LArray[] = array(
                        'info_parent' => $info['info_parent'],
                        'link_gh' => $info['link_gh']
                    );
                }
            }

        } else {
            for ($i = 0; $i < count($liststore); $i++) {
                $this->db->cache_off();
                $parentUser = $this->user_model->get("use_id, use_username", "use_id = " . $liststore[$i]->parent_id);
                $LArray[] = array(
                    'info_parent' => $parentUser->use_username
                );
            }
        }
        $data['info_parent'] = $LArray;
        //UPdate parent user for affiliate
        $use_id = (int)$this->input->post('use_id');
        $shop_id = (int)$this->input->post('parent_shop_id');
        if (isset($use_id) && $use_id > 0) {
            $this->user_model->update(array('parent_shop' => $shop_id), 'use_id = ' . $use_id);
            echo '1';
            return false;
            exit();
        }
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'affiliate';
		
        if ($this->uri->segment(2) == 'listbran') {
			$data['menuPanelGroup'] = 4;
            $data['menuSelected'] = 'task';
        }
		
        $data['menuType'] = 'account';
        $data['totalRecord'] = $totalRecord;

        #Load view
        $this->load->view('home/account/tree/listaffiliate', $data);
    }

    function getStaffList($useGroup, $use_id)
    {
        $tree = array();
        if (!in_array($use_id, $tree)) {
            $tree[] = $use_id;
        }
        switch ($useGroup) {
            // case StaffUser: $tree[] = $use_id; break;
            case StaffStoreUser:
                $sub_nv = $this->user_model->get_list_user('use_id, use_group', 'use_group IN (' . BranchUser . ', ' . StaffUser . ') AND use_status = 1 AND parent_id = ' . $use_id);
                if (!empty($sub_nv)) {
                    foreach ($sub_nv as $k => $v) {
                        if (!in_array($v->use_id, $tree)) {
                            $tree[] = $v->use_id;
                        }
                        if ($v->use_group == BranchUser) {
                            $sub_nvcn = $this->user_model->get_list_user('use_id, use_group', 'use_group = ' . StaffUser . ' AND use_status = 1 AND parent_id = ' . $v->use_id);
                            if (!empty($sub_nvcn)) {
                                foreach ($sub_nvcn as $k => $v1) {
                                    if (!in_array($v1->use_id, $tree)) {
                                        $tree[] = $v1->use_id;
                                    }
                                }
                            }
                        }
                    }
                }
                break;
            case BranchUser:
                $sub_nvcn = $this->user_model->get_list_user('use_id, use_group', 'use_group = ' . StaffUser . ' AND use_status = 1 AND parent_id = ' . $use_id);
                if (!empty($sub_nvcn)) {
                    foreach ($sub_nvcn as $k => $v1) {
                        if (!in_array($v1->use_id, $tree)) {
                            $tree[] = $v1->use_id;
                        }
                    }
                }
                break;
        }
        return implode(',', $tree);
    }

    function statisticlistaffiliate()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == StaffUser
            || $group_id == BranchUser
            || $group_id == StaffStoreUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        $group_id = $this->session->userdata('sessionGroup');
        if($group_id == StaffStoreUser) {
            $user_id = $this->user_model->get("parent_id", "use_id = " . $this->session->userdata('sessionUser'))->parent_id;
            $user_group = $this->user_model->get("use_group", "use_id = " . $user_id)->use_group;
        } else {
            $user_id = $this->session->userdata('sessionUser');
            $user_group = $this->session->userdata('sessionGroup');
        }

        $datefrom = $_REQUEST['datefrom'];
        $dateto = $_REQUEST['dateto'];
        $startdate = strtotime($datefrom);
        $enddate = strtotime($dateto);
        $enddatenull = mktime(0, 0, 0, 01, 01, 2006);

        $this->session->set_userdata('dateto', $dateto);
        $this->session->set_userdata('datefrom', $datefrom);
        $data['afsavedateto'] = $dateto;
        $data['afsavedatefrom'] = $datefrom;

        $select = '';
        $where = '';
        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);

        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "sho_name";
                    break;
                case 'group':
                    $pageUrl .= '/sort/group';
                    $sort = "use_group";
                    break;
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/statisticlistaffiliate' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        $where = '';
        #END Create link sort
        #Keyword
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/statisticlistaffiliate' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort

        $use_group_query = '(use_group = ' . AffiliateUser . ')';
        $tree = array();
        //$this->getTreeInList($this->session->userdata('sessionUser'), $tree);

        //Lấy danh sách các vị trí CN và NV của GH
        // $sub_tructiep = $this->user_model->get_list_user('use_id, use_group', 'use_group = 14 AND use_status = 1 AND parent_id = ' . $user_id);

        // if (!empty($sub_tructiep)) {
        //     foreach ($sub_tructiep as $key => $value) {
                //  $tree[] = $this->getStaffList($value->use_group,$value->use_id); dung duoc
                // $tree[] = $value->use_id;
                //Nếu là chi nhánh, lấy danh sách nhân viên
                // if ($value->use_group == StaffStoreUser) {
                //     $sub_nv = $this->user_model->get_list_user('use_id, use_group', 'use_group IN (' . BranchUser . ', ' . StaffUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                //     if (!empty($sub_nv)) {
                //         foreach ($sub_nv as $k => $v) {
                //             $tree[] = $staff[] = $v->use_id;
                //             if ($v->use_group == BranchUser) {
                //                 $sub_nvcn = $this->user_model->get_list_user('use_id, use_group', 'use_group = ' . StaffUser . ' AND use_status = 1 AND parent_id = ' . $v->use_id);
                //                 if (!empty($sub_nvcn)) {
                //                     foreach ($sub_nvcn as $k => $v1) {
                //                         $tree[] = $staff[] = $v1->use_id;
                //                     }
                //                 }
                //             }
                //         }
                //     }
                // }
                // if ($value->use_group == BranchUser) {
                //     // $staff = $this->getStaffList($value->use_group,$value->use_id);
                //     $sub_nv = $this->user_model->get_list_user('use_id, use_group', 'use_group = ' . StaffUser . ' AND use_status = 1 AND parent_id = ' . $value->use_id);
                //     if (!empty($sub_nv)) {
                //         foreach ($sub_nv as $k => $v) {
                //             $tree[] = $v->use_id;
                //         }
                //     }
                // }
            // }
        // }
        $tree[] = $user_id;
        $tree = implode(',', $tree);
        //Lưu trữ session để xem chi tiết các đơn hàng của Aff
        $this->session->set_userdata('tree_array', $tree);

        // $wherestore = 'use_status = 1 AND use_group = ' . AffiliateUser;// ' AND parent_id IN (' . $tree . ') AND shc_saler IN (' . $tree . ')';
        $wherestore = 'use_status = 1 AND shc_saler IN (' . $tree . ') AND af_id > 0';
        
        $get_group = $this->user_model->get('use_group,parent_id', 'use_id = ' . $user_id);
        $idP = '';
        // if ($this->session->userdata('sessionGroup') == StaffStoreUser) {
        //     $idP = $get_group->parent_id;
        // }
        // if ($this->session->userdata('sessionGroup') == StaffStoreUser && !empty($tree)) {
        //     $idP .= ',';
        // }
        // $idP .= $tree;
        // if ($get_group->use_group == StaffUser) {
        //     $idP = $get_group->parent_id;
        // }

        $idP .= $tree;

        $wherestore .= ' AND parent_id IN (' . $tree . ') AND shc_saler IN (' . $idP . ')';


        if ($getVar['userid'] != FALSE && (int)$getVar['userid'] > 0) {
            $where = $use_group_query . ' AND use_status = 1 AND parent_id = ' . (int)$getVar['userid'];
            $wherestore = $use_group_query . ' AND use_status = 1 AND parent_id = ' . (int)$getVar['userid'];
        } else {
            $where = $use_group_query . ' AND use_status = 1 AND parent_id = ' . $user_id;
        }

        $wherestore .= ' and shc_status IN(01,02,03,98)';        
        if ($this->session->userdata('sessionGroup') == AffiliateStoreUser || ($this->session->userdata('sessionGroup') == StaffStoreUser && $user_group == AffiliateStoreUser)) {
            $GH = $user_id;
            $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $user_id);
            $tree = array();
            // if ($this->session->userdata('sessionGroup') == StaffStoreUser) {
            //     $getp = $this->user_model->fetch('use_id,parent_id', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
            //     $tree[] = $GH = (int)$getp[0]->parent_id;
            // }
            // $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . BranchUser . ',' . StaffStoreUser . ') AND use_status = 1 AND parent_id = "' . $this->session->userdata('sessionUser') . '"');
            if (!empty($sub_tructiep)) {
                foreach ($sub_tructiep as $key => $value) {
                    //Nếu là chi nhánh, lấy danh sách nhân viên
                    // if ($value->use_group == StaffStoreUser) {
                    //     //Lấy danh sách CN dưới nó cua NVGH
                    //     $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                    //     if (!empty($sub_cn)) {
                    //         foreach ($sub_cn as $k => $vlue) {
                    //             $tree[] = $vlue->use_id;
                    //         }
                    //     }
                    // } else {
                    //     $tree[] = $value->use_id;
                    // }
                    $tree[] = $value->use_id;
                }
            }
            $id = implode(" OR tbtt_showcart.shc_saler=", $tree);
            $wherestore .= ' AND ((tbtt_showcart.shc_saler=' . $GH . ' AND pro_of_shop=0)';
            if (!empty($id)) {
                // $wherestore .= ' OR ((tbtt_showcart.shc_saler=' . $id . ') AND pro_of_shop>0)';
            }
            $wherestore .= ')';
        } else {
            if ($this->session->userdata('sessionGroup') == BranchUser || ($this->session->userdata('sessionGroup') == StaffStoreUser && $user_group == BranchUser)) {
                $wherestore .= ' AND tbtt_showcart.shc_saler = ' . $user_id;
            }
        }
        if ($dateto != '' && $datefrom != '') {
            $wherestore .= " AND shc_change_status_date >= " . (float)$startdate . " AND shc_change_status_date <= " . (float)$enddate;
        } else {
            $wherestore .= " AND shc_change_status_date >= " . (float)$enddatenull;
        }

        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record settingOtherAccount
        $limit = settingOtherAccount;
        $totalRecord = count($this->user_model->fetch_join3("use_id, SUM(tbtt_showcart.shc_total) As showcarttotal", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $wherestore, $sort, $by, $start, '', '', 'use_id'));
        $config['base_url'] = base_url() .'account/statisticlistaffiliate' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        $data['stt'] = $start;
        #END Pagination
        #sTT - So thu tu
        $liststoreAF = $this->user_model->fetch_join3("use_id, use_username, use_fullname, use_email, use_mobile, parent_id, tbtt_shop.sho_link, tbtt_shop.sho_name, tbtt_shop.sho_user, tbtt_showcart.*, SUM(tbtt_showcart.shc_total) As showcarttotal", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $wherestore, $sort, $by, $start, $limit, '', 'use_id');
        $liststoresum = $this->user_model->fetch_join3("use_id, use_username, tbtt_shop.sho_link, tbtt_shop.sho_name, tbtt_showcart.*, SUM(tbtt_showcart.shc_total) As showcarttotal", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $wherestore, $sort, $by, $start, '', '', 'use_id');
        // Get thong tin Chi Nhanh or Nhan vien cho tung Affiliate

        $array_u_compare = $this->findAll_User_System($user_id);
        array_walk($array_u_compare, function(&$item){
            $item = $item->use_id ;
        });

        $LArray = array();
        if (! empty($liststoreAF)) {
            foreach ($liststoreAF as $key => $row) {
                $info = $this->get_my_shop($row->use_id);
                $LArray[] = array(
                    'use_id' => $row->use_id,
                    'use_username' => $row->use_username,
                    'use_fullname' => $row->use_fullname,
                    'use_email' => $row->use_email,
                    'use_mobile' => $row->use_mobile,
                    'parent_id' => $row->parent_id,
                    'sho_link' => $row->sho_link,
                    'sho_name' => $row->sho_name,
                    'sho_user' => $row->sho_user,
                    'shc_id' => $row->shc_id,
                    'shc_product' => $row->shc_id,
                    'pro_category' => $row->pro_category,
                    'shc_orderid' => $row->shc_orderid,
                    'shc_quantity' => $row->shc_quantity,
                    'shc_saler_store_type' => $row->shc_saler_store_type,
                    'shc_saler' => $row->shc_saler,
                    'shc_buyer' => $row->shc_buyer,
                    'shc_buyer_group' => $row->shc_buyer_group,
                    'shc_saler_parent' => $row->shc_saler_parent,
                    'shc_buyer_parent' => $row->shc_buyer_parent,
                    'af_id' => $row->af_id,
                    'af_id_parent' => $row->af_id_parent,
                    'shc_process' => $row->shc_process,
                    'pro_price' => $row->pro_price,
                    'pro_price_original' => $row->pro_price_original,
                    'pro_price_rate' => $row->pro_price_rate,
                    'pro_price_amt' => $row->pro_price_amt,
                    'af_rate' => $row->af_rate,
                    'af_amt' => $row->af_amt,
                    'dc_amt' => $row->dc_amt,
                    'dc_rate' => $row->dc_rate,
                    'affiliate_discount_amt' => $row->affiliate_discount_amt,
                    'affiliate_discount_rate' => $row->affiliate_discount_rate,
                    'shc_buydate' => $row->shc_buydate,
                    'shc_change_status_date' => $row->shc_change_status_date,
                    'shc_status' => $row->shc_status,
                    'shc_payment_stutus' => $row->shc_payment_stutus,
                    'em_discount' => $row->em_discount,
                    'shc_total' => $row->shc_total,
                    'showcarttotal' => $row->showcarttotal,
                    'info_parent' => $info['info_parent'],
                    'pshop' => $info['pshop'],
                    'link_gh' => $info['link_gh'],
                    'isShow' => in_array($row->use_id, $array_u_compare) ? 1 : 0
                );
            }
        }

        $data['liststoreAF'] = $LArray;
        if ($sort == 'showcarttotal') {
            $pageUrl .= '/sort/id';
            $sort = "use_id";
        }

        ##BEGIN: Gián Affiliate cho GH
        $use_id = (int)$this->input->post('use_id');
        $shop_id = (int)$this->input->post('parent_shop_id');
        if (isset($use_id) && $use_id > 0) {
            $this->user_model->update(array('parent_shop' => $shop_id), 'use_id = '. $use_id);
            echo '1';
            return false;
            exit();
        }
        ##END: Gián Affiliate cho GH
        $totalnam = 0;
        foreach ($liststoresum as $key => $items) {
            $totalnam += $items->showcarttotal;
        }

        $data['totalnopage'] = $totalnam;
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'statistic';
        $data['menuType'] = 'account';
        #Load view
        $this->load->view('home/account/statistic/statisticlistaffiliate', $data);
    }

    function statisticlistaffiliatebran()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == StaffUser
            || $group_id == BranchUser
            || $group_id == StaffStoreUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $group_id = $this->session->userdata('sessionGroup');
        if($group_id == StaffStoreUser) {
            $user_id = $this->user_model->get("parent_id", "use_id = " . $this->session->userdata('sessionUser'))->parent_id;
            $user_group = $this->user_model->get("use_group", "use_id = " . $user_id)->use_group;
        } else {
            $user_id = $this->session->userdata('sessionUser');
            $user_group = $this->session->userdata('sessionGroup');
        }

        // $select = '';
        // $where = '';
        // $sort = 'use_id';
        // $by = 'DESC';
        // $start = 0;
        // $sortUrl = '';
        // $pageUrl = '';
        // $pageSort = '';
        // $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        // $getVar = $this->uri->uri_to_assoc(3, $action);

        // $li_bran = $this->user_model->fetch('use_id', 'parent_id = '. $this->session->userdata('sessionUser') .' AND use_group = 14 AND use_status = 1');
        // $_li_bran = '0'; 
        // $_li_arr = array();
        // if ($li_bran) {
        //     foreach ($li_bran as $vbran) {
        //         $_li_arr[] = $vbran->use_id;
        //     }
        //     $_li_bran = explode(',', $_li_arr); 
        // }

        // $where = 'parent_id IN('. $_li_bran .') AND use_group = 2 AND use_status = 1';
        // $li_af = $this->user_model->fetch_join3('use_id, use_username, sho_name, sho_link, use_email, use_mobile, SUM(tbtt_showcart.shc_total) As showcarttotal', "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $where, $sort, $by, $start, '', '', 'use_id');
        

        $datefrom = $_REQUEST['datefrom'];
        $dateto = $_REQUEST['dateto'];
        $startdate = strtotime($datefrom);
        $enddate = strtotime($dateto);
        $enddatenull = mktime(0, 0, 0, 01, 01, 2006);

        $this->session->set_userdata('dateto', $dateto);
        $this->session->set_userdata('datefrom', $datefrom);
        $data['afsavedateto'] = $dateto;
        $data['afsavedatefrom'] = $datefrom;

        $select = '';
        $where = '';
        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);

        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "sho_name";
                    break;
                case 'group':
                    $pageUrl .= '/sort/group';
                    $sort = "use_group";
                    break;
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() .'account/statisticlistaffiliatebran'. $sortUrl .'/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort

        $use_group_query = '(use_group = '. AffiliateUser .')';
        $tree = array();        

        //Lấy danh sách các vị trí CN
        $sub_tructiep = $this->user_model->get_list_user('use_id, use_group', 'use_group = 14 AND use_status = 1 AND parent_id = '. $user_id);

        if (!empty($sub_tructiep)) {
            foreach ($sub_tructiep as $key => $value) {                
                $tree[] = $value->use_id; 
                // if ($value->use_group == BranchUser) {                    
                //     $sub_nv = $this->user_model->get_list_user('use_id, use_group', 'use_group = ' . StaffUser . ' AND use_status = 1 AND parent_id = ' . $value->use_id);
                //     if (!empty($sub_nv)) {
                //         foreach ($sub_nv as $k => $v) {
                //             $tree[] = $v->use_id;
                //         }
                //     }
                // }
            }
        }        
        $tree = implode(',', $tree);

        //Lưu trữ session để xem chi tiết các đơn hàng của Aff
        $this->session->set_userdata('tree_array', $tree);

        // $wherestore = 'use_status = 1 AND use_group = '. AffiliateUser;
        $get_group = $this->user_model->get('use_group, parent_id', 'use_id = '. $user_id); 

        // $wherestore .= ' AND parent_id IN ('. $tree .') AND shc_saler IN ('. $tree .')';
        $wherestore .= 'use_status = 1 AND shc_saler IN ('. $tree .')';

        if ($getVar['userid'] != FALSE && (int)$getVar['userid'] > 0) {
            $where = $use_group_query .' AND use_status = 1 AND parent_id = '. (int)$getVar['userid'];
            $wherestore = $use_group_query .' AND use_status = 1 AND parent_id = '. (int)$getVar['userid'];
        } else {
            $where = $use_group_query .' AND use_status = 1 AND parent_id = '. $user_id;
        }

        $wherestore .= ' AND shc_status IN(01,02,03,98)';        
        if ($this->session->userdata('sessionGroup') == AffiliateStoreUser || ($this->session->userdata('sessionGroup') == StaffStoreUser && $user_group == AffiliateStoreUser)) {
            $GH = $user_id;
            $tree = array();            

            $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group = 14 AND use_status = 1 AND parent_id = '. $user_id);
            
            if (! empty($sub_tructiep)) {
                foreach ($sub_tructiep as $key => $value) { 
                    $tree[] = $value->use_id;                    
                }
            }
            // $id = implode(" OR tbtt_showcart.shc_saler = ", $tree);            
            // if (! empty($id)) {
            //     // $wherestore .= ' AND (tbtt_showcart.shc_saler = '. $id .' AND pro_of_shop > 0)';
            //     $wherestore .= ' AND tbtt_showcart.shc_saler = '. $id;
            // }            
        } else {
            if ($this->session->userdata('sessionGroup') == BranchUser || ($this->session->userdata('sessionGroup') == StaffStoreUser && $user_group == BranchUser)) {
                $wherestore .= ' AND tbtt_showcart.shc_saler = ' . $user_id;
            }
        }
        if ($dateto != '' && $datefrom != '') {
            $wherestore .= " AND shc_change_status_date >= " . (float)$startdate . " AND shc_change_status_date <= " . (float)$enddate;
        } else {
            $wherestore .= " AND shc_change_status_date >= " . (float)$enddatenull;
        }

        // $wherestore .= " AND parent_shop = $user_id";

        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record settingOtherAccount
        $limit = settingOtherAccount;
        $totalRecord = count($this->user_model->fetch_join3("use_id, SUM(tbtt_showcart.shc_total) As showcarttotal", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $wherestore, $sort, $by, $start, '', '', 'use_id'));
        $config['base_url'] = base_url() .'account/statisticlistaffiliatebran' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        $data['stt'] = $start;
        #END Pagination

        $wherestore .= " AND pro_of_shop > 0 AND af_id > 0";
        
        #sTT - So thu tu
        $liststoreAF = $this->user_model->fetch_join3("use_id, use_username, use_fullname, use_email, use_mobile, parent_id, tbtt_shop.sho_link, tbtt_shop.sho_name, tbtt_shop.sho_user, tbtt_showcart.*, SUM(tbtt_showcart.shc_total) As showcarttotal", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $wherestore, $sort, $by, $start, $limit, '', 'use_id');
        $liststoresum = $this->user_model->fetch_join3("use_id, use_username, tbtt_shop.sho_link, tbtt_shop.sho_name, tbtt_showcart.*, SUM(tbtt_showcart.shc_total) As showcarttotal", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $wherestore, $sort, $by, $start, '', '', 'use_id');
        // Get thong tin Chi Nhanh or Nhan vien cho tung Affiliate
        $array_u_compare = $this->findAll_User_System($user_id);
        array_walk($array_u_compare, function(&$item){
            $item = $item->use_id ;
        });
        $LArray = array();
        if (!empty($liststoreAF)) {
            foreach ($liststoreAF as $key => $row) {
                $info = $this->get_my_shop($row->use_id);
                $LArray[] = array(
                    'use_id' => $row->use_id,
                    'use_username' => $row->use_username,
                    'use_fullname' => $row->use_fullname,
                    'use_email' => $row->use_email,
                    'use_mobile' => $row->use_mobile,
                    'parent_id' => $row->parent_id,
                    'sho_link' => $row->sho_link,
                    'sho_name' => $row->sho_name,
                    'sho_user' => $row->sho_user,
                    'shc_id' => $row->shc_id,
                    'shc_product' => $row->shc_id,
                    'pro_category' => $row->pro_category,
                    'shc_orderid' => $row->shc_orderid,
                    'shc_quantity' => $row->shc_quantity,
                    'shc_saler_store_type' => $row->shc_saler_store_type,
                    'shc_saler' => $row->shc_saler,
                    'shc_buyer' => $row->shc_buyer,
                    'shc_buyer_group' => $row->shc_buyer_group,
                    'shc_saler_parent' => $row->shc_saler_parent,
                    'shc_buyer_parent' => $row->shc_buyer_parent,
                    'af_id' => $row->af_id,
                    'af_id_parent' => $row->af_id_parent,
                    'shc_process' => $row->shc_process,
                    'pro_price' => $row->pro_price,
                    'pro_price_original' => $row->pro_price_original,
                    'pro_price_rate' => $row->pro_price_rate,
                    'pro_price_amt' => $row->pro_price_amt,
                    'af_rate' => $row->af_rate,
                    'af_amt' => $row->af_amt,
                    'dc_amt' => $row->dc_amt,
                    'dc_rate' => $row->dc_rate,
                    'affiliate_discount_amt' => $row->affiliate_discount_amt,
                    'affiliate_discount_rate' => $row->affiliate_discount_rate,
                    'shc_buydate' => $row->shc_buydate,
                    'shc_change_status_date' => $row->shc_change_status_date,
                    'shc_status' => $row->shc_status,
                    'shc_payment_stutus' => $row->shc_payment_stutus,
                    'em_discount' => $row->em_discount,
                    'shc_total' => $row->shc_total,
                    'showcarttotal' => $row->showcarttotal,
                    'info_parent' => $info['info_parent'],
                    'pshop' => $info['pshop'],
                    'link_gh' => $info['link_gh'],
                    'isShow' => in_array($row->use_id, $array_u_compare) ? 1 : 0
                );
            }
        }

        $data['liststoreAF'] = $LArray;
        if ($sort == 'showcarttotal') {
            $pageUrl .= '/sort/id';
            $sort = "use_id";
        }
       
        $totalnam = 0;
        foreach ($liststoresum as $key => $items) {
            $totalnam += $items->showcarttotal;
        }

        $data['totalnopage'] = $totalnam;
        $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'statistic';
        $data['menuType'] = 'account';
        #Load view
        $this->load->view('home/account/statistic/statisticlistaffiliate', $data);      


    }

    function statisticlistaffiliate_Store()
    {
        $datefrom = $_REQUEST['datefrom'];
        $dateto = $_REQUEST['dateto'];
        $startdate = strtotime($datefrom);
        $enddate = strtotime($dateto);
        $enddatenull = mktime(0, 0, 0, 01, 01, 2006);

        $this->session->set_userdata('dateto', $dateto);
        $this->session->set_userdata('datefrom', $datefrom);
        $data['afsavedateto'] = $dateto;
        $data['afsavedatefrom'] = $datefrom;

        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == StaffUser
            || $group_id == BranchUser
            || $group_id == StaffStoreUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        $select = '';
        $where = '';
        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);

        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "sho_name";
                    break;
                case 'group':
                    $pageUrl .= '/sort/group';
                    $sort = "use_group";
                    break;
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/statisticlistaffiliate' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        $where = '';
        #END Create link sort
        #Keyword
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/statisticlistaffiliate' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort

        $use_group_query = '(use_group = '. AffiliateUser .')';
        $tree = array();
        //$this->getTreeInList($this->session->userdata('sessionUser'), $tree);

        //Lấy danh sách các vị trí CN và NV của GH
        $sub_tructiep = $this->user_model->get_list_user('use_id, use_group', 'use_group IN (15, 11) AND use_status = 1 AND parent_id = ' . (int)$this->session->userdata('sessionUser'));

        if (!empty($sub_tructiep)) {
            foreach ($sub_tructiep as $key => $value) {
                $tree[] = $value->use_id;
                //Nếu là chi nhánh, lấy danh sách nhân viên
                if ($value->use_group == StaffStoreUser) {
                    $sub_nv = $this->user_model->get_list_user('use_id, use_group', 'use_group IN (' . StaffUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_nv)) {
                        foreach ($sub_nv as $k => $v) {
                            $tree[] = $v->use_id;
                            if ($v->use_group == BranchUser) {
                                $sub_nvcn = $this->user_model->get_list_user('use_id, use_group', 'use_group = ' . StaffUser . ' AND use_status = 1 AND parent_id = ' . $v->use_id);
                                if (!empty($sub_nvcn)) {
                                    foreach ($sub_nvcn as $k => $v1) {
                                        $tree[] = $v1->use_id;
                                    }
                                }
                            }
                        }
                    }
                }

            }
        }

        $tree[] = (int)$this->session->userdata('sessionUser');
        $tree = implode(',', $tree);
        //Lưu trữ session để xem chi tiết các đơn hàng của Aff
        $this->session->set_userdata('tree_array', $tree);

        $wherestore = 'use_status = 1 AND use_group = ' . AffiliateUser;// ' AND parent_id IN (' . $tree . ') AND shc_saler IN (' . $tree . ')';
        $get_group = $this->user_model->get('use_group,parent_id', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
        $idP = '';
        if ($this->session->userdata('sessionGroup') == StaffStoreUser) {
            $idP = $get_group->parent_id;
        }
        if ($this->session->userdata('sessionGroup') == StaffStoreUser && !empty($tree)) {
            $idP .= ',';
        }
        $idP .= $tree;
        if ($get_group->use_group == StaffUser) {
            $idP = $get_group->parent_id;
        }

        $wherestore .= ' AND parent_id IN (' . $tree . ') AND shc_saler IN (' . $idP . ')';


        if ($getVar['userid'] != FALSE && (int)$getVar['userid'] > 0) {
            $where = $use_group_query . ' AND use_status = 1 AND parent_id = ' . (int)$getVar['userid'];
            $wherestore = $use_group_query . ' AND use_status = 1 AND parent_id = ' . (int)$getVar['userid'];
        } else {
            $where = $use_group_query . ' AND use_status = 1 AND parent_id = ' . (int)$this->session->userdata('sessionUser');
        }

        $wherestore .= ' and shc_status IN(01,02,03,98)';
        
        if ($this->session->userdata('sessionGroup') == AffiliateStoreUser || $this->session->userdata('sessionGroup') == StaffStoreUser) {
            $GH = (int)$this->session->userdata('sessionUser');
            $tree = array();
            if ($this->session->userdata('sessionGroup') == StaffStoreUser) {
                $getp = $this->user_model->fetch('use_id,parent_id', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
                $tree[] = $GH = (int)$getp[0]->parent_id;
            }
            $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . StaffStoreUser . ') AND use_status = 1 AND parent_id = "' . $this->session->userdata('sessionUser') . '"');
            if (!empty($sub_tructiep)) {
                foreach ($sub_tructiep as $key => $value) {
                    //Nếu là chi nhánh, lấy danh sách nhân viên
                    $tree[] = $value->use_id;
                }
            }
            $id = implode(" OR tbtt_showcart.shc_saler=", $tree);
            $wherestore .= ' AND ((tbtt_showcart.shc_saler=' . $GH . ' AND pro_of_shop=0)';
            if (!empty($id)) {
                $wherestore .= ' OR ((tbtt_showcart.shc_saler=' . $id . ') AND pro_of_shop>0)';
            }
            $wherestore .= ')';
        } else {
            if ($this->session->userdata('sessionGroup') == BranchUser) {
                $wherestore .= ' AND tbtt_showcart.shc_saler = ' . (int)$this->session->userdata('sessionUser');
            }
        }
        if ($dateto != '' && $datefrom != '') {
            $wherestore .= " AND shc_change_status_date >= " . (float)$startdate . " AND shc_change_status_date <= " . (float)$enddate;
        } else {
            $wherestore .= " AND shc_change_status_date >= " . (float)$enddatenull;
        }

        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record settingOtherAccount
        $limit = settingOtherAccount;
        $totalRecord = count($this->user_model->fetch_join3("use_id,  tbtt_shop.sho_id, tbtt_showcart.shc_id, SUM(tbtt_showcart.shc_total) As showcarttotal", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $wherestore, $sort, $by, $start, '', '', 'use_id'));
        $config['base_url'] = base_url() . 'account/statisticlistaffiliate' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        $data['stt'] = $start;
        #END Pagination

        #sTT - So thu tu
        $liststoreAF = $this->user_model->fetch_join3("use_id, use_username, use_fullname, use_email, use_mobile, parent_id, tbtt_shop.sho_link, tbtt_shop.sho_name, tbtt_shop.sho_user, tbtt_showcart.*, SUM(tbtt_showcart.shc_total) As showcarttotal", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $wherestore, $sort, $by, $start, $limit, '', 'use_id');
        $liststoresum = $this->user_model->fetch_join3("use_id, use_username, tbtt_shop.sho_link, tbtt_shop.sho_name, tbtt_showcart.*, SUM(tbtt_showcart.shc_total) As showcarttotal", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $wherestore, $sort, $by, $start, '', '', 'use_id');
        // Get thong tin Chi Nhanh or Nhan vien cho tung Affiliate
        $LArray = array();
        if (!empty($liststoreAF)) {
            foreach ($liststoreAF as $key => $row) {
                $info = $this->get_my_shop($row->use_id);
                $LArray[] = array(
                    'use_id' => $row->use_id,
                    'use_username' => $row->use_username,
                    'use_fullname' => $row->use_fullname,
                    'use_email' => $row->use_email,
                    'use_mobile' => $row->use_mobile,
                    'parent_id' => $row->parent_id,
                    'sho_link' => $row->sho_link,
                    'sho_name' => $row->sho_name,
                    'sho_user' => $row->sho_user,
                    'shc_id' => $row->shc_id,
                    'shc_product' => $row->shc_id,
                    'pro_category' => $row->pro_category,
                    'shc_orderid' => $row->shc_orderid,
                    'shc_quantity' => $row->shc_quantity,
                    'shc_saler_store_type' => $row->shc_saler_store_type,
                    'shc_saler' => $row->shc_saler,
                    'shc_buyer' => $row->shc_buyer,
                    'shc_buyer_group' => $row->shc_buyer_group,
                    'shc_saler_parent' => $row->shc_saler_parent,
                    'shc_buyer_parent' => $row->shc_buyer_parent,
                    'af_id' => $row->af_id,
                    'af_id_parent' => $row->af_id_parent,
                    'shc_process' => $row->shc_process,
                    'pro_price' => $row->pro_price,
                    'pro_price_original' => $row->pro_price_original,
                    'pro_price_rate' => $row->pro_price_rate,
                    'pro_price_amt' => $row->pro_price_amt,
                    'af_rate' => $row->af_rate,
                    'af_amt' => $row->af_amt,
                    'dc_amt' => $row->dc_amt,
                    'dc_rate' => $row->dc_rate,
                    'affiliate_discount_amt' => $row->affiliate_discount_amt,
                    'affiliate_discount_rate' => $row->affiliate_discount_rate,
                    'shc_buydate' => $row->shc_buydate,
                    'shc_change_status_date' => $row->shc_change_status_date,
                    'shc_status' => $row->shc_status,
                    'shc_payment_stutus' => $row->shc_payment_stutus,
                    'em_discount' => $row->em_discount,
                    'shc_total' => $row->shc_total,
                    'showcarttotal' => $row->showcarttotal,
                    'info_parent' => $info['info_parent'],
                    'pshop' => $info['pshop'],
                    'link_gh' => $info['link_gh']
                );
            }
        }

        $data['liststoreAF'] = $LArray;
        if ($sort == 'showcarttotal') {
            $pageUrl .= '/sort/id';
            $sort = "use_id";
        }

        ##BEGIN: Gián Affiliate cho GH
        $use_id = (int)$this->input->post('use_id');
        $shop_id = (int)$this->input->post('parent_shop_id');
        if (isset($use_id) && $use_id > 0) {
            $this->user_model->update(array('parent_shop' => $shop_id), 'use_id = ' . $use_id);
            echo '1';
            return false;
            exit();
        }
        ##END: Gián Affiliate cho GH
        $totalnam = 0;
        foreach ($liststoresum as $key => $items) {
            $totalnam += $items->showcarttotal;
        }

        $data['totalnopage'] = $totalnam;
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'statisticStore';
        $data['menuType'] = 'account';
        #Load view
        $this->load->view('home/account/statistic/statisticlistaffiliate', $data);
    }

    function statisticlistNVGH()
    {
        $datefrom = $_REQUEST['datefrom'];
        $dateto = $_REQUEST['dateto'];
        $startdate = strtotime($datefrom);
        $enddate = strtotime($dateto);
        $enddatenull = mktime(0, 0, 0, 01, 01, 2006);

        $this->session->set_userdata('dateto', $dateto);
        $this->session->set_userdata('datefrom', $datefrom);
        $data['afsavedateto'] = $dateto;
        $data['afsavedatefrom'] = $datefrom;

        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == StaffUser
            || $group_id == BranchUser
            || $group_id == StaffStoreUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getAct = $this->uri->uri_to_assoc(5, $action);
        $getVar = $this->uri->uri_to_assoc(3, $action);
        $select = '';
        $where = '';
        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = $this->uri->segment(4);
        $pageUrl = '/userid/' . (int)$getVar['userid'];
        $pageSort = '';

        #If have sort
        if ($getAct['sort'] != FALSE && trim($getAct['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "sho_name";
                    break;
                case 'group':
                    $pageUrl .= '/sort/group';
                    $sort = "use_group";
                    break;
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getAct['page'] != FALSE && (int)$getAct['page'] > 0) {
            $start = (int)$getAct['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/statisticlistNVGH/userid/' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        $where = '';
        #END Create link sort
        #Keyword
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/statisticlistNVGH/userid/' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort

        $use_group_query = '(use_group = ' . AffiliateUser . ')';
        $use_group_query = '( use_group = ' . AffiliateUser . ' or use_group = ' . BranchUser . ')';//tab CN va AF
        $tree = array();
        //$this->getTreeInList($this->session->userdata('sessionUser'), $tree);
        //Lấy danh sách các vị trí CN và NV của GH
        if ($getVar['userid'] != FALSE && (int)$getVar['userid'] > 0) {
            $p = $getVar['userid'];
        } else {
            $p = $this->session->userdata('sessionUser');
            $tree[] = (int)$this->session->userdata('sessionUser');
        }
        //Lưu trữ session để xem chi tiết các đơn hàng của Aff
        $this->session->set_userdata('tree_array', $tree);
        if (empty($tree) && $getVar['userid'] != FALSE && (int)$getVar['userid'] > 0) {
            $pa = (int)$getVar['userid'];
            if ($this->uri->segment(5) == 'detailstatisticlistbran' || $this->uri->segment(5) == 'detailstatisticlistaffiliate') {
                // $pa = (int)$this->uri->segment(6);
            }
        } else {
            $pa = (int)$this->session->userdata('sessionUser');
        }
        //Lấy danh sách các vị trí CN và NV của GH
        $sub_tructiep = $this->user_model->get_list_user('use_id, use_group', 'use_group IN (15,14, 11) AND use_status = 1 AND parent_id = "' . $pa . '"');

        if (!empty($sub_tructiep)) {
            foreach ($sub_tructiep as $key => $value) {
                $tree[] = $value->use_id;
                //Nếu là chi nhánh, lấy danh sách nhân viên
                if ($value->use_group == StaffStoreUser) {
                    $sub_nv = $this->user_model->get_list_user('use_id, use_group', 'use_group IN (14, 11) AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_nv)) {
                        foreach ($sub_nv as $k => $v) {
                            if ($v->use_group == BranchUser) {
                                $sub_nvcn = $this->user_model->get_list_user('use_id, use_group', 'use_group = 11 AND use_status = 1 AND parent_id = ' . $v->use_id);
                                if (!empty($sub_nvcn)) {
                                    foreach ($sub_nvcn as $k => $vlue) {
                                        $tree[] = $vlue->use_id;
                                    }
                                }
                            }
                        }
                    }
                }
                if ($value->use_group == BranchUser) {
                    $sub_nv = $this->user_model->get_list_user('use_id, use_group', 'use_group = 11 AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_nv)) {
                        foreach ($sub_nv as $k => $v) {
                            $tree[] = $v->use_id;
                        }
                    }
                }

            }
        }

        // $tree[] = (int)$this->session->userdata('sessionUser'); //tat tam de chinh lại aff
        $tree = implode(',', $tree);

        $data['tree'] = $tree;
        //Lưu trữ session để xem chi tiết các đơn hàng của Aff
        $this->session->set_userdata('tree_array', $tree);
        // $wherestore = 'use_status = 1 AND use_group = ' . AffiliateUser . ' AND parent_id IN (' . $tree . ')';

        $tree_af_id_session = $this->session->userdata('tree_af_id');
        $get_af = $this->user_model->get('use_id, parent_id, use_group, use_username', 'use_id = "' . $tree_af_id_session . '"');
        // $get_p = $this->user_model->get('use_id, parent_id, use_group', 'use_id = "' . $get_af->parent_id . '"');

        $wherestore = 'use_status = 1 and parent_id IN(' . $tree . ')';
        $where_bran = ' and ( use_group = ' . BranchUser . ' OR use_group = ' . AffiliateUser . ')';
        $where_af = ' and use_group = ' . AffiliateUser . '';
        if (empty($tree) && $getVar['userid'] != FALSE && (int)$getVar['userid'] > 0) {
            $tree = $p;
        }
        // Lay DT Cua Af ban sp cho GH
        $where_af = 'use_status = 1 and (shc_saler IN(' . $tree . ') OR parent_id IN(' . $tree . ')) and ( use_group = ' . AffiliateUser . ')';
        //Lay DT Cua Af ban sp cho GH
        //Chỉ lay doanh thu của GH cha k lấy doanh thu từ GH khác
        if ($this->session->userdata('sessionGroup') != StaffUser && $this->session->userdata('sessionGroup') != StaffStoreUser) {
            $wherestore .= ' and shc_saler IN(' . $tree . ',' . $this->session->userdata('sessionUser') . ')';
        } else {
            $get_p = $this->user_model->get('parent_id', 'use_id = ' . $this->session->userdata('sessionUser'));
            $wherestore .= ' and shc_saler IN(' . $get_p->parent_id . ')';
        }

        //END ay doanh thu của GH cha k lấy doanh thu từ GH khác

        $get_group = $this->user_model->get('use_group', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
        if ($get_group->use_group == AffiliateStoreUser) {
            if ($getVar['userid'] != FALSE && (int)$getVar['userid'] > 0) {
            }
            $wherestore .= ' AND parent_id IN (' . $tree . ')';
        }

        if ($getVar['userid'] != FALSE && (int)$getVar['userid'] > 0) {
            $GHid = '';
            $get_aff = $this->user_model->get('use_group,parent_id', 'use_id = ' . $getVar['userid']);
            if (!(empty($tree))) {
                $tree .= ',' . $getVar['userid'];
            }
            // $wherestore = '0use_status = 1 AND use_group IN("' . AffiliateUser . '","' . BranchUser . '") AND ( shc_saler IN(' . $get_p->use_id.','. $get_af->use_id. ') AND ( parent_id = "'. $get_af->use_id. '" OR ( parent_id = "'. $get_p->use_id. '" and af_id =0) )) AND pro_of_shop != 0'; //Get DT của CN và DT AF của CN AND pro_of_shop != 0
            $shc_saler = ' and ( ( shc_saler IN(' . (int)$this->session->userdata('sessionUser') . ') and parent_id IN(' . $tree . ')) OR (shc_saler IN(' . $tree . ') AND af_id=0 and parent_id IN(' . (int)$this->session->userdata('sessionUser') . ')) )';

            // begin get DS AF cua NV, AFF cua NVGH
            if ($get_aff->use_group == StaffStoreUser || $get_aff->use_group == StaffUser) {
                $shc_saler = ' and (( (shc_saler IN(' . $get_aff->parent_id . ')) and parent_id IN(' . $tree . ')) OR (shc_saler IN(' . $get_aff->parent_id . ') AND af_id=0 and parent_id IN(' . $tree . ')) )';
                $GHid = $get_aff->parent_id;
            }
            //                Hien thi tat ca cac AFF cua NVGH
            $shc_saler = ' and use_group = 2 and (( (shc_saler IN(' . $tree . ',' . $get_aff->parent_id . ')) and parent_id IN(' . $tree . ')) OR (shc_saler IN(' . $tree . ',' . $get_aff->parent_id . ') AND af_id=0 and parent_id IN(' . $tree . ')) )';
            /*$get_aff->parent_id lay aff cua nvgh ban duoc sp tu CN tren*/
            $parent_id = $this->uri->segment(4);

            if (($this->uri->segment(6) != '') && ($this->uri->segment(5) == 'detailstatisticlistbran' || $this->uri->segment(5) == 'detailstatisticlistaffiliate')) {
                $all_id = explode(',', $tree);
                $nvcnnvgh = array();
                $parent_id = $this->uri->segment(6);
                foreach ($all_id as $key => $id_NV) {
                    if ($id_NV >= $parent_id) {
                        $nvcnnvgh[] = $id_NV;
                    }
                }

                if (count($nvcnnvgh) != '') {
                    $nvcnnvgh = implode(',', $nvcnnvgh);
                    $parent_id .= ',' . $nvcnnvgh;
                }
                if (!empty($tree)) {
                    $tree = $GHid . ',' . $tree;
                }
                $shc_saler = ' and use_group = 2 and shc_saler IN(' . $tree . ') and parent_id IN(' . $parent_id . ')';
            }
            // end get DS AF cua NV, AFF cua NVGH
            // $shc_salerCN = ' and (shc_saler IN(' . $tree . ') and parent_id IN(' . (int)$pa . ') )';

            $wherestore = 'use_status = 1 and shc_status IN(01,02,03,98) and (use_group =' . AffiliateUser . ' or  use_group =' . BranchUser . ')' . $shc_saler;
            // $wherestoreCN = 'use_status = 1 and (use_group =' . AffiliateUser . ' or  use_group =' . BranchUser . ')' . $shc_salerCN;
        } else {
            //$wherestore = $use_group_query . ' AND use_status = 1 AND parent_id = ' . (int)$this->session->userdata('sessionUser');
        }
        $srdate = '';
        if ($dateto != '' && $datefrom != '') {
            $srdate = " AND shc_change_status_date >= " . (float)$startdate . " AND shc_change_status_date <= " . (float)$enddate;
        } else {
            $srdate = " AND shc_change_status_date >= " . (float)$enddatenull;
        }
        //Xu ly Aff toan he thong cua NVGH có CN ban dt
        //        $liststoreAF = $this->user_model->fetch_join3("use_id, use_username, use_fullname, use_email, use_mobile, parent_id, tbtt_shop.sho_link, tbtt_shop.sho_name, tbtt_shop.sho_user, tbtt_showcart.*, SUM(tbtt_showcart.shc_total) As showcarttotal", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id or tbtt_user.use_id = tbtt_showcart.shc_saler", $left3, $tb3, $join3, $where_af.$srdate, $sort, $by, $start, $limit);
        $left3 = "LEFT";
        $tb3 = "tbtt_product";
        $join3 = "tbtt_showcart.shc_product = tbtt_product.pro_id"; //join bang de dat dieu kien pro_of_shop
        $where = 'use_status = 1 and shc_status IN(01,02,03,98) and parent_id IN(' . $getVar['userid'] . ') ANd ( use_group = ' . BranchUser . ')'; //CBi tach DT cN Rieng

        $data['linkPage'] = $data['linkPage_AFF'] = '';

        $get_u = $this->user_model->get('use_id, parent_id, use_group', 'use_id = "' . $this->session->userdata('sessionUser') . '"');
        // ktra tai khoan dang nhap de lay tree và id GH ban sp
        if ($get_u->use_group == StaffStoreUser || $get_u->use_group == StaffUser) {
            $get_pu1 = $this->user_model->get('use_id, parent_id, use_group', 'use_id = "' . $get_u->use_id . '"');
            $tree = $pCN = $get_u->parent_id;
        } else {
            $tree = $pCN = $this->session->userdata('sessionUser');
        }
        // end  ktra tai khoan dang nhap de lay tree và id GH ban sp
        #sTT - So thu tu
        $saler = '';
        if ($this->session->userdata('sessionGroup') == AffiliateStoreUser || $this->session->userdata('sessionGroup') == StaffStoreUser) {
            $GH = (int)$this->session->userdata('sessionUser');
            $tree1 = array();
            if ($this->session->userdata('sessionGroup') == StaffStoreUser) {
                $getp = $this->user_model->fetch('use_id,parent_id', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
                $tree1[] = $GH = (int)$getp[0]->parent_id;
            }
            $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . BranchUser . ',' . StaffStoreUser . ') AND use_status = 1 AND parent_id = "' . $this->session->userdata('sessionUser') . '"');
            if (!empty($sub_tructiep)) {
                foreach ($sub_tructiep as $key => $value) {
                    //Nếu là chi nhánh, lấy danh sách nhân viên
                    if ($value->use_group == StaffStoreUser) {
                        //Lấy danh sách CN dưới nó cua NVGH
                        $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                        if (!empty($sub_cn)) {
                            foreach ($sub_cn as $k => $vlue) {
                                $tree1[] = $vlue->use_id;
                            }
                        }
                    } else {
                        $tree1[] = $value->use_id;
                    }
                }
            }
            $id = implode(",", $tree1);
            $saler .= ' AND ((tbtt_showcart.shc_saler=' . $GH . ' AND pro_of_shop=0)';
            if (!empty($id)) {
                $saler .= ' OR ((tbtt_showcart.shc_saler IN(' . $id . ')) AND pro_of_shop>0)';
            }
            $saler .= ')';
        } else {
            if ($this->session->userdata('sessionGroup') == BranchUser) {
                $saler .= ' AND tbtt_showcart.shc_saler = ' . (int)$this->session->userdata('sessionUser');
            }
        }

        $staffs = $this->user_model->fetch_join3("use_id, use_group,use_username, use_fullname,use_email,use_mobile,use_fullname,tbtt_shop.sho_link, tbtt_shop.sho_name,domain, parent_id,tbtt_showcart.*", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id or tbtt_user.use_id = tbtt_showcart.shc_saler", $left3, $tb3, $join3, $where . $saler . $srdate, $sort, $by, $start, $limit, '', 'use_id');
        $liststoreAF = $this->user_model->fetch_join3("pro_name,use_id,use_username, use_fullname,use_email,use_mobile,tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id,tbtt_showcart.*, SUM(tbtt_showcart.shc_total) As shc_total", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id or tbtt_user.use_id = tbtt_showcart.shc_saler", $left3, $tb3, $join3, $wherestore . $saler . $srdate, $sort, $by, $start, $limit, '', 'use_id');
        //        Lấy DT Cua CN gap ve tu GH và DT ban dc tu sp GH
        $liststoresum = $this->user_model->fetch_join1("use_id, use_username, tbtt_shop.sho_link, tbtt_shop.sho_name, tbtt_showcart.*, SUM(tbtt_showcart.shc_total) As showcarttotal", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id OR tbtt_user.use_id = tbtt_showcart.shc_saler", $wherestore, $sort, $by, $start, '');
        // Get thong tin Chi Nhanh or Nhan vien cho tung Affiliate
        $LArray = array();
        if (!empty($liststoreAF)) {
            foreach ($liststoreAF as $key => $row) {
                $info = $this->get_my_shop($row->use_id);
                $LArray[] = array(
                    'use_id' => $row->use_id,
                    'use_username' => $row->use_username,
                    'use_fullname' => $row->use_fullname,
                    'use_email' => $row->use_email,
                    'use_mobile' => $row->use_mobile,
                    'parent_id' => $row->parent_id,
                    'sho_link' => $row->sho_link,
                    'sho_name' => $row->sho_name,
                    'sho_user' => $row->sho_user,
                    'shc_id' => $row->shc_id,
                    'shc_product' => $row->shc_id,
                    'pro_category' => $row->pro_category,
                    'shc_orderid' => $row->shc_orderid,
                    'shc_quantity' => $row->shc_quantity,
                    'shc_saler_store_type' => $row->shc_saler_store_type,
                    'shc_saler' => $row->shc_saler,
                    'shc_buyer' => $row->shc_buyer,
                    'shc_buyer_group' => $row->shc_buyer_group,
                    'shc_saler_parent' => $row->shc_saler_parent,
                    'shc_buyer_parent' => $row->shc_buyer_parent,
                    'af_id' => $row->af_id,
                    'af_id_parent' => $row->af_id_parent,
                    'shc_process' => $row->shc_process,
                    'pro_price' => $row->pro_price,
                    'pro_price_original' => $row->pro_price_original,
                    'pro_price_rate' => $row->pro_price_rate,
                    'pro_price_amt' => $row->pro_price_amt,
                    'af_rate' => $row->af_rate,
                    'af_amt' => $row->af_amt,
                    'dc_amt' => $row->dc_amt,
                    'dc_rate' => $row->dc_rate,
                    'affiliate_discount_amt' => $row->affiliate_discount_amt,
                    'affiliate_discount_rate' => $row->affiliate_discount_rate,
                    'shc_buydate' => $row->shc_buydate,
                    'shc_change_status_date' => $row->shc_change_status_date,
                    'shc_status' => $row->shc_status,
                    'shc_payment_stutus' => $row->shc_payment_stutus,
                    'em_discount' => $row->em_discount,
                    'shc_total' => $row->shc_total,
                    'showcarttotal' => $row->showcarttotal,
                    'info_parent' => $info['info_parent'],
                    'pshop' => $info['pshop'],
                    'link_gh' => $info['link_gh']
                );
            }
        }
        $data['liststoreAF1'] = $LArray;
        $data['staffs'] = $staffs;
        for ($i = 0; $i < count($staffs); $i++) {
            $this->db->cache_off();
            $parentUser = $this->user_model->get("use_id, use_username, use_fullname,use_email,use_mobile, use_group", "use_id = " . $staffs[$i]->parent_id);
            $parentShop = $this->shop_model->get("sho_name, sho_link", "sho_user = " . $staffs[$i]->parent_id);
        }

        if ($sort == 'showcarttotal') {
            $pageUrl .= '/sort/id';
            $sort = "use_id";
        }

        ##BEGIN: Gián Affiliate cho GH
        $use_id = (int)$this->input->post('use_id');
        $shop_id = (int)$this->input->post('parent_shop_id');
        if (isset($use_id) && $use_id > 0) {
            $this->user_model->update(array('parent_shop' => $shop_id), 'use_id = ' . $use_id);
            echo '1';
            return false;
            exit();
        }

        ##END: Gián Affiliate cho GH
        $totalnam = $totalDTCN = 0;
        foreach ($liststoresum as $key => $items) {
            $totalnam += $items->showcarttotal;
        }
        // echo 'check: '.(int)$this->input->post('kt');
        $data['saler'] = $saler;
        $data['totalnopage'] = $totalnam;
        $data['totalDTCN'] = $totalDTCN;
        $data['menuSelected'] = 'statistic';
        $data['menuType'] = 'account';
        #Load view
        if ($this->uri->segment(5) == 'detailstatisticlistbran' || $this->uri->segment(5) == 'detailstatisticlistaffiliate') {
            //$staffs = $this->user_model->fetch_join1("use_id, use_group,use_username, use_fullname,use_email,use_fullname,tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id,tbtt_showcart.*", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id or tbtt_user.use_id = tbtt_showcart.shc_saler", 'use_status = 1 and parent_id IN(' .$getVar['userid'].','.$this->uri->segment(6) . ') ANd ( use_group = 14 OR use_group = 2)', $sort, $by, $start, $limit,'','use_id');
            $this->detailstatisticlistaffiliate($tree, $staffs, $data['liststoreAF1']);
        } else
            $this->load->view('home/account/statistic/statisticlistNVGH', $data);
    }

    function detailstatisticlistaffiliate($idpCN, $staffs, $liststoreAF1)
    {
        $dateto = $this->session->userdata('dateto');
        $datefrom = $this->session->userdata('datefrom');
        $data['afsavedateto'] = $dateto;
        $data['afsavedatefrom'] = $datefrom;

        $monthsto = date('m', strtotime($dateto));
        $dayto = date('d', strtotime($dateto));
        $yearto = date('y', strtotime($dateto));

        $monthsfrom = date('m', strtotime($datefrom));
        $dayfrom = date('d', strtotime($datefrom));
        $yearfrom = date('y', strtotime($datefrom));
        $startdate = mktime(0, 0, 0, $monthsto, $dayto, $yearto);
        $enddate = mktime(23, 59, 59, $monthsfrom, $dayfrom, $yearfrom);
        $enddatenull = mktime(0, 0, 0, 01, 01, 2006);

        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == StaffUser
            || $group_id == BranchUser
            || $group_id == StaffStoreUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        if($group_id == StaffStoreUser) {
            $user_id = $this->user_model->get("parent_id", "use_id = " . $this->session->userdata('sessionUser'))->parent_id;
            $user_group = $this->user_model->get("use_group", "use_id = " . $user_id)->use_group;
        } else {
            $user_id = $this->session->userdata('sessionUser');
            $user_group = $this->session->userdata('sessionGroup');
        }
        // if($user_group != BranchUser) {
        //     $user_id = $this->user_model->get("parent_id", "use_group = 2 AND parent_shop = $user_id")->parent_id;
        // }
        // dd($user_id);die;

        $tree = $this->session->userdata('tree_array'); //get session tree array from Statiscal Affiliate
        //        $get_info = $this->user_model->get_list_user('use_id, use_group, parent_id', 'use_id = ' . (int)$tree);
        //        if($get_info->use_group == StaffStoreUser){
        //            $tree = $get_info->parent_id;
        //        }
        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(4, $action);
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "shc_change_status_date";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
            $by = "DESC";
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/detailstatisticlistaffiliate' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        $where = '';
        #END Create link sort
        #Keyword
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/detailstatisticlistaffiliate' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        $this->load->library('pagination');

        $tree_af_id_session = $this->session->userdata('tree_af_id');

        if ($this->uri->segment('3') != 'page') {
            $tree_af_id = $this->uri->segment('3');
            //Tab cua NVGH
            if ($this->uri->segment(5) == 'detailstatisticlistbran' || $this->uri->segment(5) == 'detailstatisticlistaffiliate') {
                $tree_af_id = (int)$this->uri->segment('6');
            }
            //End Tab cua NVGH
            $this->session->set_userdata('tree_af_id', $tree_af_id);
        }
        $saler = '';
        $left3 = "LEFT";
        $tb3 = "tbtt_product";
        $join3 = "tbtt_showcart.shc_product = tbtt_product.pro_id"; //join bang de dat dieu kien pro_of_shop
        $join_4 = "LEFT";
        $table_4 = "tbtt_order";
        $on_4 = "tbtt_showcart.shc_orderid = tbtt_order.id"; //join bang de dat dieu kien pro_of_shop
        // $group_by = 'id,tbtt_showcart.af_id,pro_id';
        $group_by = '';

        if ($this->session->userdata('sessionGroup') == AffiliateStoreUser || ($this->session->userdata('sessionGroup') == StaffStoreUser && $user_group == AffiliateStoreUser)) {
            $GH = $user_id;
            $tree1 = array();
            // $tree[] = (int)$this->session->userdata('sessionUser');
            // if ($this->session->userdata('sessionGroup') == StaffStoreUser || $this->session->userdata('sessionGroup') == StaffUser) {
            //     $getp = $this->user_model->fetch('use_id,parent_id', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
            //     $tree1[] = $GH = (int)$getp[0]->parent_id;
            // }
            $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $user_id );
            if (!empty($sub_tructiep)) {
                foreach ($sub_tructiep as $key => $value) {
                    //Nếu là chi nhánh, lấy danh sách nhân viên
                    // if ($value->use_group == StaffStoreUser) {
                    //     //Lấy danh sách CN dưới nó cua NVGH
                    //     $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                    //     if (!empty($sub_cn)) {
                    //         foreach ($sub_cn as $k => $vlue) {
                    //             $tree1[] = $vlue->use_id;
                    //         }
                    //     }
                    // } else {
                    //     $tree1[] = $value->use_id;
                    // }
                    $tree1[] = $value->use_id;
                }
            }
            $id = implode(" OR tbtt_showcart.shc_saler=", $tree1);
            $saler .= ' AND ((tbtt_showcart.shc_saler=' . $GH . ' AND pro_of_shop=0)';
            if (!empty($id)) {
                $saler .= ' OR ((tbtt_showcart.shc_saler=' . $id . ') AND pro_of_shop>0)';
            }
            $saler .= ')';
        } else {
            if ($this->session->userdata('sessionGroup') == BranchUser || ($this->session->userdata('sessionGroup') == StaffStoreUser && $user_group == BranchUser)) {
                $saler .= ' AND tbtt_showcart.shc_saler = ' . $user_id;
            }
        }

        if ($this->uri->segment(5) == 'detailstatisticlistbran' || $this->uri->segment(5) == 'detailstatisticlistaffiliate') {
            $get_u = $this->user_model->get('use_id, parent_id, use_group', 'use_id = ' . $this->session->userdata('sessionUser') );
            // ktra tai khoan dang nhap de lay tree và id GH ban sp
            if ($get_u->use_group == StaffStoreUser || $get_u->use_group == StaffUser) {
                $get_pu1 = $this->user_model->get('use_id, parent_id, use_group', 'use_id = ' . $get_u->use_id );
                $shc_saler = $tree = $pCN = $get_u->parent_id;

            } else {
                $tree = $pCN = $this->session->userdata('sessionUser');
            }
            $on = "tbtt_user.use_id = tbtt_showcart.af_id";

            if ($this->uri->segment(5) == 'detailstatisticlistbran' || ($this->uri->segment(3) != 'page' && $this->uri->segment(3) != 'userid')) {
                $on .= " OR tbtt_user.use_id = tbtt_showcart.shc_saler";
                //$wherestore .= " AND parent_id = " . (int)$this->uri->segment(6);
            }
            $get_af = $this->user_model->get('use_id, parent_id,parent_shop, use_group, use_username', 'use_id = "' . $this->uri->segment(6) . '"');
            $get_p = $this->user_model->get('use_id, parent_id, use_group', 'use_id = "' . $get_af->parent_id . '"');
            $get_nvgh = $this->user_model->get('use_id, parent_id, use_group, use_username', 'use_id = "' . (int)$this->uri->segment(4) . '"');

            // end get DS AF cua NV, AFF cua NVGH
            $shc_saler = ' and tbtt_showcart.af_id=' . (int)$this->uri->segment(6); //moi them
            if ($this->uri->segment(5) == 'detailstatisticlistbran') {
                //bo sung $pCN vao saler .$pCN.','
                // $shc_saler = ' and ( ( shc_saler IN('. $get_p->use_id . ') and parent_id IN(' . $get_af->use_id . ')) OR (shc_saler IN(' . $get_af->use_id . ') AND parent_id IN(' . $get_p->use_id . ')) )'; //GEt Chi tiet DT cua CN gom Aff mua
                $paGH_saler = $get_p->use_id;
                $paCN_saler = $get_af->use_id;
                if ($get_p->use_group == StaffStoreUser || $get_p->use_group == StaffUser) {
                    $paGH_saler = $get_p->parent_id;
                    if ($get_af->use_group == AffiliateUser) {
                        $paCN_saler = $get_p->parent_id;
                    }
                }
                $url_page = 'account/detailstatisticlistbran/';
                $shc_saler = ' and ( ( shc_saler IN(' . $paGH_saler . ') and parent_id IN(' . $get_af->use_id . ')) OR (shc_saler IN(' . $paCN_saler . ') AND parent_id IN(' . $get_p->use_id . ')) )';
                $wherestore = 'use_status = 1 and (use_group =' . AffiliateUser . ' or  use_group =' . BranchUser . ')' . $shc_saler;
            } else {
                $GH = '';
                if ($get_nvgh->use_group == StaffStoreUser || $get_p->use_group == StaffUser) {
                    $GH = $get_nvgh->parent_id . ',';
                }
                // an tam $shc_saler = ' and (( shc_saler IN(' . $GH.$get_p->parent_id . ') and parent_id IN(' . $get_af->use_id . ')) OR (shc_saler IN(' . $get_af->parent_id . ') AND parent_id IN(' . $get_p->use_id . ')) )'; //GEt Chi tiet DT cua CN gom Aff mua

                if ($get_p->use_group == StaffStoreUser || $get_p->use_group == StaffUser) {
                    // $shc_saler = ' and shc_saler IN(' . $get_p->parent_id . ') and parent_id IN(' . (int)$this->uri->segment(4) . ')'; //GEt Chi tiet DT cua CN gom Aff mua
                    //an tam   $shc_saler = ' and shc_saler IN(' . $get_p->parent_id . ') and use_id IN(' . (int)$this->uri->segment(6) . ')'; //GEt Chi tiet DT cua AF-NV-CN-NVGH

                }
                $wherestore = 'use_status = 1 AND use_group = ' . AffiliateUser . $shc_saler; //Xem CT cua NVGH
            }
            if ($dateto != '' && $datefrom != '') {
                $wherestore .= " AND shc_change_status_date >= " . (float)$startdate . " AND shc_change_status_date <= " . (float)$enddate;
            } else {
                $wherestore .= " AND shc_change_status_date >= " . (float)$enddatenull;
            }
            $wherestore .= ' and shc_status IN(01,02,03,98)' . $saler;
            #BEGIN: Pagination

            $data['name'] = $get_af->use_username;
            $data['tree'] = $tree;
            #END Pagination$select = "pro_type,af_id,pro_name,pro_id,use_id, use_group,use_username, use_fullname,use_email,use_fullname,tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id,tbtt_showcart.*";
            $select = "pro_type,tbtt_showcart.af_id,pro_name,pro_id,use_id, use_group,use_username, use_fullname,use_email,use_fullname,tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id,tbtt_showcart.*";
            // $liststoreAF = $this->user_model->fetch_join3($select, "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id or tbtt_user.use_id = tbtt_showcart.shc_saler", "LEFT", "tbtt_product", "tbtt_product.pro_id = tbtt_showcart.shc_product", $wherestore, 'shc_change_status_date', $by, $start, $limit, '', '');
            $liststoreAF = $this->user_model->fetch_join4($select, "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id or tbtt_user.use_id = tbtt_showcart.shc_saler", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $join_4, $table_4, $on_4, $wherestore, 'shc_change_status_date', $by, $start, '', false, $group_by);
            //END Chi tiet DS cua TKNV
        } else {
            $get_u = $this->user_model->get('use_id, parent_id, use_group', 'use_id = ' . $user_id );
            $get_af = $this->user_model->get('use_id, parent_id, use_group, use_username', 'use_id = ' . $this->uri->segment(3) );
            $get_p = $this->user_model->get('use_id, parent_id, use_group', 'use_id = ' . $get_af->parent_id );
            //begin dk statisticlistaffiliate
            // if ($get_p->use_group == StaffStoreUser || $get_p->use_group == StaffUser) {
            //     if (!empty($tree)) {
            //         $tree .= ',';
            //     }
            //     $tree .= $get_p->parent_id;
            // }
            $shc_saler = ' and ( shc_saler IN(' . $tree . ') and af_id IN(' . $get_af->use_id . ') and parent_id IN(' . $get_p->use_id . '))';
            // if ($this->session->userdata('sessionGroup') == StaffUser) {
            //     $shc_saler = ' and ( shc_saler IN(' . $get_u->parent_id . ') and parent_id IN(' . $this->session->userdata('sessionUser') . '))';
            // } else {
            //     if ($this->session->userdata('sessionGroup') == StaffStoreUser) {
            //         $paGH_saler = $get_u->parent_id;
            //         if (!empty($tree)) {
            //             $paGH_saler .= ',' . $tree;
            //         }
            //         $shc_saler = ' and ( shc_saler IN(' . $paGH_saler . ') and af_id IN(' . $get_af->use_id . ') and parent_id IN(' . $get_p->use_id . '))';
            //     }
            // }
            $url_page = 'account/detailstatisticlistaffiliate/';
            //end dk statisticlistaffiliate
            if ($this->uri->segment(2) == 'detailstatisticlistbran') {
                $paGH_saler = $get_p->use_id;
                $paCN_saler = $get_af->use_id;
                // if ($get_p->use_group == StaffStoreUser || $get_p->use_group == StaffUser) {
                //     $paGH_saler = $get_p->parent_id;
                //     if ($get_af->use_group == AffiliateUser) {
                //         $paCN_saler = $get_p->parent_id;
                //     }
                // }
                $url_page = 'account/detailstatisticlistbran/';
                $shc_saler = ' and ( ( shc_saler IN(' . $paGH_saler . ') and parent_id IN(' . $get_af->use_id . ')) OR (shc_saler IN(' . $paCN_saler . ') AND parent_id IN(' . $get_p->use_id . ')) )';
            }
            $wherestore = 'use_status = 1 and shc_status IN(01,02,03,98)' . $shc_saler . $saler;


            if ($dateto != '' && $datefrom != '') {
                $wherestore .= " AND shc_change_status_date >= " . (float)$startdate . " AND shc_change_status_date <= " . (float)$enddate;
            } else {
                $wherestore .= " AND shc_change_status_date >= " . (float)$enddatenull;
            }
            #BEGIN: Pagination
            #Count total record settingOtherAccount
            $limit = settingOtherAccount;
            $totalRecord = count($this->user_model->fetch_join2("use_id, shc_id,  pro_id", "INNER", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $wherestore, '', '', '', ''));
            $config['base_url'] = base_url() . $url_page . $this->uri->segment(3) . '/' . $pageUrl . '/page/';
            $config['total_rows'] = $totalRecord;
            $config['per_page'] = $limit;
            $config['num_links'] = 1;
            $config['uri_segment'] = 4;
            $config['cur_page'] = $start;
            $this->pagination->initialize($config);
            $data['linkPage'] = $this->pagination->create_links();
            $data['stt'] = $start;
            #END Pagination
            #sTT - So thu tu
            $liststoreAF = $this->user_model->fetch_join2("shc_saler,pro_type,parent_id,pro_id,pro_user,use_id,shc_orderid, use_username, shc_quantity, shc_change_status_date, shc_total, pro_name,tbtt_shop.sho_link,tbtt_shop.domain", "INNER", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", "LEFT", "tbtt_shop", "tbtt_shop.sho_user = tbtt_product.pro_user", $wherestore, 'shc_change_status_date', $by, $start, $limit);
            //Thong ke Chi Nhanh
            if ($this->uri->segment(2) == 'detailstatisticlistbran') {
                $liststoreAF = $this->user_model->fetch_join4("shc_id,pro_type,tbtt_showcart.af_id,pro_name,pro_id,use_id,use_username, use_fullname,use_email,use_mobile,tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id,tbtt_showcart.*,", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id or tbtt_user.use_id = tbtt_showcart.shc_saler", $left3, $tb3, $join3, $join_4, $table_4, $on_4, $wherestore, 'shc_change_status_date', $by, $start, $limit, '', 'shc_id');
            }
            //end TK chi nhánh

            //--Tke nhan vien
            if ($this->uri->segment(5) == 'detailstatisticlistbran' || $this->uri->segment(5) == 'detailstatisticlistaffiliate') {
                $select = "pro_type,pro_name,pro_id,use_id, use_group,use_username, use_fullname,use_email,use_fullname,tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id,tbtt_showcart.*";
                //  $liststoreAF = $this->user_model->fetch_join3($select, "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id or tbtt_user.use_id = tbtt_showcart.shc_saler", "LEFT", "tbtt_product", "tbtt_product.pro_id = tbtt_showcart.shc_product", $wherestore, 'shc_change_status_date', $by, $start, $limit, '', 'use_id');
                $liststoreAF = $this->user_model->fetch_join4($select, "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id or tbtt_user.use_id = tbtt_showcart.shc_saler", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $join_4, $table_4, $on_4, $where_af, $sort, $by, $start, $limit, true, $group_by);

                // End TKe nhan vien
                //  $where = 'use_status = 1 and (use_group =' . BranchUser . ' OR use_group =' . AffiliateUser . ') and pro_of_shop!=0 and parent_id IN(' . $tree . ') ';
                // $liststoreAF = $this->user_model->fetch_join3("use_id,use_username, use_fullname,use_email,use_mobile,tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id,tbtt_showcart.*,SUM(tbtt_showcart.shc_total) As showcarttotal,", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id OR tbtt_user.use_id = tbtt_showcart.shc_saler", "LEFT", "tbtt_product", "tbtt_product.pro_id = tbtt_showcart.shc_product", $where, $sort, $by, $start, $limit, false, 'parent_id');
            }

        }

        $protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off' || $_SERVER['SERVER_PORT'] == 443) ? "https://" : "http://";
        $domainName = $_SERVER['HTTP_HOST'];

        $LArray = array();
        if (!empty($liststoreAF)) {
            foreach ($liststoreAF as $key => $row) {
                $info = $this->get_my_shop($row->use_id);
                if($row->domain != '') {
                    $link_sp = $row->domain;
                }else {
                    $link_sp = $row->sho_link.'.'.$domainName;
                }
                
                $LArray[] = array(
                    'use_id' => $row->use_id,
                    'af_id' => $row->af_id,
                    'use_group' => $row->use_group,
                    'use_username' => $row->use_username,
                    'use_fullname' => $row->use_fullname,
                    'use_email' => $row->use_email,
                    'use_mobile' => $row->use_mobile,
                    'parent_id' => $row->parent_id,
                    'pro_id' => $row->pro_id,
                    'pro_name' => $row->pro_name,
                    'shc_quantity' => $row->shc_quantity,
                    'shc_change_status_date' => $row->shc_change_status_date,
                    'shc_orderid' => $row->shc_orderid,
                    'shc_total' => $row->shc_total,
                    'shc_saler' => $row->shc_saler,
                    'info_parent' => $info['info_parent'],
                    'pshop' => $info['pshop'],
                    'link_gh' => $info['link_gh'],
                    'link_sp' => $link_sp
                );
            }
        }

        $data['liststoreAF'] = $LArray;
        if ($sort == 'showcarttotal') {
            $pageUrl .= '/sort/id';
            $sort = "use_id";
        }
        //Unset session data TREE_ARRAY
        //$this->session->unset_userdata('tree_array');
        #Load view
        $use_id = (int)$this->input->post('use_id');
        $shop_id = (int)$this->input->post('parent_shop_id');
        if (isset($use_id) && $use_id > 0) {
            $this->user_model->update(array('parent_shop' => $shop_id), 'use_id = ' . $use_id);
            echo '1';
            return false;
            exit();
        }
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'statistic';
        $data['menuType'] = 'account';
        if ($this->uri->segment(5) == 'detailstatisticlistbran' || $this->uri->segment(5) == 'detailstatisticlistaffiliate') {
            if ($this->uri->segment(5) == 'detailstatisticlistbran') {
                $data['liststoreAF1'] = $liststoreAF1;
            } else {
                $data['staffs'] = $staffs;
            }
            
            $this->load->view('home/account/statistic/statisticlistNVGH', $data);
        } else {
            $this->load->view('home/account/statistic/detailstatisticlistaffiliate', $data);
        }
    }

    function statisticlistshop_tructhuoc()
    {
        $dateto = $_REQUEST['datefromshop'];
        $datefrom = $_REQUEST['datetoshop'];
        $this->session->set_userdata('datetoshop', $dateto);
        $this->session->set_userdata('datefromshop', $datefrom);
        $data['savedateto'] = $dateto;
        $data['savedatefrom'] = $datefrom;
        $monthsto = date('m', strtotime($dateto));
        $dayto = date('d', strtotime($dateto));
        $yearto = date('y', strtotime($dateto));

        $monthsfrom = date('m', strtotime($datefrom));
        $dayfrom = date('d', strtotime($datefrom));
        $yearfrom = date('y', strtotime($datefrom));
        $startdate = mktime(0, 0, 0, $monthsto, $dayto, $yearto);
        $enddate = mktime(23, 59, 59, $monthsfrom, $dayfrom, $yearfrom);
        $enddatenull = mktime(0, 0, 0, 01, 01, 2006);
        $shop_id = (int)$this->input->post('shop_id');        

        $data['menuSelected'] = 'statistic';
        $data['menuType'] = 'account';
        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page','shc');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        if($getVar['shc'] > 0){
            $tree = (int)$getVar['shc'];
        }else{
            $tree = array();
            $session_id = $this->session->userdata('sessionUser');
            $this->getTreeInList($session_id, $tree);
            $where_saler = 'parent_id';
            if (count($tree) > 0) {
                $tree_list = $this->user_model->fetch("use_id, use_username", "use_id IN (" . implode(',', $tree) . ")", "", "");
            }
            $data['tree_list'] = $tree_list;
            $tree[] = $session_id;
            $tree = implode(',', $tree);
        }
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "use_fullname";
                    break;
                case 'shopname':
                    $pageUrl .= '/sort/shopname';
                    $sort = "sho_name";
                    break;
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }

        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/statisticlistshop' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        if (count($tree) > 0) {
            $where = 'use_status = 1 and use_group = 3 and parent_id IN (' . $tree . ')';
        }
        if ($dateto != '' && $datefrom != '') {
            $where .= " AND shc_change_status_date >= " . (float)$startdate . " AND shc_change_status_date <= " . (float)$enddate;
        } else {
            $where .= "AND shc_change_status_date >=" . (float)$enddatenull;
        }
        $where .= ' AND shc_status IN(98)';
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $limmit = 20;
        $staffssum = $this->user_model->fetch_join1("use_id,use_username, use_fullname,use_email,use_mobile,tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id,tbtt_showcart.*,SUM(tbtt_showcart.shc_total) As showcarttotal,", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.shc_saler", $where, $sort, $by, $start, '');
        $totalRecord = count($staffssum);
        $config['base_url'] = base_url() . 'account/statisticlistshop' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limmit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $total_sum_staff = 0;
        foreach ($staffssum as $key => $items) {
            $total_sum_staff += $items->showcarttotal;
        }
        $data['total_sum_staff'] = $total_sum_staff;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $staffs = $this->user_model->fetch_join1("use_id,use_username, use_fullname,use_email,use_mobile,tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id,tbtt_showcart.*,SUM(tbtt_showcart.shc_total) As showcarttotal,", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.shc_saler", $where, $sort, $by, $start, $limmit);
        $data['staffs'] = $staffs;
        $data['stt'] = $start + 1;
        $LArray = array();
        $money = array();
        if (! empty($staffs)) {
            foreach ($staffs as $key => $row) {
                $info = $this->get_my_shop($row->use_id);
                $LArray[] = array(
                    'info_parent' => $info['info_parent'],
                    'pshop' => $info['pshop'],
                    'link_gh' => $info['link_gh']
                );
                $shc_saler = $this->treebranch($row->use_id);
                $id = $row->use_id;
                $strid = implode(',', $shc_saler);
                if($strid != ''){
                    $id .= ','.$strid;
                    $money[$row->use_id] = $this->showcart_model->fetch("SUM(tbtt_showcart.shc_total) As showcarttotal", 'shc_status=98 AND shc_saler IN('.$id.')');
                }
            }
        }
        $data['money'] = $money;
        for ($i = 0; $i < count($staffs); $i++) {
            $this->db->cache_off();
            $parentUser = $this->user_model->get("use_id, use_username", "use_id = " . $staffs[$i]->parent_id);
            $staffs[$i]->username_parent = $parentUser->use_username;
            $staffs[$i]->userid_parent = $parentUser->use_id;
        }
        $data['linkGH'] = $LArray;

        #Load view
        $this->load->view('home/account/statistic/statisticlistshop', $data);
    }

    function statisticlistshop_0304($p = null)
    {
        $segment2 = $this->uri->segment(2);
        $dateto = $_REQUEST['datefromshop'];
        $datefrom = $_REQUEST['datetoshop'];
        $this->session->set_userdata('datetoshop', $dateto);
        $this->session->set_userdata('datefromshop', $datefrom);
        $data['savedateto'] = $dateto;
        $data['savedatefrom'] = $datefrom;
        $monthsto = date('m', strtotime($dateto));
        $dayto = date('d', strtotime($dateto));
        $yearto = date('y', strtotime($dateto));

        $monthsfrom = date('m', strtotime($datefrom));
        $dayfrom = date('d', strtotime($datefrom));
        $yearfrom = date('y', strtotime($datefrom));
        $startdate = mktime(0, 0, 0, $monthsto, $dayto, $yearto);
        $enddate = mktime(23, 59, 59, $monthsfrom, $dayfrom, $yearfrom);
        $enddatenull = mktime(0, 0, 0, 01, 01, 2006);        

        $data['menuSelected'] = 'statistic';
        $data['menuType'] = 'account';
        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page','shc','prn');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        $session_id = $this->session->userdata('sessionUser');
        $session_grt = $this->session->userdata('sessionGroup');
        if($p != null){
            $session_id = $p;
        }elseif($getVar['shc'] > 0){
            $session_id = (int)$getVar['shc'];
        }
        if($getVar['shc'] > 0){            
            $treeunder = $this->treeunderD($session_id,'6,7,8');
            $tree = $treeunder['tree'];
            $tree[] = $session_id;
            $tree = implode(',', $tree);
        } else {
            $tree = array();
            $data['tree_list'] = $tree_list;
            if( $this->uri->segment(2) == 'statisticlistshop'){                
                $treeunder = $this->treeunderD($session_id,0);
            }else{
                if($session_grt > Partner1User && $p == null){
                    $treeunder = $this->gettreeP1($session_id);
                }else{
                    $treeunder = $this->treeunderD($session_id,'6,7,8');
                }
            }
            $tree = $treeunder['tree'];
            $tree[] = $session_id;
            $tree = implode(',', $tree);
        }
        $uri_segment = 4;
        $strStore = '';
        if($segment2 == 'statisticlistshopall'){
            $text = 'toàn hệ thống';
            $strStore .= $tree;
            $treeunderStore = $this->treebranch($tree);
        }else{
            $strStore .= implode(',', $treeunder['treestoreinPD']);
            if($segment2 == 'statisticlistPartner'){
                $infoPartner = $this->user_model->get("use_username", "use_id = ".(int)$getVar['prn']);
                $text = 'của <span style="color: #f00">'.$infoPartner->use_username.'</span>';
                $uri_segment = 5;
                $segment2 .= '/prn/'.$getVar['prn'];
            }else{
                $text = 'trực thuộc';
            }
            $treeunderStore = $this->treebranch($session_id);
        }
        $strStorebranch = implode(',',$treeunderStore);
        if($strStorebranch != ''){
            $strStore .= ','.$strStorebranch;
        }
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "use_fullname";
                    break;
                case 'shopname':
                    $pageUrl .= '/sort/shopname';
                    $sort = "sho_name";
                    break;
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }

        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/' . $segment2 . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        if (count($tree) > 0) {
            $where = 'use_status = 1 and use_group IN(3) and (parent_id IN(' . $tree . ') OR shc_saler IN(' . $tree . '))';
        }
        if ($dateto != '' && $datefrom != '') {
            $where .= " AND shc_change_status_date >= " . (float)$startdate . " AND shc_change_status_date <= " . (float)$enddate;
        } else {
            $where .= " AND shc_change_status_date >=" . (float)$enddatenull;
        }
        $where .= ' AND shc_status IN(98)';
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $limmit = 20;
        $staffssum = $this->user_model->fetch_join1("use_id,use_username, use_fullname,use_email,use_mobile,tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id,tbtt_showcart.*,SUM(tbtt_showcart.shc_total) As showcarttotal,", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.shc_saler", $where, $sort, $by, $start, '');
        $totalRecord = count($staffssum);
        $config['base_url'] = base_url() . 'account/' . $segment2 . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limmit;
        $config['num_links'] = 1;
        $config['uri_segment'] = $uri_segment;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $staffs = $this->user_model->fetch_join1("use_id,use_username, use_fullname,use_email,use_mobile,tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id,tbtt_showcart.*,SUM(tbtt_showcart.shc_total) As showcarttotal,", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.shc_saler", $where, $sort, $by, $start, $limmit);
        $data['stt'] = $start + 1;
        $LArray = array();
        $money = array();
        $total_sum = 0;
        if (!empty($staffs)) {
            foreach ($staffs as $key => $row) {
                $info = $this->get_my_shop($row->use_id);
                $LArray[] = array(
                    'info_parent' => $info['info_parent'],
                    'pshop' => $info['pshop'],
                    'link_gh' => $info['link_gh']
                );
                $shc_saler = $this->treebranch($row->use_id);
                //echo 'h: '.$row->use_id.',';
                $id = $row->use_id;
                $strid = implode(',', $shc_saler);
                if($strid != ''){
                    $id .= ','.$strid;
                    $money[$row->use_id] = $this->showcart_model->fetch("SUM(tbtt_showcart.shc_total) As showcarttotal", 'shc_status=98 AND shc_saler IN('.$id.')');
                    $total_sum += $money[$row->use_id][0]->showcarttotal;
                }else{
                    $total_sum += $row->showcarttotal;
                }
            }
        }
        $data['staffs'] = $staffs;
        
        $total = $this->user_model->fetch_join1("SUM(tbtt_showcart.shc_total) As showcarttotal,", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.shc_saler", $where, '', '', '', '');
        $total_sum = $this->getmoneyfromstore($total,$strStore);
        $data['money'] = $money;
        $data['total_sum'] = $total_sum["total_sum"];
        for ($i = 0; $i < count($staffs); $i++) {
            $this->db->cache_off();
            $parentUser = $this->user_model->get("use_id, use_username", "use_id = " . $staffs[$i]->parent_id);
            $staffs[$i]->username_parent = $parentUser->use_username;
            $staffs[$i]->userid_parent = $parentUser->use_id;
        }
        $data['text'] = $text;
        $data['linkGH'] = $LArray;
        #Load view
        $this->load->view('home/account/statistic/statisticlistshop', $data);
    }

    function statisticlistshop($p = null)
    {
        $segment2 = $this->uri->segment(2);
        $dateto = $_REQUEST['datefromshop'];
        $datefrom = $_REQUEST['datetoshop'];
        $this->session->set_userdata('datetoshop', $dateto);
        $this->session->set_userdata('datefromshop', $datefrom);
        $data['savedateto'] = $dateto;
        $data['savedatefrom'] = $datefrom;
        $monthsto = date('m', strtotime($dateto));
        $dayto = date('d', strtotime($dateto));
        $yearto = date('y', strtotime($dateto));

        $monthsfrom = date('m', strtotime($datefrom));
        $dayfrom = date('d', strtotime($datefrom));
        $yearfrom = date('y', strtotime($datefrom));
        $startdate = mktime(0, 0, 0, $monthsto, $dayto, $yearto);
        $enddate = mktime(23, 59, 59, $monthsfrom, $dayfrom, $yearfrom);
        $enddatenull = mktime(0, 0, 0, 01, 01, 2006);        

        $data['menuSelected'] = 'statistic';
        $data['menuType'] = 'account';
        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page','shc','prn');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        $session_id = $this->session->userdata('sessionUser');
        $session_grt = $this->session->userdata('sessionGroup');
        if ($p != null) {
            $session_id = $p;
        } elseif ($getVar['shc'] > 0) {
            $session_id = (int)$getVar['shc'];
        }

        if ($getVar['shc'] > 0) {            
            $treeunder = $this->treeunderD($session_id,'6,7,8');
            $tree = $treeunder['tree'];
            $tree[] = $session_id;
            $tree = implode(',', $tree);
        } else {
            $tree = array();
            $data['tree_list'] = $tree_list;
            if( $this->uri->segment(2) == 'statisticlistshop'){                
                $treeunder = $this->treeunderD($session_id,0);
            }else{
                if($session_grt > Partner1User && $p == null){
                    $treeunder = $this->gettreeP1($session_id);
                }else{
                    $treeunder = $this->treeunderD($session_id,'6,7,8');
                }
            }
            $tree = $treeunder['tree'];
            $tree[] = $session_id;
            $tree = implode(',', $tree);
        }
        $uri_segment = 4;
        $strStore = '';
        if($segment2 == 'statisticlistshopall'){
            $text = 'toàn hệ thống';
            $strStore .= $tree;
            $treeunderStore = $this->treebranch($tree);
        }else{
            $strStore .= implode(',', $treeunder['treestoreinPD']);
            if($segment2 == 'statisticlistPartner'){
                $infoPartner = $this->user_model->get("use_username", "use_id = ".(int)$getVar['prn']);
                $text = 'của <span style="color: #f00">'.$infoPartner->use_username.'</span>';
                $uri_segment = 5;
                $segment2 .= '/prn/'.$getVar['prn'];
            }else{
                $text = 'trực thuộc';
            }
            $treeunderStore = $this->treebranch($session_id);
        }
        $strStorebranch = implode(',',$treeunderStore);
        if($strStorebranch != ''){
            $strStore .= ','.$strStorebranch;
        }
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "use_fullname";
                    break;
                case 'shopname':
                    $pageUrl .= '/sort/shopname';
                    $sort = "sho_name";
                    break;
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }

        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/' . $segment2 . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        if ($strStore!= '' || count($tree) > 0) {            
            $where = 'use_status = 1 and use_group IN(3) and (use_id IN(' . $strStore . ') OR parent_id IN(' . $strStore . '))';
        }
        
        $staffs = $this->user_model->fetch("use_id,use_group,use_username,parent_id,parent_id as pId, (SELECT use_username FROM tbtt_user WHERE use_id = pId) as username_parent", $where, $sort, $by, $start, '');        
        $LArray = array();
        $money = array();
        $listStore = array();
        $listmoney = array();
        $total_sum = 0;
        $where = 'shc_status IN(98)';
        if ($dateto != '' && $datefrom != '') {
            $where .= " AND shc_change_status_date >= " . (float)$startdate . " AND shc_change_status_date <= " . (float)$enddate;
        } else {
            $where .= " AND shc_change_status_date >=" . (float)$enddatenull;
        }
        //get all store => get bran
        if (!empty($staffs)) {
            foreach ($staffs as $key => $row) {
                $shc_saler = $this->treebranch($row->use_id);
                $id = $row->use_id;
                $strid = implode(',', $shc_saler);
                if($strid != ''){
                    $id .= ','.$strid;
                }
                $getDT = $this->showcart_model->fetch("SUM(tbtt_showcart.shc_total) As showcarttotal", $where.' AND shc_saler IN('.$id.')');
                if($getDT[0]->showcarttotal != ''){
                    $listmoney[$row->use_id] = $getDT[0]->showcarttotal;
                    $listStore[] = $row->use_id;
                }
            }
        }
        $strid = implode(',', $listStore);
        if($strid != ''){
            $limmit = 20;
            $listStore = $this->user_model->fetch_join1("use_id,use_group,use_username, use_fullname,use_email,use_mobile,tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "","","", 'use_id IN(' . $strid . ')', $sort, $by, $start, $limmit);
            if (!empty($listStore)) {
                foreach ($listStore as $key => $row) {
                    $info = $this->get_my_shop($row->use_id);
                    $LArray[] = array(
                        'info_parent' => $info['info_parent'],
                        'pshop' => $info['pshop'],
                        'link_gh' => $info['link_gh']
                    );
                }
            }
            #END Create link sort
            #BEGIN: Pagination
            $this->load->library('pagination');
            #Count total record
            $staffssum = $this->user_model->fetch_join1("use_id", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "","","", 'use_id IN(' . $strid . ')', $sort, $by, $start, '');
            $totalRecord = count($staffssum);
            $config['base_url'] = base_url() . 'account/' . $segment2 . $pageUrl . '/page/';
            $config['total_rows'] = $totalRecord;
            $config['per_page'] = $limmit;
            $config['num_links'] = 1;
            $config['uri_segment'] = $uri_segment;
            $config['cur_page'] = $start;
            $this->pagination->initialize($config);
            $data['linkPage'] = $this->pagination->create_links();
            #END Pagination
            #sTT - So thu tu
            $data['stt'] = $start + 1;
            $total = $this->user_model->fetch_join1("SUM(tbtt_showcart.shc_total) As showcarttotal,", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.shc_saler", $where, '', '', '', '');
            $total_sum = $this->getmoneyfromstore($total,$strStore);
            $data['money'] = $listmoney;
            $data['total_sum'] = $total_sum["total_sum"];
            $data['linkGH'] = $LArray;
        }        
        $data['staffs'] = $listStore;
        $data['text'] = $text;
        #Load view
        $this->load->view('home/account/statistic/statisticlistshop', $data);
    }    

    function detailstatisticlistshop_old()
    {
        $dateto = $this->session->userdata('datetoshop');
        $datefrom = $this->session->userdata('datefromshop');
        $data['afsavedateto'] = $dateto;
        $data['afsavedatefrom'] = $datefrom;
        $monthsto = date('m', strtotime($dateto));
        $dayto = date('d', strtotime($dateto));
        $yearto = date('y', strtotime($dateto));

        $monthsfrom = date('m', strtotime($datefrom));
        $dayfrom = date('d', strtotime($datefrom));
        $yearfrom = date('y', strtotime($datefrom));
        $startdate = mktime(0, 0, 0, $monthsto, $dayto, $yearto);
        $enddate = mktime(23, 59, 59, $monthsfrom, $dayfrom, $yearfrom);
        $enddatenull = mktime(0, 0, 0, 01, 01, 2006);

        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == StaffUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/detailstatisticlistshop' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        $where = '';
        #END Create link sort
        #Keyword
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/detailstatisticlistshop' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        $this->load->library('pagination');
        if ($this->uri->segment('3') != 'page') {
            $tree_af_id = $this->uri->segment('3');
            $this->session->set_userdata('tree_af_id', $tree_af_id);
        }
        $tree_af_id_session = $this->session->userdata('tree_af_id');
        $wherestore = 'use_status = 1 AND use_group = 3 AND use_id =' . $tree_af_id_session;
        if ($dateto != '' && $datefrom != '') {
            $wherestore .= " AND shc_change_status_date >= " . (float)$startdate . " AND shc_change_status_date <= " . (float)$enddate;
        } else {
            $wherestore .= " AND shc_change_status_date >=" . (float)$enddatenull;
        }
        $wherestore .= ' AND shc_status IN(98)';
        #BEGIN: Pagination
        #Count total record
        $totalRecord = count($this->user_model->fetch_join2("use_username,shc_quantity,shc_change_status_date,shc_total,pro_name", "INNER", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.shc_saler", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $wherestore, '', '', '', ''));
        $config['base_url'] = base_url() . 'account/detailstatisticlistshop' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $limit = 20;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        $data['stt'] = $start;
        #END Pagination
        #sTT - So thu tu
        $liststoreAF = $this->user_model->fetch_join2("use_username,shc_quantity,shc_change_status_date,shc_total,pro_name", "INNER", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.shc_saler", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $wherestore, $sort, $by, $start, $limit);
        $data['liststoreAF'] = $liststoreAF;
        if ($sort == 'showcarttotal') {
            $pageUrl .= '/sort/id';
            $sort = "use_id";
        }
        #Load view
        $use_id = (int)$this->input->post('use_id');
        $shop_id = (int)$this->input->post('parent_shop_id');
        if (isset($use_id) && $use_id > 0) {
            $this->user_model->update(array('parent_shop' => $shop_id), 'use_id = ' . $use_id);
            echo '1';
            return false;
            exit();
        }
        $data['menuSelected'] = 'statistic';
        $data['menuType'] = 'account';
        $this->load->view('home/account/statistic/detailstatisticlistshop', $data);
    }

    function treebranch($shop){
        $tree = array();
        $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . StaffStoreUser . ',' . BranchUser . ') AND use_status = 1 AND parent_id IN(' . $shop . ')');
        if (!empty($sub_tructiep)) {
            foreach ($sub_tructiep as $key => $value) {
                $tree[] = $value->use_id;
                if ($value->use_group == StaffStoreUser) {
                    $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_cn)) {
                        foreach ($sub_cn as $k => $vlue) {
                            $tree[] = $vlue->use_id;
                        }
                    }
                }
            }
        }
        return $tree;
    }
    
    function treestaff($sub_tructiep){
        $tree = array();
        if (!empty($sub_tructiep)) {
            foreach ($sub_tructiep as $key => $value) {
                //Nếu là chi nhánh, lấy danh sách nhân viên
                $tree[] = $value->use_id;
                if ($value->use_group == StaffStoreUser) {
                    //Lấy danh sách CN dưới nó cua NVGH
                    $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . BranchUser . ',' . StaffUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_cn)) {
                        foreach ($sub_cn as $k => $vlue) {
                            $tree[] = $vlue->use_id;
                            if ($vlue->use_group == BranchUser) {
                                //Lấy danh sách CN dưới nó cua NVGH
                                $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . StaffUser . ') AND use_status = 1 AND parent_id = ' . $vlue->use_id);
                                if (!empty($sub_cn)) {
                                    foreach ($sub_cn as $k => $v) {
                                        $tree[] = $v->use_id;
                                    }
                                }
                            }
                        }
                    }
                }
                if ($value->use_group == BranchUser) {
                    //Lấy danh sách CN dưới nó cua NVGH
                    $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . StaffUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_cn)) {
                        foreach ($sub_cn as $k => $v) {
                            $tree[] = $v->use_id;
                        }
                    }
                }
            }
        }
        return $tree;
    }

    function detailstatisticlistshop()
    {
        $dateto = $this->session->userdata('datetoshop');
        $datefrom = $this->session->userdata('datefromshop');
        $data['afsavedateto'] = $dateto;
        $data['afsavedatefrom'] = $datefrom;
        $monthsto = date('m', strtotime($dateto));
        $dayto = date('d', strtotime($dateto));
        $yearto = date('y', strtotime($dateto));

        $monthsfrom = date('m', strtotime($datefrom));
        $dayfrom = date('d', strtotime($datefrom));
        $yearfrom = date('y', strtotime($datefrom));
        $startdate = mktime(0, 0, 0, $monthsto, $dayto, $yearto);
        $enddate = mktime(23, 59, 59, $monthsfrom, $dayfrom, $yearfrom);
        $enddatenull = mktime(0, 0, 0, 01, 01, 2006);

        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == StaffUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/detailstatisticlistshop' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        $where = '';
        #END Create link sort
        #Keyword
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/detailstatisticlistshop' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        $this->load->library('pagination');
        if ($this->uri->segment(3) != 'page') {
            $tree_af_id = $this->uri->segment(3);
            $this->session->set_userdata('tree_af_id', $tree_af_id);
        }        
         
        $idshop = (int)$this->uri->segment(3);
        $tree = $this->treebranch($idshop);
        $tree[] = $idshop;
        $id = implode(',', $tree);        
        
        $wherestore = 'use_status = 1 AND shc_saler IN(' . $id.')';
        if ($dateto != '' && $datefrom != '') {
            $wherestore .= " AND shc_change_status_date >= " . (float)$startdate . " AND shc_change_status_date <= " . (float)$enddate;
        } else {
            $wherestore .= " AND shc_change_status_date >=" . (float)$enddatenull;
        }
        $wherestore .= ' AND shc_status IN(98)';
        
        #BEGIN: Pagination
        #Count total record
        $totalRecord = count($this->user_model->fetch_join2("use_username,shc_quantity,shc_change_status_date,shc_total,pro_name", "INNER", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.shc_saler", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $wherestore, '', '', '', ''));
        $config['base_url'] = base_url() . 'account/detailstatisticlistshop' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $limit = 20;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        $data['stt'] = $start;
        #END Pagination
        #sTT - So thu tu
        $liststoreAF = $this->user_model->fetch_join2("use_username,shc_quantity,shc_change_status_date,shc_total,pro_name", "INNER", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.shc_saler", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $wherestore, $sort, $by, $start, $limit);
        $data['liststoreAF'] = $liststoreAF;
        if ($sort == 'showcarttotal') {
            $pageUrl .= '/sort/id';
            $sort = "use_id";
        }
        #Load view
        $use_id = (int)$this->input->post('use_id');
        $shop_id = (int)$this->input->post('parent_shop_id');
        if (isset($use_id) && $use_id > 0) {
            $this->user_model->update(array('parent_shop' => $shop_id), 'use_id = ' . $use_id);
            echo '1';
            return false;
            exit();
        }
        $data['menuSelected'] = 'statistic';
        $data['menuType'] = 'account';
        $this->load->view('home/account/statistic/detailstatisticlistshop', $data);
    }

    function statisticproduct()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if($group_id == StaffStoreUser) {
            $user_id = $this->user_model->get("parent_id", "use_id = " . $this->session->userdata('sessionUser'))->parent_id;
            $user_group = $this->user_model->get("use_group", "use_id = " . $user_id)->use_group;
        } else {
            $user_id = $this->session->userdata('sessionUser');
            $user_group = $this->session->userdata('sessionGroup');
        }
        //Get input search date
        $datefrom = $_REQUEST['datefrom'];
        $dateto = $_REQUEST['dateto'];
        $startdate = strtotime($datefrom);
        $enddate = strtotime($dateto);
        $enddatenull = mktime(0, 0, 0, 01, 01, 2006);

        $data['afsavedateto'] = $dateto;
        $data['afsavedatefrom'] = $datefrom;
        $where = '';
        $sort = 'pro_name';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "total";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/statisticproduct' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record

        $tree = array();
        $this->getTreeInList($user_id, $tree);
        $tree[] = $user_id;
        $tree = implode(',', $tree);

        $wheresparentt = $this->user_model->fetch('use_id', 'use_group != 2 AND parent_id IN (' . $tree . ')');
        foreach ($wheresparentt as $kiemtra) {
            $tree .= "," . $kiemtra->use_id;
        }

        $wherestostt = $this->user_model->fetch('use_id, use_group', 'use_group != 2 AND parent_id IN (' . $tree . ')');
        foreach ($wherestostt as $kiemtrab) {
            $tree .= "," . $kiemtrab->use_id;
        }

        $wherestost = $this->user_model->fetch('use_id, use_group', 'use_group = 2 AND parent_id IN (' . $tree . ')');
        foreach ($wherestost as $kiemtraa) {
            $tree .= "," . $kiemtraa->use_id;
        }

        $saler = '';
        if ($this->session->userdata('sessionGroup') == AffiliateStoreUser || ($this->session->userdata('sessionGroup') == StaffStoreUser && $user_group == AffiliateStoreUser)) {
            $tree1 = array();
            $GH = $user_id;
            // if ($this->session->userdata('sessionGroup') == StaffStoreUser) {
            //     $getp = $this->user_model->fetch('use_id,parent_id', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
            //     $tree1[] = $GH = (int)$getp[0]->parent_id;
            // }
            $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $user_id);
            if (!empty($sub_tructiep)) {
                foreach ($sub_tructiep as $key => $value) {
                    //Nếu là chi nhánh, lấy danh sách nhân viên

                    // if ($value->use_group == StaffStoreUser) {
                    //     //Lấy danh sách CN dưới nó cua NVGH
                    //     $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                    //     if (!empty($sub_cn)) {
                    //         foreach ($sub_cn as $k => $vlue) {
                    //             $tree1[] = $vlue->use_id;
                    //         }
                    //     }
                    // } else {
                    //     $tree1[] = $value->use_id;
                    // }
                    $tree1[] = $value->use_id;
                }
            }
            //  $id = implode(" OR tbtt_order.order_saler=", $tree1);
            $id = implode(",", $tree1);
            $saler = '((tbtt_order.order_saler=' . $GH . ' AND pro_of_shop=0)';
            // if ($this->session->userdata('sessionGroup') == StaffStoreUser) {
            //     $saler = '((tbtt_order.order_saler=' . $GH . ' AND pro_of_shop=0) and tbtt_showcart.af_id IN (' . $tree . ')';
            // }
            if (!empty($id)) {
                $saler .= ' OR ((tbtt_order.order_saler IN(' . $id . ')) AND pro_of_shop > 0)';
            }
            $saler .= ')';

        } else {
            if ($this->session->userdata('sessionGroup') == BranchUser || ($this->session->userdata('sessionGroup') == StaffStoreUser && $user_group == BranchUser)) {
                $saler = 'tbtt_order.order_saler = ' . $user_id;
            } else {
                $saler = 'tbtt_showcart.af_id IN (' . $tree . ')';
            }
        }
        if ($group_id <= 2 || $group_id == 11) {
            $get_u = $this->user_model->get('parent_id, use_group', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
            // $get_af = $this->user_model->fetch('use_id, use_group', 'parent_id = ' . (int)$this->session->userdata('sessionUser').' and use_status=1 and use_group='.AffiliateUser);
            $id_p = $get_u->parent_id;//Lay sp do chinh cha tk đó tao ra
            $get_p = $this->user_model->get('parent_id, use_group', 'use_id = ' . $get_u->parent_id);
            if ($get_p->use_group == StaffUser) {
                $get_p1 = $this->user_model->get('use_id,parent_id', 'use_id = ' . $get_p->parent_id);
                $id_p = $get_p1->use_id . ',' . $get_p1->parent_id;
            }

            $wheree = '(tbtt_showcart.af_id IN (' . $tree . ')';
            if ($group_id != AffiliateUser) {
                $wheree .= ' AND ( tbtt_order.order_saler IN (' . $id_p . ') AND tbtt_product.pro_user IN (' . $id_p . '))'; //tam khoa
            }
            $wheree .= ')';
        } else {
            $wheree = $saler;
        }
        $wheree .= ' AND shc_status IN(01,02,03,98)';

        if ($datefrom != '' || $dateto != '') {
            if ($datefrom != ''){
                $wheree .= " AND tbtt_showcart.shc_change_status_date >= " . (float)$startdate;
            }
            if ($dateto != ''){
                $wheree .= " AND tbtt_showcart.shc_change_status_date <= " . (float)$enddate;
            }
        }

        $select = "tbtt_showcart.af_id, af_dc_rate, af_dc_amt, pro_price_rate, pro_price_amt, pro_type, domain, sho_link, tbtt_showcart.af_rate, tbtt_showcart.af_amt, pro_dir, shc_quantity, shc_orderid, id, pro_name, pro_cost, pro_image, tbtt_product.pro_category, tbtt_product.pro_id, tbtt_category.*, SUM(tbtt_showcart.shc_quantity) As showcarttotal, (SUM(tbtt_showcart.shc_quantity) * pro_price ) AS total";

        $totalRecord = Count($this->order_model->fetch_join5("tbtt_product.pro_id, SUM(tbtt_showcart.shc_quantity) As showcarttotal, (SUM(tbtt_showcart.shc_quantity) * pro_cost ) AS total", "INNER", "tbtt_showcart", "tbtt_order.id = tbtt_showcart.shc_orderid", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", "LEFT", "tbtt_category", "tbtt_product.pro_category = tbtt_category.cat_id,tbtt_shop", $wheree . ' AND `tbtt_showcart`.`shc_saler` = sho_user', $sort, '', "", ""));

        $limit = 20;
        $config['base_url'] = base_url() . 'account/statisticproduct' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        $data['stt'] = $start;
        #END Pagination

        #sTT - So thu tu
        $liststoreAF = $this->order_model->fetch_join5($select, "INNER", "tbtt_showcart", "tbtt_order.id = tbtt_showcart.shc_orderid", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", "LEFT", "tbtt_category", "tbtt_product.pro_category = tbtt_category.cat_id,tbtt_shop", $wheree . ' and `tbtt_showcart`.`shc_saler` = sho_user', $sort, $by, $start, $limit);
        $get_u = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = ' . $user_id);
        $protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off' || $_SERVER['SERVER_PORT'] == 443) ? "https://" : "http://";
        $duoi = '.' . substr(base_url(), strlen($protocol), strlen(base_url()));
        switch ($get_u[0]->use_group) {
            case AffiliateStoreUser:
            case BranchUser:
                if ($get_u[0]->domain != '') {
                    $parent = $get_u[0]->domain . '/';
                } else {
                    $parent = $get_u[0]->sho_link . $duoi;
                }
                break;
            case StaffStoreUser:
            case StaffUser:
                $get_p = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_u[0]->parent_id . '"');

                if ($get_p[0]->domain != '') {
                    $parent = $get_p[0]->domain . '/';
                } else {
                    $parent = $get_p[0]->sho_link . $duoi;
                }
                break;

            case AffiliateUser:
                $get_p = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_u[0]->parent_id . '"');
                if ($get_p[0]->use_group == AffiliateStoreUser || $get_p[0]->use_group == BranchUser) {
                    if ($get_p[0]->domain != '') {
                        $parent = $get_p[0]->domain;
                    } else {
                        $parent = $get_p[0]->sho_link;
                    }
                } else {
                    if ($get_p[0]->use_group == StaffStoreUser || $get_p[0]->use_group == StaffUser) {
                        $get_p1 = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_p[0]->parent_id . '"');
                        if ($get_p1[0]->domain != '') {
                            $parent = $get_p1[0]->domain;
                        } else {
                            $parent = $get_p1[0]->sho_link;
                        }
                    } else {
                        $get_p1 = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_p[0]->parent_id . '"');
                        if ($get_p1[0]->use_group == StaffStoreUser && $get_p[0]->use_group == StaffUser) {
                            $get_p2 = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_p1[0]->parent_id . '"');
                            if ($get_p1[0]->domain != '') {
                                $parent = $get_p2[0]->domain;
                            } else {
                                $parent = $get_p2[0]->sho_link;
                            }
                        }
                    }
                }
                break;
        }

        $data['parent'] = $parent;
        $total_sum_staff = 0;
        $total_sum = $this->order_model->fetch_join5("tbtt_product.pro_id, SUM(tbtt_showcart.shc_quantity) As showcarttotal, (SUM(tbtt_showcart.shc_quantity) * pro_price ) AS total", "INNER", "tbtt_showcart", "tbtt_order.id = tbtt_showcart.shc_orderid", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", "LEFT", "tbtt_category", "tbtt_product.pro_category = tbtt_category.cat_id,tbtt_shop", $wheree . ' and `tbtt_showcart`.`shc_saler` = sho_user', '', '', "", "");
        $doanhthu = array();
        foreach ($total_sum as $key => $items) {
            $sum = 0;
            // if ($group_id <= 2 || $group_id == 11 || $group_id == StaffStoreUser) {
            if ($group_id <= 2 || $group_id == 11) {
                $wheree = 'tbtt_showcart.shc_product = ' . $items->pro_id . ' and (tbtt_showcart.af_id IN (' . $tree . ') OR tbtt_order.order_saler IN (' . $tree . '))';

            } else {
                $wheree = 'tbtt_showcart.shc_product = ' . $items->pro_id . ' and tbtt_order.order_saler IN (' . $tree . ') and tbtt_product.pro_user IN (' . $tree . ')';
            }
            $wheree .= ' and shc_status IN(01,02,03,98)';

            $select = "em_discount,tbtt_showcart.af_id,af_dc_rate,af_dc_amt,pro_price_rate,pro_price_amt,pro_dir,order_token, shc_orderid,id,pro_name,pro_cost,pro_image,tbtt_product.pro_category,tbtt_product.pro_id,tbtt_user.*,tbtt_group.*,tbtt_showcart.*,tbtt_product.pro_id,tbtt_product.pro_cost, shc_quantity, pro_price";//SUM(shc_quantity) AS shc_quantity_sum , (SUM(shc_quantity)* pro_price) AS total_sum
            $liststoredetail = $this->order_model->fetch_join6($select, "INNER", "tbtt_showcart", "tbtt_order.id = tbtt_showcart.shc_orderid", "LEFT", "tbtt_user", "tbtt_order.order_user = tbtt_user.use_id", "LEFT", "tbtt_group", "tbtt_user.use_group = tbtt_group.gro_id", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $wheree, '', '', '', '', '');
            foreach ($liststoredetail as $key => $item) {
                $gia = $item->shc_quantity * $item->pro_price;
                if ($item->em_discount > 0) {
                    $gia = ($item->shc_quantity * $item->pro_price) - $item->em_discount;
                }
                $sum += $gia;
                $total_sum_staff += $gia;
            }
            $doanhthu[$items->pro_id] = $sum;
        }
        $data['doanhthu'] = $doanhthu;
        $data['staffs'] = $liststoreAF;
        $data['total_sum_staff'] = $total_sum_staff;
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'statistic';
        $data['menuType'] = 'account';

        #Load view
        $this->load->view('home/account/statistic/statisticproduct', $data);
    }

    function statisticproduct_Store()
    {
        $group_id = $this->session->userdata('sessionGroup');

        //Get input search date
        $datefrom = $_REQUEST['datefrom'];
        $dateto = $_REQUEST['dateto'];
        $startdate = strtotime($datefrom);
        $enddate = strtotime($dateto);
        $enddatenull = mktime(0, 0, 0, 01, 01, 2006);

        $data['afsavedateto'] = $dateto;
        $data['afsavedatefrom'] = $datefrom;
        $where = '';
        $sort = 'pro_name';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "total";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/statisticproduct' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record

        $tree = array();
        $this->getTreeInList((int)$this->session->userdata('sessionUser'), $tree);
        $tree[] = $this->session->userdata('sessionUser');
        $tree = implode(',', $tree);

        $wheresparentt = $this->user_model->fetch('use_id', 'use_group != 2 AND parent_id IN (' . $tree . ')');
        foreach ($wheresparentt as $kiemtra) {
            $tree .= "," . $kiemtra->use_id;
        }

        $wherestostt = $this->user_model->fetch('use_id, use_group', 'use_group != 2 AND parent_id IN (' . $tree . ')');
        foreach ($wherestostt as $kiemtrab) {
            $tree .= "," . $kiemtrab->use_id;
        }

        $wherestost = $this->user_model->fetch('use_id, use_group', 'use_group = 2 AND parent_id IN (' . $tree . ')');
        foreach ($wherestost as $kiemtraa) {
            $tree .= "," . $kiemtraa->use_id;
        }

        $saler = '';
        if ($this->session->userdata('sessionGroup') == AffiliateStoreUser) {
            $tree1 = array();
            $GH = (int)$this->session->userdata('sessionUser');
            $saler = '(tbtt_order.order_saler=' . $GH . ' AND pro_of_shop=0)';
        }
        if ($group_id <= 2 || $group_id == 11) {
            $get_u = $this->user_model->get('parent_id, use_group', 'use_id = ' . (int)$this->session->userdata('sessionUser'));            
            $id_p = $get_u->parent_id;//Lay sp do chinh cha tk đó tao ra
            $get_p = $this->user_model->get('parent_id, use_group', 'use_id = ' . $get_u->parent_id);
            if ($get_p->use_group == StaffUser) {
                $get_p1 = $this->user_model->get('use_id,parent_id', 'use_id = ' . $get_p->parent_id);
                $id_p = $get_p1->use_id . ',' . $get_p1->parent_id;
            }

            $wheree = '(tbtt_showcart.af_id IN (' . $tree . ')';
            if ($group_id != AffiliateUser) {
                $wheree .= ' AND ( tbtt_order.order_saler IN (' . $id_p . ') AND tbtt_product.pro_user IN (' . $id_p . '))'; //tam khoa
            }
            $wheree .= ')';
        } else {
            $wheree = $saler;
        }
        $wheree .= ' AND shc_status IN(01,02,03,98)';

        if ($datefrom != '' && $dateto != '') {
            $wheree .= " AND tbtt_showcart.shc_change_status_date >= " . (float)$startdate . " AND tbtt_showcart.shc_change_status_date <= " . (float)$enddate;
        }

        $select = "tbtt_showcart.af_id, af_dc_rate, af_dc_amt, pro_price_rate, pro_price_amt, pro_type, domain, sho_link, tbtt_product.af_rate, tbtt_product.af_amt, pro_dir,  shc_quantity, shc_orderid, id, pro_name, pro_cost, pro_image, tbtt_product.pro_category, tbtt_product.pro_id, tbtt_category.*, SUM(tbtt_showcart.shc_quantity) As showcarttotal, (SUM(tbtt_showcart.shc_quantity) * pro_price ) AS total";

        $totalRecord = Count($this->order_model->fetch_join5("tbtt_product.pro_id, SUM(tbtt_showcart.shc_quantity) As showcarttotal, (SUM(tbtt_showcart.shc_quantity) * pro_cost ) AS total", "INNER", "tbtt_showcart", "tbtt_order.id = tbtt_showcart.shc_orderid", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", "LEFT", "tbtt_category", "tbtt_product.pro_category = tbtt_category.cat_id,tbtt_shop", $wheree . ' AND `tbtt_showcart`.`shc_saler` = sho_user', $sort, '', "", ""));

        $limit = 20;
        $config['base_url'] = base_url() . 'account/statisticproduct' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        $data['stt'] = $start;
        #END Pagination

        #sTT - So thu tu
        $liststoreAF = $this->order_model->fetch_join5($select, "INNER", "tbtt_showcart", "tbtt_order.id = tbtt_showcart.shc_orderid", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", "LEFT", "tbtt_category", "tbtt_product.pro_category = tbtt_category.cat_id,tbtt_shop", $wheree . ' and `tbtt_showcart`.`shc_saler` = sho_user', $sort, $by, $start, $limit);
        $get_u = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . (int)$this->session->userdata('sessionUser') . '"');
        $protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off' || $_SERVER['SERVER_PORT'] == 443) ? "https://" : "http://";
        $duoi = '.' . substr(base_url(), strlen($protocol), strlen(base_url()));
        switch ($get_u[0]->use_group) {
            case AffiliateStoreUser:
            case BranchUser:
                if ($get_u[0]->domain != '') {
                    $parent = $get_u[0]->domain . '/';
                } else {
                    $parent = $get_u[0]->sho_link . $duoi;
                }
                break;
            case StaffStoreUser:
            case StaffUser:
                $get_p = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_u[0]->parent_id . '"');

                if ($get_p[0]->domain != '') {
                    $parent = $get_p[0]->domain . '/';
                } else {
                    $parent = $get_p[0]->sho_link . $duoi;
                }
                break;

            case AffiliateUser:
                $get_p = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_u[0]->parent_id . '"');
                if ($get_p[0]->use_group == AffiliateStoreUser || $get_p[0]->use_group == BranchUser) {
                    if ($get_p[0]->domain != '') {
                        $parent = $get_p[0]->domain;
                    } else {
                        $parent = $get_p[0]->sho_link;
                    }
                } else {
                    if ($get_p[0]->use_group == StaffStoreUser || $get_p[0]->use_group == StaffUser) {
                        $get_p1 = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_p[0]->parent_id . '"');
                        if ($get_p1[0]->domain != '') {
                            $parent = $get_p1[0]->domain;
                        } else {
                            $parent = $get_p1[0]->sho_link;
                        }
                    } else {
                        $get_p1 = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_p[0]->parent_id . '"');
                        if ($get_p1[0]->use_group == StaffStoreUser && $get_p[0]->use_group == StaffUser) {
                            $get_p2 = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_p1[0]->parent_id . '"');
                            if ($get_p1[0]->domain != '') {
                                $parent = $get_p2[0]->domain;
                            } else {
                                $parent = $get_p2[0]->sho_link;
                            }
                        }
                    }
                }
                break;
        }

        $data['parent'] = $parent;
        $total_sum_staff = 0;
        $total_sum = $this->order_model->fetch_join5("tbtt_product.pro_id, SUM(tbtt_showcart.shc_quantity) As showcarttotal, (SUM(tbtt_showcart.shc_quantity) * pro_price ) AS total", "INNER", "tbtt_showcart", "tbtt_order.id = tbtt_showcart.shc_orderid", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", "LEFT", "tbtt_category", "tbtt_product.pro_category = tbtt_category.cat_id,tbtt_shop", $wheree . ' and `tbtt_showcart`.`shc_saler` = sho_user', '', '', "", "");
        $doanhthu = array();
        foreach ($total_sum as $key => $items) {
            $sum = 0;
            if ($group_id <= 2 || $group_id == 11 || $group_id == StaffStoreUser) {
                $wheree = 'tbtt_showcart.shc_product = ' . $items->pro_id . ' and (tbtt_showcart.af_id IN (' . $tree . ') OR tbtt_order.order_saler IN (' . $tree . '))';

            } else {
                $wheree = 'tbtt_showcart.shc_product = ' . $items->pro_id . ' and tbtt_order.order_saler IN (' . $tree . ') and tbtt_product.pro_user IN (' . $tree . ')';
            }
            $wheree .= ' and shc_status IN(01,02,03,98)';

            $select = "em_discount,tbtt_showcart.af_id,af_dc_rate,af_dc_amt,pro_price_rate,pro_price_amt,pro_dir,order_token, shc_orderid,id,pro_name,pro_cost,pro_image,tbtt_product.pro_category,tbtt_product.pro_id,tbtt_user.*,tbtt_group.*,tbtt_showcart.*,tbtt_product.pro_id,tbtt_product.pro_cost, shc_quantity, pro_price";//SUM(shc_quantity) AS shc_quantity_sum , (SUM(shc_quantity)* pro_price) AS total_sum
            $liststoredetail = $this->order_model->fetch_join6($select, "INNER", "tbtt_showcart", "tbtt_order.id = tbtt_showcart.shc_orderid", "LEFT", "tbtt_user", "tbtt_order.order_user = tbtt_user.use_id", "LEFT", "tbtt_group", "tbtt_user.use_group = tbtt_group.gro_id", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $wheree, '', '', '', '', '');
            foreach ($liststoredetail as $key => $item) {
                $gia = $item->shc_quantity * $item->pro_price;
                if ($item->em_discount > 0) {
                    $gia = ($item->shc_quantity * $item->pro_price) - $item->em_discount;
                }
                $sum += $gia;
                $total_sum_staff += $gia;
            }
            $doanhthu[$items->pro_id] = $sum;
        }
        $data['doanhthu'] = $doanhthu;
        $data['staffs'] = $liststoreAF;
        $data['total_sum_staff'] = $total_sum_staff;
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'statisticStore';
        $data['menuType'] = 'account';

        #Load view
        $this->load->view('home/account/statistic/statisticproduct', $data);
    }

    function detail_statistic_product()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if($group_id == StaffStoreUser) {
            $user_id = $this->user_model->get("parent_id", "use_id = " . $this->session->userdata('sessionUser'))->parent_id;
            $user_group = $this->user_model->get("use_group", "use_id = " . $user_id)->use_group;
        } else {
            $user_id = $this->session->userdata('sessionUser');
            $user_group = $this->session->userdata('sessionGroup');
        }
        
        $sort = 'pro_name';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(4, $action);
        #If have sort
        $abc = $this->uri->segment('3');
        if ($getVar['sort'] == FALSE && trim($getVar['sort']) == '' && $abc != 'page') {
            $piro_id = $this->uri->segment('3');
            $this->session->set_userdata("piro_id", $piro_id);
        }
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "sho_name";
                    break;
                case 'group':
                    $pageUrl .= '/sort/group';
                    $sort = "use_group";
                    break;
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "doanhthu";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";
            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/detail_statistic_product/' . $this->uri->segment(3) . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        $where = '';
        #END Create link sort

        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $use_group_query = '';

        $tree = array();
        $this->getTreeInList($user_id, $tree);
        $tree[] = $user_id;
        $tree = implode(',', $tree);

        $wheresparentt = $this->user_model->fetch('use_id', 'use_group != 2 and parent_id IN (' . $tree . ')');
        foreach ($wheresparentt as $kiemtra) {
            $tree .= "," . $kiemtra->use_id;
        }
        $wherestostt = $this->user_model->fetch('use_id, use_group', 'use_group != 2 and parent_id IN (' . $tree . ')');
        foreach ($wherestostt as $kiemtrab) {
            $tree .= "," . $kiemtrab->use_id;
        }
        $wherestost = $this->user_model->fetch('use_id, use_group', 'use_group = 2 and parent_id IN (' . $tree . ')');
        foreach ($wherestost as $kiemtraa) {
            $tree .= "," . $kiemtraa->use_id;
        }
        $piro_idsession = $this->session->userdata("piro_id");

        /*if ($group_id <= 2 || $group_id == 11 || $group_id == StaffStoreUser) {
            $wheree = 'tbtt_showcart.shc_product = ' . $piro_idsession . ' and tbtt_showcart.af_id IN (' . $tree . ')';
        } else {
            $wheree = 'tbtt_showcart.shc_product = ' . $piro_idsession . ' and tbtt_order.order_saler IN (' . $tree . ') and tbtt_product.pro_user IN (' . $tree . ')';
        }*/

        if ($this->session->userdata('sessionGroup') == AffiliateStoreUser || ($this->session->userdata('sessionGroup') == StaffStoreUser && $user_group == AffiliateStoreUser)) {
            $tree1 = array();
            $GH = $user_id;
            // if ($this->session->userdata('sessionGroup') == StaffStoreUser) {
            //     $getp = $this->user_model->fetch('use_id,parent_id', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
            //     $tree1[] = $GH = (int)$getp[0]->parent_id;
            // }
            $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $user_id );
            if (!empty($sub_tructiep)) {
                foreach ($sub_tructiep as $key => $value) {
                    //Nếu là chi nhánh, lấy danh sách nhân viên

                    // if ($value->use_group == StaffStoreUser) {
                    //     //Lấy danh sách CN dưới nó cua NVGH
                    //     $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                    //     if (!empty($sub_cn)) {
                    //         foreach ($sub_cn as $k => $vlue) {
                    //             $tree1[] = $vlue->use_id;
                    //         }
                    //     }
                    // } else {
                    //     $tree1[] = $value->use_id;
                    // }
                    $tree1[] = $value->use_id;
                }
            }
            $id = implode(",", $tree1);
            $saler = '((tbtt_order.order_saler=' . $GH . ' AND pro_of_shop=0)';
            // if ($this->session->userdata('sessionGroup') == StaffStoreUser) {
            //     $saler = '((tbtt_order.order_saler=' . $GH . ' AND pro_of_shop=0) and tbtt_showcart.af_id IN (' . $tree . ')';
            // }
            if (!empty($id)) {
                $saler .= ' OR ((tbtt_order.order_saler IN(' . $id . ')) AND pro_of_shop > 0)';
            }
            $saler .= ')';
        } else {
            if ($this->session->userdata('sessionGroup') == BranchUser || ($this->session->userdata('sessionGroup') == StaffStoreUser && $user_group == BranchUser)) {
                $saler = 'tbtt_order.order_saler = ' . (int)$this->session->userdata('sessionUser');
            } else {
                $saler = 'tbtt_showcart.af_id IN (' . $tree . ')';
            }
        }
        if ($group_id <= 2 || $group_id == 11) {
            $get_u = $this->user_model->get('parent_id, use_group', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
            $id_p = $get_u->parent_id;//Lay sp do chinh cha tk đó tao ra
            $get_p = $this->user_model->get('parent_id, use_group, use_id', 'use_id = ' . $get_u->parent_id);
            if ($get_u->use_group == StaffUser || $get_p->use_group == StaffUser) {
                $get_p1 = $this->user_model->get('use_id,parent_id', 'use_id = ' . $get_p->parent_id);
                $id_p = $get_p1->parent_id . ',' . $get_p1->use_id; //Lay sp do chinh cha của cha tk đó tao ra
                if ($get_u->use_group == StaffUser) {
                    $id_p .= ',' . $get_p->use_id;
                }
            }
            $wheree = '(tbtt_showcart.af_id IN (' . $tree . ')';
            if ($group_id != AffiliateUser) {
                $wheree .= ' AND ( tbtt_order.order_saler IN (' . $id_p . ') AND tbtt_product.pro_user IN (' . $id_p . '))'; //tam khoa
            }
            $wheree .= ')';
        } else {
            $wheree = $saler;
        }
        $wheree .= ' and tbtt_showcart.shc_product = ' . $piro_idsession . ' and shc_status IN(01,02,03,98)';

        $select = "shc_quantity * pro_price - em_discount as doanhthu, em_discount,tbtt_showcart.af_id,af_dc_rate,af_dc_amt,pro_price_rate,pro_price_amt,pro_dir,order_token, shc_orderid,id,pro_name,pro_cost,pro_image,tbtt_product.pro_category,tbtt_product.pro_id,tbtt_user.*,tbtt_group.*,tbtt_showcart.*,tbtt_product.pro_id,tbtt_product.pro_cost, shc_quantity, pro_price";//SUM(shc_quantity) AS shc_quantity_sum , (SUM(shc_quantity)* pro_price) AS total_sum

        $totalRecord = Count($this->order_model->fetch_join6($select, "INNER", "tbtt_showcart", "tbtt_order.id = tbtt_showcart.shc_orderid", "LEFT", "tbtt_user", "tbtt_order.order_saler = tbtt_user.use_id", "LEFT", "tbtt_group", "tbtt_user.use_group = tbtt_group.gro_id", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $wheree, $sort, $by, "", ""));

        $limit = 20;
        $config['base_url'] = base_url() . 'account/detail_statistic_product/' . $this->uri->segment(3) . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        $data['stt'] = $start;
        #END Pagination
        $liststoredetail = $this->order_model->fetch_join6($select, "INNER", "tbtt_showcart", "tbtt_order.id = tbtt_showcart.shc_orderid", "LEFT", "tbtt_user", "tbtt_order.order_user = tbtt_user.use_id", "LEFT", "tbtt_group", "tbtt_user.use_group = tbtt_group.gro_id", "LEFT", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", $wheree, $sort, $by, $start, $limit);
        $total_sum_staff = 0;
        $demo = '';
        foreach ($liststoredetail as $key => $items) {
            if ($items->order_user == 0 || $items->order_user == '') {
                $demo = $this->user_model->fetch('*', 'use_id =' . $items->shc_saler);
            }
            $total_sum_staff += $items->pro_cost;
        }
        $data['shopname'] = $demo;
        $data['staffs'] = $liststoredetail;
        $data['total_sum_staff'] = $total_sum_staff;
        $data['menuSelected'] = 'statistic';
        $data['menuType'] = 'account';

        #Load view
        $this->load->view('home/account/statistic/detail_statistic_product', $data);
    }

    function detail_statistic_order_product()
    {
        $group_id = (int)$this->session->userdata('sessionGroup');
        $userId = (int)$this->session->userdata('sessionUser');
        if ($group_id == AffiliateStoreUser
            || $group_id == AffiliateUser
            || $group_id == StaffUser
            || $group_id == StaffStoreUser
            || $group_id == BranchUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        $select = '';
        $where = '';
        $sort = '';
        $by = 'DESC';
        $data = array();
        $user_sale = (int)$this->uri->segment('4');
        $pro_id = (int)$this->uri->segment('6');

        $list_orders = $this->order_model->getDetailOrdersBySalerAndProduct($user_sale, $pro_id);

        $data['menuSelected'] = 'statistic';
        $data['menuType'] = 'account';
        #Load view
        $this->load->view('home/account/statistic/detail_statistic_order_product', $data);
    }

    function treeunderD_old($listp,$listgroup)
    {
        $tree = array();
        $treegroup = array();
        $treestoreinPD = array();
        $treePD = $this->user_model->fetch("use_group, parent_id, use_id, use_username", "parent_id IN (" . $listp . ") and use_status = 1 and use_group IN(".$listgroup.",3)");
        if (!empty($treePD)) {
            foreach ($treePD as $key => $value) {
                //Nếu là chi nhánh, lấy danh sách nhân viên
                $treegroup[$value->parent_id][] = $value->use_id;
                if($value->use_group == 3){
                    $treestoreinPD[] = $value->use_id;
                }
                $tree[] = $value->use_id;
                if ($value->use_group == Partner2User) {
                    //Lấy danh sách D1, D2 dưới P
                    $sub_cn = $this->user_model->get_list_user("use_id, use_username, parent_id, use_group", 'use_group IN(' . Developer1User.','.Developer2User . ',3) AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_cn)) {
                        foreach ($sub_cn as $k => $vlue) {
                            $tree[] = $vlue->use_id;
                            if($vlue->use_group == 3){
                                $treestoreinPD[] = $vlue->use_id;
                            }else{
                                //$treegroup[$value->parent_id][$vlue->use_group][$vlue->parent_id][] = $vlue->use_id;
                            }
                            $treegroup[$value->parent_id][$vlue->parent_id][] = $vlue->use_id; //test
                            
                                //$treegroup[$value->parent_id][] = $vlue->use_id;
                            //echo 'tr: //'.$vlue->parent_id.','.$vlue->use_id.'<br/>';
                            if ($vlue->use_group == Developer2User) {
                                //Lấy danh sách CN dưới nó cua NVGH
                                $sub_cndev2 = $this->user_model->fetch('use_id, parent_id, use_username, use_group', 'use_group IN(3) AND use_status = 1 AND parent_id = ' . $vlue->use_id);
                                if (!empty($sub_cndev2)) {
                                    foreach ($sub_cndev2 as $k3 => $v) {
                                        $tree[] = $v->use_id;//echo 'b: '.$v->parent_id.'<br/>';
                                        //$treegroup[$value->parent_id][$vlue->parent_id][$v->parent_id][] = $v->use_id;
                                        //$treegroup[$value->parent_id][$vlue->use_id][$v->parent_id] = array();
                                        //$treegroup[$value->parent_id][$v->parent_id][] = $v->use_id;
                                        //var_dump($treegroup[$value->parent_id][$vlue->parent_id]);
                                        $treestoreinPD[] = $v->use_id;
                                    }
                                }
                            }
                            if ($vlue->use_group == Developer1User) {
                                //Lấy danh sách D2 dưới nó cua D1
                                $sub_cn1 = $this->user_model->get_list_user('use_id, parent_id, use_username, use_group', 'use_group IN(' . Developer2User . ',3) AND use_status = 1 AND parent_id = ' . $vlue->use_id);
                                if (!empty($sub_cn1)) {
                                    //if($sub_cn[$k])
                                    foreach ($sub_cn1 as $k1 => $v) {
                                        $tree[] = $v->use_id;//echo 'a: '.$v->use_id.'<br/>';
                                        $treegroup[$value->parent_id][$vlue->parent_id][$v->parent_id][] = $v->use_id;
                                        if($v->use_group == 3){
                                            $treestoreinPD[] = $v->use_id;
                                        }else{
                                            //$treegroup[$value->parent_id][$v->use_group][$vlue->parent_id][$v->parent_id][] = $v->use_id;
                                        }
                                        if ($v->use_group == Developer2User) {
                                            //Lấy danh sách D2 dưới nó cua D1
                                            $sub_cn2 = $this->user_model->get_list_user('use_id, parent_id, use_username, use_group', 'use_group IN(3) AND use_status = 1 AND parent_id = ' . $v->use_id);
                                            if (!empty($sub_cn2)) {
                                                foreach ($sub_cn2 as $k2 => $v1) {
                                                    $tree[] = $v1->use_id;
                                                    $treegroup[$value->parent_id][$vlue->parent_id][$v->parent_id][$v1->parent_id][] = $v1->use_id;
                                                    $treestoreinPD[] = $v1->use_id;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if ($value->use_group == Developer1User) {
                    //Lấy danh sách CN dưới nó cua NVGH
                    $sub_cn = $this->user_model->get_list_user('use_id, parent_id, use_username, use_group', 'use_group IN(' . Developer2User . ',3) AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_cn)) {
                        foreach ($sub_cn as $k => $v) {
                            $tree[] = $v->use_id;
                            $treegroup[$value->parent_id][$v->parent_id][] = $v->use_id;
                            if($v->use_group == 3){
                                $treestoreinPD[] = $v->use_id;
                            }
                            if ($v->use_group == Developer2User) {
                                //Lấy danh sách D2 dưới nó cua D1
                                $sub_cn2 = $this->user_model->get_list_user('use_id, parent_id, use_username, use_group', 'use_group IN(3) AND use_status = 1 AND parent_id = ' . $v->use_id);
                                if (!empty($sub_cn2)) {
                                    foreach ($sub_cn2 as $k1 => $v1) {
                                        $tree[] = $v1->use_id;
                                        $treegroup[$value->parent_id][$v->parent_id][$v1->parent_id][] = $v1->use_id;
                                        if($v1->use_group == 3){
                                            $treestoreinPD[] = $v1->use_id;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if ($value->use_group == Developer2User) {
                    //Lấy danh sách CN dưới nó cua NVGH
                    $sub_cn = $this->user_model->get_list_user('use_id, parent_id, use_username, use_group', 'use_group IN(3) AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_cn)) {
                        foreach ($sub_cn as $k => $v) {
                            $tree[] = $v->use_id;
                            $treegroup[$value->parent_id][$v->parent_id][] = $v->use_id;
                            $treestoreinPD[] = $v->use_id;
                        }
                    }
                }
            }
        }
        $tree = array('tree' => $tree, 'treegroup' => $treegroup, 'treestoreinPD' => $treestoreinPD, 'sqltreePD' => $treePD);
        return $tree;
    }

    function gettreeP1($session){
        $listP1 = array();
        $treeP1 = $this->user_model->fetch("use_group, parent_id, use_id, use_username", "parent_id IN(" . $session . ") and use_status = 1 and use_group IN(10,9)");
        if (!empty($treeP1)) {
            foreach ($treeP1 as $key => $value) {
                $listP1[] = $value->use_id;
            }
            $strP1 = implode(',',$listP1);
            if($strP1 != '' ){
                return $this->treeunderD($strP1,'6,7,8,9');
            }
        }
    }

    function treeunderD($listp,$listgroup)
    {
        $tree = array();
        $treegroup = array();
        $treepar = array();
        $treedev = array();
        $storedev = array();
        $treestoreinPD = array();
        $treePD = $this->user_model->fetch("use_group, parent_id, use_id, use_username", "parent_id IN (" . $listp . ") and use_status = 1 and use_group IN(".$listgroup.",3)");
        if (!empty($treePD)) {
            foreach ($treePD as $key => $value) {
                //Nếu là chi nhánh, lấy danh sách nhân viên
                if($value->use_group == 3){
                    $treestoreinPD[] = $value->use_id;
                }
                $treegroup[$value->parent_id][] = $value->use_id;
                $tree[] = $value->use_id;
                $arr = array();
                if ($value->use_group == Partner2User) {
                    $treepar[] = $value->use_id;
                    //Lấy danh sách D1, D2 dưới P
                    $sub_cn = $this->user_model->get_list_user("use_id, use_username, parent_id, use_group", 'use_group IN(' . Developer1User.','.Developer2User . ',3) AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_cn)) {
                        foreach ($sub_cn as $k => $vlue) {
                            $tree[] = $vlue->use_id;
                            if($vlue->use_group == 3){
                                $treestoreinPD[] = $vlue->use_id;
                                $storedev[$value->use_id][] = $vlue->use_id;
                            }
                            $arr[$value->use_id][] = $vlue->use_id;
                            $arrD = array();
                            if ($vlue->use_group == Developer2User) {
                                //Lấy danh sách CN dưới nó cua NVGH
                                $treedev[$value->use_id][] = $vlue->use_id;
                                $sub_cndev2 = $this->user_model->fetch('use_id, parent_id, use_username, use_group', 'use_group IN(3) AND use_status = 1 AND parent_id = ' . $vlue->use_id);
                                if (!empty($sub_cndev2)) {
                                    foreach ($sub_cndev2 as $k3 => $v) {
                                        $tree[] = $v->use_id;
                                        $treestoreinPD[] = $v->use_id;
                                        $arrD[$vlue->use_id][] = $v->use_id;
                                        $storedev[$vlue->use_id][] = $v->use_id;
                                    }
                                    $arr[$value->use_id][$k] = $arrD;
                                }
                            }
                            if ($vlue->use_group == Developer1User) {
                                //Lấy danh sách D2 dưới nó cua D1
                                $treedev[$value->use_id][] = $vlue->use_id;
                                $sub_cn1 = $this->user_model->get_list_user('use_id, parent_id, use_username, use_group', 'use_group IN(' . Developer2User . ',3) AND use_status = 1 AND parent_id = ' . $vlue->use_id);
                                if (!empty($sub_cn1)) {
                                    foreach ($sub_cn1 as $k1 => $v) {
                                        $tree[] = $v->use_id;
                                        if($v->use_group == 3){
                                            $treestoreinPD[] = $v->use_id;
                                            $storedev[$vlue->use_id][] = $v->use_id;
                                        }
                                        $arrD[$vlue->use_id][] = $v->use_id;
                                        if ($v->use_group == Developer2User) {
                                            //Lấy danh sách D2 dưới nó cua D1
                                            $treedev[$vlue->use_id][] = $v->use_id;
                                            $sub_cn2 = $this->user_model->get_list_user('use_id, parent_id, use_username, use_group', 'use_group IN(3) AND use_status = 1 AND parent_id = ' . $v->use_id);
                                            if (!empty($sub_cn2)) {
                                                //echo $k1.'/';
                                                $arrSD = array();
                                                foreach ($sub_cn2 as $k2 => $v1) {
                                                    $tree[] = $v1->use_id;$treestoreinPD[] = $v1->use_id;
                                                    $arrSD[$v->use_id][] = $v1->use_id;
                                                    $arrD[$vlue->use_id][$k1] = $arrSD;
                                                    $storedev[$v->use_id][] = $v1->use_id;
                                                }
                                            }
                                        }
                                    }
                                    $arr[$value->use_id][$k] = $arrD;
                                }
                            }
                        }
                        $treegroup[$value->parent_id][$key] = $arr;
                    }
                    else{
                        //$treegroup[$value->parent_id][] = $value->use_id;
                    }
                }
                if ($value->use_group == Developer1User) {
                    $treedev[$value->parent_id][] = $value->use_id;
                    //Lấy danh sách CN dưới nó cua NVGH
                    $sub_cn = $this->user_model->get_list_user('use_id, parent_id, use_username, use_group', 'use_group IN(' . Developer2User . ',3) AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_cn)) {
                        foreach ($sub_cn as $k => $v) {
                            $tree[] = $v->use_id;
                            $arr[$value->use_id][] = $v->use_id;
                            if($v->use_group == 3){
                                $treestoreinPD[] = $v->use_id;
                                $storedev[$value->use_id][] = $v->use_id;
                            }
                            if ($v->use_group == Developer2User) {
                                $treedev[$value->use_id][] = $v->use_id;
                                //Lấy danh sách D2 dưới nó cua D1
                                $sub_cn2 = $this->user_model->get_list_user('use_id, parent_id, use_username, use_group', 'use_group IN(3) AND use_status = 1 AND parent_id = ' . $v->use_id);
                                if (!empty($sub_cn2)) {
                                    $arrSD = array();
                                    foreach ($sub_cn2 as $k1 => $v1) {
                                        $tree[] = $v1->use_id;
                                        if($v1->use_group == 3){
                                            $treestoreinPD[] = $v1->use_id;
                                            $storedev[$v->use_id][] = $v1->use_id;
                                        }
                                        $arrSD[$v->use_id][] = $v1->use_id;
                                    }
                                    $arr[$value->use_id][$k1] = $arrSD;
                                }
                            }
                        }
                        $treegroup[$value->parent_id][$key] = $arr;
                    }else{
                        //$treegroup[$value->parent_id][] = $value->use_id;
                    }
                }
                if ($value->use_group == Developer2User) {
                    $treedev[$value->parent_id][] = $value->use_id;
                    //Lấy danh sách CN dưới nó cua NVGH
                    $sub_cn = $this->user_model->get_list_user('use_id, parent_id, use_username, use_group', 'use_group IN(3) AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_cn)) {
                        foreach ($sub_cn as $k => $v) {
                            $tree[] = $v->use_id;
                            //$treegroup[$value->parent_id][$v->parent_id][] = $v->use_id;
                            $treestoreinPD[] = $v->use_id;
                            $arr[$value->use_id][] = $v->use_id;
                            $storedev[$value->use_id][] = $v->use_id;
                        }
                        $treegroup[$value->parent_id][$key] = $arr;
                    }else{
                        //$treegroup[$value->parent_id][] = $value->use_id;
                    }
                }
            }
        }
        $tree = array('tree' => $tree, 'treegroup' => $treegroup, 'treeDev' => $treedev, 'treestoreinPD' => $treestoreinPD, 
            'storedev' => $storedev, 'treePar' => $treepar, 'sqltreePD' => $treePD);
        return $tree;
    }

    function getmoneyfromstore($sql,$tree)
    {
        $total_sum = 0;
        $money = array();
        if(!is_array($tree)){
            $devofP = $tree;
        }
        foreach($sql as $key => $items)
        {
            if(is_array($tree) && count($tree[$items->use_id]) > 0){
                $devofP = implode(',',$tree[$items->use_id]);
            }
            if($devofP != ''){
                if(count($tree[$items->use_id]) > 0){
                    $shc_saler = $this->treebranch($devofP);
                    $strid = implode(',', $shc_saler);
                    if($strid != ''){
                        $devofP .= ','.$strid;
                    }
                }
                $wheredevofP = 'use_status = 1 and use_group IN(3,14) and (parent_id IN (' . $devofP . ') OR shc_saler IN(' . $devofP . ')) AND shc_status IN(98)';
                if ($dateto != '' && $datefrom != '') {
                    $wheredevofP .= " AND shc_change_status_date >= " . (float)$startdate . " AND shc_change_status_date <= " . (float)$enddate;
                } else {
                    $wheredevofP .= " AND shc_change_status_date >=" . (float)$enddatenull;
                }
                $select = "shc_saler,SUM(tbtt_showcart.shc_total) As showcarttotal,";
                $getdoanhthuD = $this->user_model->fetch_join1($select, "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.shc_saler",$wheredevofP,'','','','','','parent_id');//tbtt_shop.sho_user, 
                $shc = 0;
                foreach($getdoanhthuD as $key => $value)
                {
                   $shc += $value->showcarttotal;
                }
                $money[$items->use_id][] = $shc;
                if($items->use_id != ''){
                    $total_sum += $shc;
                }
                else{
                    $total_sum = $shc;
                }
                //echo $wheredevofP.'<br/>';
            }else{
                $total_sum += $items->showcarttotal;
            }
        }
        $arr = array('money'=>$money, 'total_sum'=>$total_sum);
        return $arr;
    }

    function getmoneyDevAndPar($parentId,$ugroup,$ugroupchild,$segment,$urlsegment)
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == Partner2User || $group_id == Partner1User || $group_id == Developer1User || $group_id == CoreMemberUser || $group_id == CoreAdminUser) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $dateto = $_REQUEST['datefromshop'];
        $datefrom = $_REQUEST['datetoshop'];
        $this->session->set_userdata('datetoshop', $dateto);
        $this->session->set_userdata('datefromshop', $datefrom);
        $data['savedateto'] = $dateto;
        $data['savedatefrom'] = $datefrom;
        $monthsto = date('m', strtotime($dateto));
        $dayto = date('d', strtotime($dateto));
        $yearto = date('y', strtotime($dateto));

        $monthsfrom = date('m', strtotime($datefrom));
        $dayfrom = date('d', strtotime($datefrom));
        $yearfrom = date('y', strtotime($datefrom));
        $startdate = mktime(0, 0, 0, $monthsto, $dayto, $yearto);
        $enddate = mktime(23, 59, 59, $monthsfrom, $dayfrom, $yearfrom);
        $enddatenull = mktime(0, 0, 0, 01, 01, 2006);
        
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page','dev');
        $getVar = $this->uri->uri_to_assoc($segment, $action);
        
        $data['menuSelected'] = 'statistic';
        $data['menuType'] = 'account';
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "use_fullname";
                    break;
                case 'shopname':
                    $pageUrl .= '/sort/shopname';
                    $sort = "sho_name";
                    break;
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        $data['sortUrl'] = base_url() . 'account/'. $urlsegment . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        $treeD = $this->user_model->fetch("use_group, use_id, use_username", $parentId . " and use_status = 1 and use_group IN(".$ugroup.",3)");
        $listD = '';
        $substore = array();
        if (!empty($treeD)) {
            $limit = 20;
            foreach ($treeD as $key => $item) {
                $listD .= ','.$item->use_id;
                $substore[] = $item->use_id;
                $listD = ltrim($listD,',');
            }
            if ($listD != '') {
                $tree = $this->treeunderD($listD,$ugroupchild);
                if ($this->uri->segment(2) == 'statisticlistDeveloper') {
                }
            }
            $where = 'use_status = 1 and use_group = 3 and (parent_id IN (' . $listD . ') OR shc_saler IN (' . $listD . ')) AND shc_status IN(98)';
            if ($dateto != '' && $datefrom != '') {
                $where .= " AND shc_change_status_date >= " . (float)$startdate . " AND shc_change_status_date <= " . (float)$enddate;
            } else {
                $where .= " AND shc_change_status_date >=" . (float)$enddatenull;
            }
            $select = "parent_id as Parentid, use_group,use_id,use_username, use_fullname,use_email,use_mobile,tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id,tbtt_showcart.*,SUM(tbtt_showcart.shc_total) As showcarttotal,";
            $select .= "(SELECT parent_id FROM tbtt_user WHERE Parentid = use_id) as parent1_id,"
                   . "(SELECT parent_id FROM tbtt_user WHERE parent1_id = use_id) as parent2_id,"
                   . "(SELECT use_group FROM tbtt_user WHERE parent2_id = use_id) as parent_group";
            $infoUser = $this->user_model->fetch_join1($select, "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.shc_saler",$where,'','','','','','use_id');//tbtt_shop.sho_user, 
            $total_sumdev = 0;
            $act = array('detail', 'search', 'keyword', 'sort', 'by', 'page','shc','prn');
            $getPRN = $this->uri->uri_to_assoc(3, $act);
            $doanhthu = $dev = array();
            foreach ($infoUser as $key => $row){
                $shc_saler = $this->treebranch($row->use_id);
                $id = $row->use_id;
                $strid = implode(',', $shc_saler);
                if($strid != ''){
                    $id .= ','.$strid;
                }
                if($getPRN['prn'] && $getPRN['prn'] != ''){
                    if(in_array($row->use_id,$tree['treegroup'][$getPRN['prn']])){
                        if(in_array($row->use_id,$tree['treestoreinPD'])){
                            $dev[] = $row->use_id;
                        }
                    }
                }else{
                    $use_ss = $this->session->userdata('sessionUser');
                    if ($this->uri->segment(2) == 'statisticlistDeveloper') {
                        if(($group_id == CoreMemberUser || $group_id == CoreAdminUser || $group_id == Partner1User) && $row->parent_group == 9){
                            $dev[] = $row->parent_id;
                        }
                    }else{
                        if($row->parent_id != $use_ss){
                            $dev[] = $row->parent_id;
                        }
                    }
                    if($group_id != Partner1User && $group_id != CoreMemberUser && $group_id != CoreAdminUser){
                        if($row->parent_id != $use_ss){
                            $dev[] = $row->parent_id;
                        }
                    }
                }
            }
            $ids = $idstree = array();
            if($group_id == CoreMemberUser || $group_id == CoreAdminUser){
                $treegroup = $tree['treestoreinPD'];
            }else{
            }
            
            foreach($tree['treegroup'] as $keys => $arridp){
                $arrgh = array();
                foreach($arridp as $key => $arrid){
                    if(is_array($arrid)){
                        //get store cap 1
                        //$idstree[] = $arrid;   
                        foreach($arrid as $key1 => $child1){
                            $ids[$keys][] = $key1;
                            foreach($child1 as $key11 => $child11){
                                if(is_array($child11)){
                                    foreach($child11 as $key2 => $child2){
                                        $ids[$keys][] = $key2;
                                        foreach($child2 as $key22 => $child22){
                                            if(is_array($child22)){
                                                foreach($child22 as $key3 => $child3){
                                                    $ids[$keys][] = $key3;
                                                    foreach($child3 as $key33 => $child33){
                                                        $ids[$keys][] = $child33;
                                                    }
                                                }
                                            }else{
                                                $ids[$keys][] = $child22;
                                            }
                                        }
                                    }
                                }else{
                                    $ids[$keys][] = $child11;
                                }
                            }
                        }
                    }else{
                        $ids[$keys][] = $arrid;
                        $cn = $this->treebranch($arrid);
                        foreach($cn as $keybr => $idbr){
                            $ids[$keys][] = $idbr;
                        }
                    }
                } 
            }
            $treegroup = $ids;
            $dev = implode(',',$dev);
            //var_dump($tree);
            //echo 'dev: '.$dev;
                
            if($dev != ''){
                $infoUser = $this->user_model->fetch('use_id,use_fullname,use_username,use_email,use_mobile, parent_id as pid,(SELECT use_username FROM tbtt_user WHERE use_id = pid) as parent_username', 'use_id IN('.$dev.')',$sort,$by,$start,$limit,'','');
                $moneyofPD = $this->getmoneyfromstore($infoUser,$treegroup);//
                $data['arrshc'] = $moneyofPD["money"];
                $totalShowcart = $this->user_model->fetch('*', 'use_id IN('.$dev.')','','','','','','');//$this->user_model->fetch_join1($select, "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.shc_saler",$where,'','','','','','parent_id');//tbtt_shop.sho_user, 
                $total_sum = $this->getmoneyfromstore($totalShowcart,$treegroup);
                $data['totalShowcart'] = $total_sum["total_sum"];
                foreach ($infoUser as $key => $row){
                    if($this->uri->segment(2) != 'statisticlistDeveloper'){
                        
                    }else{
                        $id = implode(',',$treegroup[$row->use_id]);
                    }
                    if($id != ''){
                        $where_ = '(shc_saler IN(' . $id . ') OR `parent_id` IN(' . $id . ')) AND shc_status IN(98)';
                        if ($dateto != '' && $datefrom != '') {
                            $where_ .= " AND shc_change_status_date >= " . (float)$startdate . " AND shc_change_status_date <= " . (float)$enddate;
                        } else {
                            $where_ .= " AND shc_change_status_date >=" . (float)$enddatenull;
                        }
                        $select_ = "parent_id, SUM(tbtt_showcart.shc_total) As showcarttotal";
                        $getDTD = $this->user_model->fetch_join1($select_, "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.shc_saler",$where_,'','','','','','parent_id');//tbtt_shop.sho_user, 
                        foreach ($getDTD as $keyitem => $item){
                            $doanhthu[$row->use_id][] = $item->showcarttotal;
                            $total_sumdev += $item->showcarttotal;
                        }
                    }
                }
            }
            //var_dump($doanhthu);
            $data['money'] = $doanhthu;
            $data['total_sum'] = $total_sumdev;
            $data['staffs'] = $infoUser;
            $data['stt'] = $start + 1;
            $data['treestoreinPD'] = $tree['treestoreinPD'];
            $data['group_id'] = $group_id;

            #BEGIN: Pagination
            $this->load->library('pagination');
            #Count total record
            $totalRecord = count($totalShowcart);
            $config['base_url'] = base_url() . 'account/'. $urlsegment . $pageUrl . '/page/';
            $config['total_rows'] = $totalRecord;
            $config['per_page'] = $limit;
            $config['num_links'] = 1;
            $config['uri_segment'] = 6;
            $config['cur_page'] = $start;
            $this->pagination->initialize($config);
            $data['linkPage'] = $this->pagination->create_links();
            #END Pagination
        }
            $data['detailDorS'] = 'statisticlistDeveloper/dev';
        if ($this->uri->segment(2) == 'statisticlistDeveloper') {
            $this->load->view('home/account/statistic/statisticlistDeveloper', $data);
        } else {
            $data['detailDorS'] = 'statisticlistDeveloper/dev';
            if($getPRN['prn'] && $getPRN['prn'] != ''){
                $shc_saler = $this->treebranch($getPRN['prn']);
                $strid = implode(',', $shc_saler);
                if($strid != ''){
                    $dev .= ','.$strid;
                }
                $this->statisticlistshop($getPRN['prn']);
                //$this->load->view('home/account/statistic/statisticlistdetailPartner', $data);
            }else{
                $this->load->view('home/account/statistic/statisticlistPartner', $data);
            }
        }
    }

    function statisticlistPartnerAndDeveloper()
    {
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page','shc','prn');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        $group_id = (int)$this->session->userdata('sessionGroup');
        $userId = $ss = (int)$this->session->userdata('sessionUser');
        $segment = 3;
        $infoss = $this->user_model->get("use_group, use_id, use_username", "use_id = " . $userId);
        switch($infoss->use_group){
            case CoreAdminUser: 
            case CoreMemberUser: 
                $ugroup = Partner1User.','.CoreMemberUser; 
                $ugroupchild = Partner1User.','.Partner2User.','.Developer1User.','.Developer2User;
                break;
            case Partner1User: 
                $ugroup = Partner2User; 
                $ugroupchild = Partner2User.','.Developer1User.','.Developer2User;
                break;
            case Partner2User: 
                $ugroup = $ugroupchild = Developer1User.','.Developer2User;
                break;
            case Developer1User: $ugroup = $ugroupchild = Developer2User; break;
            default: break;
        }
        if ($this->uri->segment(2) == 'statisticlistDeveloper') {
            $ugroup = $ugroupchild;
            $urlsegment = 'statisticlistDeveloper';
            if($getVar['dev'] && $getVar['dev'] != ''){
                $userId = $getVar['dev'];
                $segment = 5;
                $urlsegment .= '/dev/'.$userId;
                $parentId = "parent_id = " . $userId;
            }else{
                if($group_id == CoreMemberUser || $group_id == CoreAdminUser){
                    $treeP1 = $this->user_model->fetch("use_group, parent_id, use_id, use_username", "parent_id IN(" . $userId . ") and use_status = 1 and use_group IN(6,7,8,9,10)");
                    if (!empty($treeP1)) {
                        foreach ($treeP1 as $key => $value) {
                            $listP1[] = $value->use_id;
                            if($value->use_group == 10){
                                $treeCore = $this->user_model->fetch("use_group, parent_id, use_id, use_username", "parent_id = " . (int)$value->use_id . " and use_status = 1 and use_group IN(6,7,8,9)");
                                if (!empty($treeCore)) {
                                    foreach ($treeCore as $keyi => $vlue) {
                                        $listP1[] = $vlue->use_id;
                                    }
                                }
                            }
                        }
                        $userId = implode(',',$listP1);
                    }
                }
                if($group_id == CoreAdminUser){
                    $tree = $this->gettreeP1($userId);
                }else{
                    $tree = $this->treeunderD($userId,$ugroupchild);
                }
                $getarr = $tree['tree'];
                $str = implode(',',$getarr);
                if($str != ''){
                    $userId = $str;
                    $parentId = "parent_id IN(" . $str . ")";
                }
            }
            switch($infoss->use_group){
                case Partner2User: 
                    $parentId = "parent_id = " . $ss;
                    break;
                case Developer1User: $ugroup = $ugroupchild = Developer2User; 
                    $parentId = "parent_id = " . $ss;
                    break;
                default: break;
            }
        } else {
            if($getVar['prn'] && $getVar['prn'] != ''){//if($getVar['dev'] && $getVar['dev'] != ''){
                //$userId = $getVar['prn'];//$getVar['dev'];
                $segment = 5;
                $urlsegment .= '/dev/'.$userId;
                $parentId = "parent_id IN(" . $userId . ',' . $getVar['prn'] . ")";
                $ugroup .= ',3';
            }
            $parentId = "parent_id = " . $userId;
            $urlsegment = 'statisticlistPartner';
        }
        $this->getmoneyDevAndPar($parentId,$ugroup,$ugroupchild,$segment,$urlsegment);
    }

    function getlistDev($userId,$whereAff = null,$sort = '',$by = '',$start = '',$limit = '',$tructhuoc = false)
    {
        $arrcountAff = $listD = array();
        $tree = $this->treeunderD($userId,'9,8,7,6');
        $treePD = $tree["treeDev"];
        $arrdev = array();
        foreach($treePD as $key=>$value){
            foreach($value as $keyi=>$vlue){
                $arrdev[] = $vlue;
            }
        }
        $strdev = implode(',',$arrdev);
        $where = 'and use_id IN('.$strdev.')';
        if($tructhuoc == true){
            $where = 'and use_group IN(6,7) and parent_id = '.$userId;
        }
        if($strdev != ''){
            $select = 'parent_id as puser,use_group,use_id,use_username,use_fullname,use_email,use_mobile,(SELECT use_username FROM tbtt_user WHERE use_id = puser) as parent_username';
            $listD = $this->user_model->fetch($select, "use_status = 1 ".$where,$sort,$by,$start,$limit);
            $listallD = $this->user_model->fetch($select, "use_status = 1 ".$where);
            $countlistD = count($listD);
        }
        if($whereAff != null){
        }else{
            $whereAff = 'parent_id IN('.$strdev.')';
        }
        $countAff = $this->user_model->fetch('count(use_id) as numberAff,parent_id', "use_status = 1 and use_group=2 and ".$whereAff." group by parent_id");
        foreach ($countAff as $key1 => $value1){
            $arrcountAff[$value1->parent_id] = $value1->numberAff;
        }
        $return = array('arrcountAff' => $arrcountAff,'staffs' => $listD,'allstaffs' => $listallD,'countDev' => $countlistD,'storedev' => $tree['storedev']);
        return $return;
    }

    function listDeveloper($parId = null,$ugroup,$ugroupchild,$segment,$urlsegment)
    {
        $group_id = $this->session->userdata('sessionGroup');
        $userId = (int)$this->session->userdata('sessionUser');
        if ($group_id == Partner2User || $group_id == Partner1User || $group_id == Developer1User || $group_id == CoreMemberUser || $group_id == CoreAdminUser) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page','prn');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        
        
        $urlsegment = $this->uri->segment(2);
        $txt = '';
        if($urlsegment == 'listDeveloper'){
            $text = 'trực thuộc';
            $txt = 'trực thuộc ';
        }else{
            $text = 'toàn hệ thống';
            $txt = 'toàn cây ';
        }
        if($getVar['prn'] && $getVar['prn'] > 0){
            $p_id = (int)$getVar['prn'];
            $infoPartner = $this->user_model->get("use_username", "use_id = ".(int)$getVar['prn']);
            $text = $txt.' của <span style="color: #f00">'.$infoPartner->use_username.'</span>';
        }
            
        $data['text'] = $text;
        $data['menuSelected'] = 'statistic';
        $data['menuType'] = 'account';
        
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "use_fullname";
                    break;
                case 'shopname':
                    $pageUrl .= '/sort/shopname';
                    $sort = "sho_name";
                    break;
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        $data['sortUrl'] = base_url() . 'account/'. $urlsegment . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        if($getVar['prn'] && $getVar['prn'] != ''){
            $userId = (int)$getVar['prn'];
        }
        $tructhuoc = false;
        if($urlsegment == 'listDeveloper'){
            $tructhuoc = true;
        }
        $limit = 20;
        $infoDev = $this->getlistDev($userId,null,$sort,$by,$start,$limit,$tructhuoc);
        $data['number'] = $infoDev['countDev'];
        $data['staffs'] = $infoDev['staffs'];
        $data['countAff'] = $infoDev['arrcountAff'];
        $data['storedev'] = $infoDev["storedev"];
        $data['stt'] = $start + 1;
        $data['treestoreinPD'] = $tree['treestoreinPD'];
        $data['group_id'] = $group_id;

        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $totalRecord = count($infoDev['allstaffs']);
        $config['base_url'] = base_url() . 'account/'. $urlsegment . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 6;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        
        $this->load->view('home/account/statistic/listDeveloper', $data);
    }

    function listPartner($parentId,$ugroup,$ugroupchild,$segment,$urlsegment)
    {
        $group_id = $this->session->userdata('sessionGroup');
        $userId = (int)$this->session->userdata('sessionUser');
        if ($group_id == Partner2User || $group_id == Partner1User || $group_id == Developer1User || $group_id == CoreMemberUser || $group_id == CoreAdminUser) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page','dev');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        
        $data['menuSelected'] = 'statistic';
        $data['menuType'] = 'account';
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "use_fullname";
                    break;
                case 'shopname':
                    $pageUrl .= '/sort/shopname';
                    $sort = "sho_name";
                    break;
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        $data['sortUrl'] = base_url() . 'account/listPartner' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        $limit = 20;
        $select = 'parent_id as puser,use_group,use_id,use_username,use_fullname,use_email,use_mobile,(SELECT use_username FROM tbtt_user WHERE use_id = puser) as parent_username';
        $listP = $this->user_model->fetch($select, "use_status = 1 and parent_id = ".(int)$userId." and use_group = 8",$sort,$by,$start,$limit);
        $data['staffs'] = $listP;
        $tree = $this->treeunderD($userId,'8,7,6');
        //var_dump($tree["storedev"]);
        $arrdev = array();
        foreach($treePD as $key=>$value){
            foreach($value as $keyi=>$vlue){
                $arrdev[] = $vlue;
            }
        }
        $strdev = implode(',',$arrdev);
        $arr = array();
        $countAff = array();
        foreach ($listP as $key1 => $value){
            $whereAff = 'parent_id = '.(int)$value->use_id;
            $infoDev = $this->getlistDev($value->use_id,$value->use_id);
            $arr[$value->use_id] = $infoDev['countDev'];
            $countAff[$value->use_id] = $infoDev['arrcountAff'][$value->use_id];
        }
        $data['countDevall'] = $arr;
        $data['countAff'] = $countAff;
        $data['number'] = $totalRecord = count($this->user_model->fetch($select, "use_status = 1 and parent_id = ".(int)$userId." and use_group = 8"));
        $data['treedev'] = $tree["treeDev"];
        $data['storedev'] = $tree["storedev"];
        $data['stt'] = $start + 1;
        $data['treestoreinPD'] = $tree['treestoreinPD'];
        $data['group_id'] = $group_id;

        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $config['base_url'] = base_url() . 'account/listPartner' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 6;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        $this->load->view('home/account/statistic/listPartner', $data);
    }

    function listshop($p = null)
    {
        $segment2 = $this->uri->segment(2);

        $data['menuSelected'] = 'statistic';
        $data['menuType'] = 'account';
        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page','shc','prn');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        $session_id = $this->session->userdata('sessionUser');
        $session_grt = $this->session->userdata('sessionGroup');
        if($getVar['shc'] > 0){
            $session_id = (int)$getVar['shc'];
        }
        $text = 'trực thuộc';
        if($getVar['shc'] > 0){
            $infoPartner = $this->user_model->get("use_username", "use_id = ".(int)$getVar['shc']);
            $text = 'của <span style="color: #f00">'.$infoPartner->use_username.'</span>';
        }
        $uri_segment = 4;
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "use_fullname";
                    break;
                case 'shopname':
                    $pageUrl .= '/sort/shopname';
                    $sort = "sho_name";
                    break;
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        
        $uri_segment = 4;
        if($this->uri->segment(3) == 'shc'){
            $segment2 = 'shc/'.$this->uri->segment(4);
            $uri_segment = 6;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/listshop/' . $segment2 . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        if($getVar['shc'] && $getVar['shc'] > 0){
            $where = 'use_status = 1 and use_group = 3 and parent_id = ' . (int)$getVar['shc'];
        }
        
        $limit = 10;
        
        $staffs = $this->user_model->fetch_join1("use_id,use_group,use_username, use_fullname,use_email,use_mobile,tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id,", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.shc_saler", $where, $sort, $by, $start, $limit);
        
        $data['staffs'] = $staffs;
        $LArray = array();
        //get all store => get bran
        if (!empty($staffs)) {
            foreach ($staffs as $key => $row) {
                $countAff = $this->user_model->fetch('count(use_id) as numberAff,parent_id', "use_status = 1 and use_group = 2 and parent_id = ".(int)$row->use_id." group by parent_id");
                foreach ($countAff as $key1 => $value1){
                    $arrcountAff[$value1->parent_id] = $value1->numberAff;
                }
                
                $info = $this->get_my_shop($row->use_id);
                $LArray[] = array(
                    'info_parent' => $info['info_parent'],
                    'pshop' => $info['pshop'],
                    'link_gh' => $info['link_gh']
                );
            }
        }
        $data['countAff'] = $arrcountAff;
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $sumstaffs = $this->user_model->fetch_join1("use_id,use_group,use_username, use_fullname,use_email,use_mobile,tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id,", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.shc_saler", $where, $sort, $by, $start, '');
        $totalRecord = count($sumstaffs);
        $config['base_url'] = base_url() . 'account/listshop/' . $segment2 . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limit;
        $config['num_links'] = 5;
        $config['uri_segment'] = $uri_segment;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $data['stt'] = $start + 1;
        $data['linkGH'] = $LArray;
        $data['text'] = $text;
        $data['number'] = $totalRecord;
        #Load view
        $this->load->view('home/account/statistic/listshop', $data);
    }
    
    function listaff($p = null)
    {
        $parent_id = $this->uri->segment(3);

        $data['menuSelected'] = 'statistic';
        $data['menuType'] = 'account';
        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page','shc','prn');
        $getVar = $this->uri->uri_to_assoc(4, $action);
        $session_id = $this->session->userdata('sessionUser');
        $session_grt = $this->session->userdata('sessionGroup');
        if($getVar['shc'] > 0){
            $session_id = (int)$getVar['shc'];
        }
        $text = 'trực thuộc';
        if($parent_id > 0){
            $infoPartner = $this->user_model->get("use_username", "use_id = ".(int)$parent_id);
                $text = 'của <span style="color: #f00">'.$infoPartner->use_username.'</span>';
        }
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "use_fullname";
                    break;
                case 'shopname':
                    $pageUrl .= '/sort/shopname';
                    $sort = "sho_name";
                    break;
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        
        $uri_segment = 4;
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/listaff/' . $parent_id . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        $where = 'use_status = 1 and use_group = 2 and parent_id = ' . (int)$parent_id;
        $limit = 20;
        
        $staffs = $this->user_model->fetch("use_id,use_group,use_username, use_fullname,use_email,use_mobile,parent_id,", $where, $sort, $by, $start, $limit);
        
        $data['staffs'] = $staffs;
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $sumstaffs = $this->user_model->fetch("use_id,use_group,use_username, use_fullname,use_email,use_mobile,parent_id,", $where, $sort, $by, $start, '');
        $totalRecord = count($sumstaffs);
        $config['base_url'] = base_url() . 'account/listaff/' . $parent_id . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limit;
        $config['num_links'] = 3;
        $config['uri_segment'] = $uri_segment;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $data['stt'] = $start + 1;
        $data['text'] = $text;
        $data['number'] = $totalRecord;
        #Load view
        $this->load->view('home/account/statistic/listAffiliate', $data);
    }

    // tintuc
    /**
     *
     */
    function del_image()
    {
        $id = (int)$this->input->post('id');
        $key = (int)$this->input->post('key');	
        $this->load->model('content_model');
        $picture_name = $this->content_model->get('*', 'not_id = ' . $id);
        $path = '/public_html/media/images/content';

        $this->load->library('ftp');
        $config['hostname'] = IP_CLOUDSERVER;
        $config['username'] = USER_CLOUDSERVER;
        $config['password'] = PASS_CLOUDSERVER;
        $config['port']     = PORT_CLOUDSERVER;                
        $config['debug']    = FALSE;
        $this->ftp->connect($config);
		
		switch($key){
			case 0: 
				if(
				$this->content_model->update(array('not_image' => null), array('not_id' => $id)) &&
				$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/'. $picture_name->not_image) &&
				$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image . '/thumbnail_1_' . $picture_name->not_image) &&
				$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image . '/thumbnail_2_' . $picture_name->not_image) &&
				$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image . '/thumbnail_3_' . $picture_name->not_image)){          
					echo '0';
				}
				break;
			case 1: 
				if( $this->content_model->update(array('not_image1' => null), array('not_id' => $id)) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/'. $picture_name->not_image1) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/1x1_'. $picture_name->not_image1)){
					echo '1'; 
				}
				break;
			case 2:
				if( $this->content_model->update(array('not_image2' => null), array('not_id' => $id)) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/'. $picture_name->not_image2) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/1x1_'. $picture_name->not_image2)){
					echo '2';
				}
				break;
			case 3:
				if( $this->content_model->update(array('not_image3' => null), array('not_id' => $id)) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/'. $picture_name->not_image3) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/1x1_'. $picture_name->not_image3)){
					echo '3';
				}
				break;
			case 4:
				if( $this->content_model->update(array('not_image4' => null), array('not_id' => $id)) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/'. $picture_name->not_image4) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/1x1_'. $picture_name->not_image4)){
					echo '4';
				}
				break;
			case 5:
				if( $this->content_model->update(array('not_image5' => null), array('not_id' => $id)) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/'. $picture_name->not_image5) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/1x1_'. $picture_name->not_image5)){
					echo '5';
				}
				break;
			case 6:
				if( $this->content_model->update(array('not_image6' => null), array('not_id' => $id)) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/'. $picture_name->not_image6) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/1x1_'. $picture_name->not_image6)){
					echo '6';
				}
				break;
			case 7:
				if( $this->content_model->update(array('not_image7' => null), array('not_id' => $id)) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/'. $picture_name->not_image7) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/1x1_'. $picture_name->not_image7)){
					echo '7';
				}
				break;
			case 8:
				if( $this->content_model->update(array('not_image8' => null), array('not_id' => $id)) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/'. $picture_name->not_image8) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/1x1_'. $picture_name->not_image8)){
					echo '8';
				}
				break;
			case 9:
				if( $this->content_model->update(array('not_image9' => null), array('not_id' => $id)) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/'. $picture_name->not_image9) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/1x1_'. $picture_name->not_image9)){
					echo '9';
				}
				break;
			case 10:
				if( $this->content_model->update(array('not_image10' => null), array('not_id' => $id)) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/'. $picture_name->not_image10) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/1x1_'. $picture_name->not_image10)){
					echo '10';
				}
				break;
			case 11:
				if( $this->content_model->update(array('not_image11' => null), array('not_id' => $id)) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/'. $picture_name->not_image11) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/1x1_'. $picture_name->not_image11)){
					echo '11';
				}
				break;	
			case 12:
				if( $this->content_model->update(array('not_image12' => null), array('not_id' => $id)) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/'. $picture_name->not_image12) &&
					$this->ftp->delete_file($path .'/'. $picture_name->not_dir_image .'/1x1_'. $picture_name->not_image12)){
					echo '12';
				}
				break;	
			default :
				echo '13';
				break;
		}

        $this->ftp->close();
        exit();
    }

    function del_tin()
    {
        $id = $this->input->post('id');
        $this->load->model('content_model');
        $this->load->helper('file');
        $not_name = $this->content_model->get('*', 'not_id =' . (int)$id);
        $filepath = 'media/images/tintuc/' . $not_name->not_dir_image . '/';
        if (file_exists($filepath . $not_name->not_image)) {
            @unlink($filepath . $not_name->not_image);
            @unlink($filepath . 'thumbnail_1_' . $not_name->not_image);
            @unlink($filepath . 'thumbnail_2_' . $not_name->not_image);
            @unlink($filepath . 'thumbnail_3_' . $not_name->not_image);
            echo '1';
        } else {
            echo '0';
        }
        if (file_exists($filepath . $not_name->not_image1)) {
            @unlink($filepath . $not_name->not_image1);
            @unlink($filepath . '1x1_' . $not_name->not_image1);
            echo '2';
        } else {
            echo '0';
        }
        if (file_exists($filepath . $not_name->not_image2)) {
            @unlink($filepath . $not_name->not_image2);
            @unlink($filepath . '1x1_' . $not_name->not_image2);
            echo '3';
        } else {
            echo '0';
        }
        if (file_exists($filepath . $not_name->not_image3)) {
            @unlink($filepath . $not_name->not_image3);
	    @unlink($filepath . 'slide_' . $not_name->not_image3);
            @unlink($filepath . '1x1_' . $not_name->not_image3);
            echo '4';
        } else {
            echo '0';
        }
        if (file_exists($filepath . $not_name->not_image4)) {
            @unlink($filepath . $not_name->not_image4);
            @unlink($filepath . '1x1_' . $not_name->not_image4);
            echo '5';
        } else {
            echo '0';
        }
        if (file_exists($filepath . $not_name->not_image5)) {
            @unlink($filepath . $not_name->not_image5);
            @unlink($filepath . '1x1_' . $not_name->not_image5);
            echo '6';
        } else {
            echo '0';
        }
        if (file_exists($filepath . $not_name->not_image6)) {
            @unlink($filepath . $not_name->not_image6);
            @unlink($filepath . '1x1_' . $not_name->not_image6);
            echo '7';
        } else {
            echo '0';
        }
        if (file_exists($filepath . $not_name->not_image7)) {
            @unlink($filepath . $not_name->not_image7);
            @unlink($filepath . '1x1_' . $not_name->not_image7);
            echo '8';
        } else {
            echo '0';
        }
        if (file_exists($filepath . $not_name->not_image8)) {
            @unlink($filepath . $not_name->not_image8);
            @unlink($filepath . '1x1_' . $not_name->not_image8);
            echo '9';
        } else {
            echo '0';
        }
	    if (file_exists($filepath . $not_name->not_image9)) {
            @unlink($filepath . $not_name->not_image9);
            @unlink($filepath . '1x1_' . $not_name->not_image9);
            echo '10';
        } else {
            echo '0';
        }
	    if (file_exists($filepath . $not_name->not_image10)) {
            @unlink($filepath . $not_name->not_image10);
            @unlink($filepath . '1x1_' . $not_name->not_image10);
            echo '11';
        } else {
            echo '0';
        }
	    if (file_exists($filepath . $not_name->not_image11)) {
            @unlink($filepath . $not_name->not_image11);
            @unlink($filepath . '1x1_' . $not_name->not_image11);
            echo '12';
        } else {
            echo '0';
        }
	    if (file_exists($filepath . $not_name->not_image12)) {
            @unlink($filepath . $not_name->not_image12);
            @unlink($filepath . '1x1_' . $not_name->not_image12);
            echo '13';
        } else {
            echo '0';
        }
        $this->content_model->delete(array('not_id' => (int)$id));
    }

    function newsAdd()
    {
        $group_id = $this->session->userdata('sessionGroup');
        $iUserId = (int)$this->session->userdata('sessionUser');
        $iShopId = (int)$this->session->userdata('sessionUser');    	
	if ($group_id == AffiliateStoreUser || $group_id == BranchUser || $group_id == StaffStoreUser) {
			
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        if($group_id == StaffStoreUser) {
            $oUser = $this->user_model->get("*","use_id = " . $iUserId  . ' AND use_status = 1');
            $iUserId = $oUser->parent_id;
            $iShopId = $oUser->parent_id;
            
            if(!empty($oUser)) {
                $oShop = $this->user_model->get("*","use_id = " . $oUser->parent_id  . ' AND use_status = 1');
                if(!empty($oShop) && $oShop->use_group == 3) {
                    // Tự động active khi nhân viên của gian hàng
                    $data['PermissionStoreUser'] = true;
                    $iUserId = $oUser->parent_id;
                    $iShopId = $oUser->parent_id;
                }
            }   
        }
        
		$shop = $this->shop_model->get("*", "sho_user = " . $iShopId . ' AND sho_status = 1');

        if (count($shop) > 0 && $shop->sho_name != '' && $shop->sho_address != '' && $shop->sho_kho_address != '' && $shop->sho_kho_district != '' && $shop->sho_kho_province != '') {
        } else {
            $this->session->set_flashdata('flash_message', 'Bạn phải cập nhật đầy đủ thông tin cần thiết của gian hàng ( được đánh dấu * ) để thực hiện những chức năng khác');
            redirect(base_url() . "account/shop", 'location');
            die();
        }
        	
        $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'news';
        $data['menuType'] = 'account';
        $this->load->model('content_model');
        $this->load->model('content_category_model');
	
        $data['shopid'] = $shop->sho_id;
        $data['category1'] = $this->category_model->get("*", "cat_id = " . (int)$shop->sho_category);
        $maxorder = $this->content_category_model->get("max(cat_order) as maxorder");
        $data['next_order'] = (int)$maxorder->maxorder + 1;
        $maxindex = $this->content_category_model->get("max(cat_index) as maxindex");
        $data['next_index'] = (int)$maxindex->maxindex + 1;
        #END CHECK PERMISSION
        $data['sessionSuccessAdd'] = '';
        if ($this->session->flashdata('sessionSuccessAdd')) {
            $data['successAdd'] = true;
        } else {
            $data['successAdd'] = false;
            #BEGIN: Set date
            #END: Set date
            $this->load->library('form_validation');
            #BEGIN: Set rules			
            //$this->form_validation->set_rules('not_pro_cat_id', 'Chuyên mục tin', 'required|set_select');//|callback__exist_title
            $this->form_validation->set_rules('title_content', 'lang:title_label_add', 'trim|required');//|callback__exist_title
            $this->form_validation->set_rules('description', 'lang:description_label_add', 'trim|required');//|callback__exist_title
            $this->form_validation->set_rules('keywords', 'lang:keywords_label_add', 'trim|required');//|callback__exist_title            
            $this->form_validation->set_rules('txtContent', 'lang:txtcontent_label_add', 'trim|required');            
            $this->form_validation->set_message('required', $this->lang->line('required_message'));
            $this->form_validation->set_message('_valid_enddate', $this->lang->line('_valid_enddate_message'));
            $this->form_validation->set_error_delimiters('<div class="div_errorpost">', '</div>');
            #END Set message
            if ($this->form_validation->run() != FALSE) {
                #BEGIN: Upload image
                $this->load->library('upload');
                $this->load->library('image_lib');
                $pathImage = "media/images/content/";

                $this->load->library('ftp');
                $config['hostname'] = IP_CLOUDSERVER;
                $config['username'] = USER_CLOUDSERVER;
                $config['password'] = PASS_CLOUDSERVER;
                $config['port']     = PORT_CLOUDSERVER;                
                $config['debug']    = FALSE;
                $this->ftp->connect($config);
                #Create folder
                $pathImage = 'media/images/content/';
                $path = '/public_html/media/images/content';
                $dir_image = $this->session->userdata('sessionUsername'); 
                $dir = date('dmY');
                // Upload to other server cloud
                $ldir = array();
                $ldir = $this->ftp->list_files($path);
               
                // if $my_dir name exists in array returned by nlist in current '.' dir
                if (! in_array($dir, $ldir)) {                    
                    $this->ftp->mkdir($path . '/' . $dir, 0775);
                }                                             

                if (!is_dir($pathImage . $dir_image)) {
                    @mkdir($pathImage . $dir_image, 0775);
                    $this->load->helper('file');
                    @write_file($pathImage . $dir_image . '/index.html', '<p>Directory access is forbidden.</p>');
                }

                $config['upload_path'] = $pathImage . $dir_image . '/';
                $config['allowed_types'] = 'gif|jpg|jpeg|png';
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);

                if ($this->upload->do_upload('image')) {
                    $uploadData = $this->upload->data();
                    if ($uploadData['is_image'] == TRUE) {
                        $image = $uploadData['file_name'];
                        #BEGIN: Create thumbnail
                        
                        if (file_exists($pathImage . $dir_image . '/' . $image)) {
                            /* Create thumbnail 1:1 */
                            $configCrop['source_image'] = $pathImage . $dir_image . '/' . $image;
                            $configCrop['new_image'] = $pathImage . $dir_image . '/thumbnail_1_' . $image;
                            $configCrop['maintain_ratio'] = FALSE;                            
                            if($uploadData['image_width'] > $uploadData['image_height']){
                                $configCrop['width'] = $uploadData['image_height'];
                                $configCrop['height'] = $uploadData['image_height'];
                                $configCrop['x_axis'] = ($uploadData['image_width']/2) - ($uploadData['image_height']/2);
                                $configCrop['y_axis'] = 0;
                            }
                            if($uploadData['image_width'] < $uploadData['image_height']){
                                $configCrop['width'] = $uploadData['image_width'];
                                $configCrop['height'] = $uploadData['image_width'];
                                $configCrop['x_axis'] = 0;
                                $configCrop['y_axis'] = ($uploadData['image_height']/2) - ($uploadData['image_width']/2);
                            }
                            if($uploadData['image_width'] == $uploadData['image_height']){
                                $configCrop['width'] = $uploadData['image_width'];
                                $configCrop['height'] = $uploadData['image_height'];
                                $configCrop['x_axis'] = 0;
                                $configCrop['y_axis'] = 0;
                            }
                            $this->image_lib->initialize($configCrop);
                            $this->image_lib->crop();
                            $this->image_lib->clear();
                            
                            $configResize['source_image'] = $pathImage . $dir_image . '/thumbnail_1_' . $image;
                            $configResize['new_image'] = $pathImage . $dir_image . '/thumbnail_1_' . $image;
                            $configResize['maintain_ratio'] = FALSE;
                            $configResize['width'] = 150;
                            $configResize['height'] = 150; 
                            $configResize['quality'] = 90; 
							
                            $this->image_lib->initialize($configResize);
                            $this->image_lib->resize();
                            $this->image_lib->clear();
                            
                            /* Create thumbnail 3 */                           
                            $configCrop['source_image'] = $pathImage . $dir_image . '/' . $image;
                            $configCrop['new_image'] = $pathImage . $dir_image . '/thumbnail_3_' . $image;
                            $configCrop['maintain_ratio'] = FALSE;                            
                            if($uploadData['image_width'] > $uploadData['image_height']){
                                $configCrop['width'] = $uploadData['image_height'];
                                $configCrop['height'] = $uploadData['image_height'];
                                $configCrop['x_axis'] = ($uploadData['image_width']/2) - ($uploadData['image_height']/2);
                                $configCrop['y_axis'] = 0;
                            }
                            if($uploadData['image_width'] < $uploadData['image_height']){
                                $configCrop['width'] = $uploadData['image_width'];
                                $configCrop['height'] = $uploadData['image_width'];
                                $configCrop['y_axis'] = 0;
                                $configCrop['y_axis'] = ($uploadData['image_height']/2) - ($uploadData['image_width']/2);
                            }
                            if($uploadData['image_width'] == $uploadData['image_height']){
                                $configCrop['width'] = $uploadData['image_width'];
                                $configCrop['height'] = $uploadData['image_height'];
                                $configCrop['x_axis'] = 0;
                                $configCrop['y_axis'] = 0;
                            }
                            $this->image_lib->initialize($configCrop);
                            $this->image_lib->crop();
                            $this->image_lib->clear();
                            
                            $configResize['source_image'] = $pathImage . $dir_image . '/thumbnail_3_' . $image;
                            $configResize['new_image'] = $pathImage . $dir_image . '/thumbnail_3_' . $image;
                            $configResize['maintain_ratio'] = FALSE;
                            $configResize['width'] = 600;
                            $configResize['height'] = 600; 
                            $configResize['quality'] = 90; 
							
                            $this->image_lib->initialize($configResize);
                            $this->image_lib->resize();
                            $this->image_lib->clear();
                                                        
                            /* Create thumbnail 16:9 */
                            $configCrop['source_image'] = $pathImage . $dir_image . '/' . $image;
                            $configCrop['new_image'] = $pathImage . $dir_image . '/thumbnail_2_' . $image;
                            $configCrop['maintain_ratio'] = FALSE;                            
                            if( $uploadData['image_width'] > $uploadData['image_height'] && $uploadData['image_height'] <= $uploadData['image_width'] / 16 * 9 ){
                                $configCrop['width'] = $uploadData['image_height'] / 9 * 16;
                                $configCrop['height'] = $uploadData['image_height'];
                                $configCrop['x_axis'] = ($uploadData['image_width'] - $configCrop['width']) / 2;                                
                                $configCrop['y_axis'] = 0;                               
                            }                            
                            if(($uploadData['image_width'] <= $uploadData['image_height'] ) 
                                    || ( $uploadData['image_width'] > $uploadData['image_height'] && $uploadData['image_height'] > $uploadData['image_width'] / 16 * 9 )){
                                $configCrop['width'] = $uploadData['image_width'];
                                $configCrop['height'] = $uploadData['image_width'] / 16 * 9;
                                $configCrop['x_axis'] = 0; 
                                $configCrop['y_axis'] = ($uploadData['image_height'] - $configCrop['height']) / 2;
                            }                            
                            $this->image_lib->initialize($configCrop);
                            $this->image_lib->crop();
                            $this->image_lib->clear();
                            
                            $configResize['source_image'] = $pathImage . $dir_image . '/thumbnail_2_' . $image;
                            $configResize['new_image'] = $pathImage . $dir_image . '/thumbnail_2_' . $image;
                            $configResize['maintain_ratio'] = FALSE;
                            $configResize['width'] = 600;
                            $configResize['height'] = 338;							
                            $configResize['quality'] = 90; 
                            $this->image_lib->initialize($configResize);
			    
                            $this->image_lib->resize();
                            $this->image_lib->clear();
                            
                            #END resize image upload          
                            $configImage['source_image'] = $pathImage . $dir_image . '/' . $image;
                            $configImage['new_image'] = $pathImage . $dir_image . '/' . $image;
                            $configImage['maintain_ratio'] = TRUE;
                            $configImage['width'] = 800;
                            $configImage['height'] = 1;
                            $configImage['quality'] = 90; 
                            $configImage['master_dim'] = 'width';
                            $this->image_lib->initialize($configImage);
                            $this->image_lib->resize();
                            $this->image_lib->clear();
                            
                        } 
                    }

                    // upload this image to other server 
                    if(file_exists($pathImage . $dir_image .'/'. $image) 
                        && file_exists($pathImage . $dir_image .'/thumbnail_1_'. $image)
                        && file_exists($pathImage . $dir_image .'/thumbnail_2_'. $image)
                        && file_exists($pathImage . $dir_image .'/thumbnail_3_'. $image)
                    ){
                        $this->ftp->upload($pathImage . $dir_image .'/'. $image, $path .'/'. $dir .'/'. $image, 'auto', 0775);
                        $this->ftp->upload($pathImage . $dir_image .'/thumbnail_1_'. $image, $path .'/'. $dir .'/thumbnail_1_'. $image, 'auto', 0775);
                        $this->ftp->upload($pathImage . $dir_image .'/thumbnail_2_'. $image, $path .'/'. $dir .'/thumbnail_2_'. $image, 'auto', 0775);
                        $this->ftp->upload($pathImage . $dir_image .'/thumbnail_3_'. $image, $path .'/'. $dir .'/thumbnail_3_'. $image, 'auto', 0775);
                        array_map('unlink', glob('media/images/content/'. $dir_image .'/*'));
                    }
                }
		$file_name = array();
		$imgstyle = array();
		for($i = 1; $i < 13; $i++) {
		    if ($this->upload->do_upload('image'.$i)) {
				$uploadData = $this->upload->data();
				if ($uploadData['is_image'] == TRUE) {
					$file_name[$i] = $uploadData['file_name'];					
					//* Create thumbnail 1:1 */
					$configCrop['source_image'] = $pathImage . $dir_image . '/' . $file_name[$i];
					$configCrop['new_image'] = $pathImage . $dir_image . '/1x1_' . $file_name[$i];
					$configCrop['maintain_ratio'] = FALSE;
					$w = $uploadData['image_width'];
					$h = $uploadData['image_height'];
					if($w > $h) {
						$configCrop['width'] = $h;
						$configCrop['height'] = $h;
						$configCrop['x_axis'] = $w/2 - $h/2;
						$configCrop['y_axis'] = 0;
					}
					if($w < $h) {
						$configCrop['width'] = $w;
						$configCrop['height'] = $w;
						$configCrop['x_axis'] = 0;
						$configCrop['y_axis'] = $h/2 - $w/2;
					}
					if($w == $h) {
						$configCrop['width'] = $w;
						$configCrop['height'] = $h;
						$configCrop['x_axis'] = 0;
						$configCrop['y_axis'] = 0;
					}				
					$this->image_lib->initialize($configCrop);
					$this->image_lib->crop();
					$this->image_lib->clear();
					//resize image to 450 x 450
					$configResize['source_image'] = $pathImage . $dir_image . '/1x1_' . $file_name[$i];
					$configResize['new_image'] = $pathImage . $dir_image . '/1x1_' . $file_name[$i];
					$configResize['maintain_ratio'] = TRUE;
					$configResize['width'] = 600;
					$configResize['height'] = 600;
					$this->image_lib->initialize($configResize);
					$this->image_lib->resize();
					$this->image_lib->clear();
					
					
					/*resize image upload*/
					$configImage['source_image'] = $pathImage . $dir_image . '/' . $file_name[$i];
					$configImage['new_image'] = $pathImage . $dir_image . '/' . $file_name[$i];
					$configImage['maintain_ratio'] = TRUE;
					$configImage['width'] = 800;
					$configImage['height'] = 1;
					$configImage['quality'] = 90; 
					$configImage['master_dim'] = 'width';
					$this->image_lib->initialize($configImage);
					$this->image_lib->resize();
					$this->image_lib->clear();
					
				}

				if(file_exists($pathImage . $dir_image .'/'. $file_name[$i])){
					$this->ftp->upload($pathImage . $dir_image . '/' . $file_name[$i], $path .'/'. $dir .'/'. $file_name[$i], 'auto', 0775);
					$this->ftp->upload($pathImage . $dir_image . '/1x1_' . $file_name[$i], $path .'/'. $dir .'/1x1_'. $file_name[$i], 'auto', 0775);
					array_map('unlink', glob('media/images/content/'. $dir_image .'/*'));
				}                    
		    }
			$imgstyle[$i]->background = $this->input->post('background' . $i);
			$imgstyle[$i]->color = $this->input->post('color' . $i);
			$imgstyle[$i]->imgeffect = $this->input->post('imgeffect' . $i);
			$imgstyle[$i]->texteffect = $this->input->post('texteffect' . $i);
                        $imgstyle[$i]->display = $this->input->post('display' . $i);
                        $imgstyle[$i]->text_1_image = $this->input->post('text_1_image' . $i);
			$imgstyle[$i]->text_2_image = $this->input->post('text_2_image' . $i);
			$imgstyle[$i]->text_3_image = $this->input->post('text_3_image' . $i);                                        
			$imgstyle[$i]->bg_color = $this->input->post('bg_color' . $i);
			$imgstyle[$i]->ra_color = $this->input->post('ra_color' . $i);
			$imgstyle[$i]->rgba_color = $this->input->post('rgba_color' . $i);
			$imgstyle[$i]->text_color = $this->input->post('text_color' . $i);
			$imgstyle[$i]->text_position = $this->input->post('text_position' . $i);
                        $imgstyle[$i]->text_font = $this->input->post('text_font' . $i);             
			$imgstyle[$i]->text_effect_in = $this->input->post('text_effect_in' . $i);
			$imgstyle[$i]->text_effect_out = $this->input->post('text_effect_out' . $i);
                        // them mo ta noi bat duoi anh
                        $caption2 = array();
                        if(!empty($this->input->post('icon'.$i)) || !empty($this->input->post('title'.$i))) {
                            $countpostcaption2 = count($this->input->post('icon'.$i));
                            for($j = 0; $j < $countpostcaption2; $j++){
                                $caption2[$j]->icon  = $this->input->post('icon'.$i)[$j];
                                $caption2[$j]->posi  = $this->input->post('posi'.$i)[$j];
                                $caption2[$j]->effect = $this->input->post('effect'.$i)[$j];
                                $caption2[$j]->title  = $this->input->post('title'.$i)[$j];
                                $caption2[$j]->desc  = $this->input->post('desc'.$i)[$j];
                            }
                            $imgstyle[$i]->caption2 = $caption2;	
                        }
		}
                //dd($imgstyle); die;
                // them quang cao    
                $not_ad->ad_status  = $this->input->post('ad_status');     
				if ($this->upload->do_upload('ad_image')) {
					$uploadData = $this->upload->data();
					if ($uploadData['is_image'] == TRUE) {
						$file_ad = $uploadData['file_name'];
						/*resize image via width*/
						$configImage['source_image'] = $pathImage . $dir_image . '/' . $file_ad;
						$configImage['new_image'] = $pathImage . $dir_image . '/' . $file_ad;
						$configImage['maintain_ratio'] = TRUE;
						$configImage['width'] = 800;
						$configImage['height'] = 1;
						$configImage['quality'] = 90;
						$configImage['master_dim'] = 'width';
						$this->image_lib->initialize($configImage);
						$this->image_lib->resize();
						$this->image_lib->clear();
					} 

					// upload this image to other server 
					if (file_exists($pathImage . $dir_image . '/' . $file_ad)) {
						$this->ftp->upload($pathImage . $dir_image . '/' . $file_ad, $path . '/' . $dir .'/'. $file_ad, 'auto', 0775);
						array_map('unlink', glob('media/images/content/'. $file_ad .'/*'));
					}
					
					$not_ad->ad_image = $file_ad;
				} 				
				$not_ad->ad_link  = $this->input->post('ad_link');   
                                if($this->input->post('ad_title1') != '' || $this->input->post('ad_desc1') != ''){
                                    $a[0]->title = $this->input->post('ad_title1');  $a[0]->desc = $this->input->post('ad_desc1');
                                }
                                if($this->input->post('ad_title1') != '' || $this->input->post('ad_desc1') != ''){
                                    $a[1]->title = $this->input->post('ad_title2');  $a[1]->desc = $this->input->post('ad_desc2');
                                }
                                if($this->input->post('ad_title1') != '' || $this->input->post('ad_desc1') != ''){
                                    $a[2]->title = $this->input->post('ad_title3');  $a[2]->desc = $this->input->post('ad_desc3');
                                }                            
                                $not_ad->ad_content = $a;                            
                                $not_ad->ad_time  = $this->input->post('ad_time');
                                $not_ad->ad_display  = $this->input->post('ad_display');

                $not_additional = array();		
                $count_post_additional = count($this->input->post('icon'));
                //echo $count_post_additional; die;
                if($count_post_additional > 0) { 
                    for($i = 0; $i < $count_post_additional; $i++){
                        $not_additional[$i]->icon  = $this->input->post('icon')[$i];
                        $not_additional[$i]->posi  = $this->input->post('posi')[$i];
                        $not_additional[$i]->title = $this->input->post('title')[$i];
                        $not_additional[$i]->desc  = $this->input->post('desc')[$i];
                    }
                }  
                
                // image mô tả
                if ($this->upload->do_upload('img_statistic')) {
                    $uploadData = $this->upload->data();
                    if ($uploadData['is_image'] == TRUE) {
                        $img_statistic = $uploadData['file_name']; 
                        /*resize image via width*/
                        $configImage['source_image'] = $pathImage . $dir_image . '/' . $img_statistic;
                        $configImage['new_image'] = $pathImage . $dir_image . '/' . $img_statistic;
                        $configImage['maintain_ratio'] = TRUE;
                        $configImage['width'] = 800;
                        $configImage['height'] = 1;
                        $configImage['quality'] = 90;
                        $configImage['master_dim'] = 'width';
                        $this->image_lib->initialize($configImage);
                        $this->image_lib->resize();
                        $this->image_lib->clear();
                    } 

                    // upload this image to other server 
                    if (file_exists($pathImage . $dir_image . '/' . $img_statistic)) {
                        $this->ftp->upload($pathImage . $dir_image . '/' . $img_statistic, $path . '/' . $dir .'/'. $img_statistic, 'auto', 0775);
                        array_map('unlink', glob('media/images/content/'. $dir_image .'/*'));
                    }
                }
                // end image mô tả 

		// START y kien khach hang
                $not_customer->cus_status = $this->input->post('cus_status');
                $not_customer->cus_title = $this->input->post('cus_title');
                $not_customer->cus_color = $this->input->post('cus_color');
                $not_customer->cus_background = $this->input->post('cus_background'); 
                
                $customer = array();                
                foreach ($_FILES['cus_avatar']['name'] as $i => $val) {
                    $_FILES['avatar[]']['name']=  $_FILES['cus_avatar']['name'][$i];
                    $_FILES['avatar[]']['type']= $_FILES['cus_avatar']['type'][$i];
                    $_FILES['avatar[]']['tmp_name']= $_FILES['cus_avatar']['tmp_name'][$i];
                    $_FILES['avatar[]']['error']= $_FILES['cus_avatar']['error'][$i];
                    $_FILES['avatar[]']['size']= $_FILES['cus_avatar']['size'][$i];
                    if ($this->upload->do_upload('avatar[]')) {
                        $uploadData = $this->upload->data();
                        if ($uploadData['is_image'] == TRUE) {
                            $cus_avatar = $uploadData['file_name'];
                            // Crop image square
                            $configCrop['source_image'] = $pathImage . $dir_image . '/' . $cus_avatar;
                            $configCrop['new_image'] = $pathImage . $dir_image . '/' . $cus_avatar;
                            $configCrop['maintain_ratio'] = FALSE;
                            $w = $uploadData['image_width'];
                            $h = $uploadData['image_height'];
                            if($w > $h) {
                                    $configCrop['width'] = $h;
                                    $configCrop['height'] = $h;
                                    $configCrop['x_axis'] = $w/2 - $h/2;
                                    $configCrop['y_axis'] = 0;
                            }
                            if($w < $h) {
                                    $configCrop['width'] = $w;
                                    $configCrop['height'] = $w;
                                    $configCrop['x_axis'] = 0;
                                    $configCrop['y_axis'] = $h/2 - $w/2;
                            }
                            if($w == $h) {
                                    $configCrop['width'] = $w;
                                    $configCrop['height'] = $h;
                                    $configCrop['x_axis'] = 0;
                                    $configCrop['y_axis'] = 0;
                            }				
                            $this->image_lib->initialize($configCrop);
                            $this->image_lib->crop();
                            $this->image_lib->clear();
                            
                            /*resize image via width*/
                            $configImage['source_image'] = $pathImage . $dir_image . '/' . $cus_avatar;
                            $configImage['new_image'] = $pathImage . $dir_image . '/' . $cus_avatar;
                            $configImage['maintain_ratio'] = TRUE;
                            $configImage['width'] = 1;
                            $configImage['height'] = 200;
                            $configImage['quality'] = 90;
                            $configImage['master_dim'] = 'height';
                            $this->image_lib->initialize($configImage);
                            $this->image_lib->resize();
                            $this->image_lib->clear();
                        }
                        // upload this image to other server 
                        if (file_exists($pathImage . $dir_image . '/' . $cus_avatar)) {
                            $this->ftp->upload($pathImage . $dir_image . '/' . $cus_avatar, $path . '/' . $dir .'/'. $cus_avatar, 'auto', 0775); 
                        }                                               
                    } 
                    $customer[$i]->cus_avatar = $cus_avatar;
                    $customer[$i]->cus_text1 = $this->input->post('cus_text1')[$i];
                    $customer[$i]->cus_text2 = $this->input->post('cus_text2')[$i];
                    $customer[$i]->cus_text3 = $this->input->post('cus_text3')[$i];
                    $customer[$i]->cus_facebook = $this->input->post('cus_facebook')[$i];
                    $customer[$i]->cus_twitter = $this->input->post('cus_twitter')[$i];
                    $customer[$i]->cus_google = $this->input->post('cus_google')[$i];
                    $customer[$i]->cus_link = $this->input->post('cus_link')[$i];
                }
                
                $not_customer->cus_list = $customer; 
                
                
		// END y kien khach hang
                if($_FILES['video']['name'] != '') {   
                    $aTypeVideo = array(
                        'video/mp4'     => '.mp4',
                        'video/mpeg'    => '.mpeg',
                    );
                    $fVideo = $_FILES['video'];
                    $sVideoName = uniqid().time().uniqid();
                    $this->ftp->upload($fVideo['tmp_name'],'public_html/video/'.$sVideoName.$aTypeVideo[$fVideo['type']],0755);                    
                    $videoname = $sVideoName.$aTypeVideo[$fVideo['type']];
                } else {
                    $videoname = NULL;
                }
                
                // Delete directory 
                if (file_exists('media/images/content/' . $dir_image . '/index.html')) {
                    @unlink('media/images/content/' . $dir_image . '/index.html');
                }
                array_map('unlink', glob('media/images/content/'. $dir_image .'/*'));
                @rmdir('media/images/content/' . $dir_image);

                $this->ftp->close();

                //publish by admin              
                $shopPackageInfoLatest = $this->package_user_model->getPackageInfoLatest($this->session->userdata('sessionUser'));
                
                if($shopPackageInfoLatest->id == 1){
                    $not_publish = 0;                 
                } else { 
                    $not_publish = 1;               
                }
                //active by shop 
                if ($this->input->post('active_content') == '1') {
                    $active_content = 1;
                } else {
                    $active_content = 0;
                }
               
                $dataAdd = array(
                    'not_title' => trim($this->filter->injection_html($this->input->post('title_content'))),
                    'not_description' => $this->input->post('description'),
                    'not_keywords' => $this->input->post('keywords'),
                    'not_group' => $this->filter->injection($group_id),
                    'not_user' => $iUserId,
                    'id_category' => 16,
                    'not_degree' => 1,
                    'not_detail' => $this->input->post('txtContent'),
                    'not_additional' => json_encode($not_additional),
                    'not_display' => (int)$this->input->post('not_display'),
                    'not_begindate' => mktime(),
                    'not_enddate' => 0,
                    'cat_type' => 1,
                    'not_image' => $image,
		    
                    'not_image1' => $file_name[1], 'imgtitle1' => $this->input->post('imgtitle1'), 		    
                    'imglink1' => (int)$this->input->post('imglink1'), 
                    'linkdetail1' => $this->input->post('linkdetail1'), 
                    'imgcaption1' => str_replace("\r\n", '', $this->input->post('imgcaption1')),
                    'imgstyle1' => json_encode($imgstyle[1]),
                    
                    'not_image2' => $file_name[2], 'imgtitle2' => $this->input->post('imgtitle2'),
                    'imglink2' => (int)$this->input->post('imglink2'), 
                    'linkdetail2' => $this->input->post('linkdetail2'), 
                    'imgcaption2' => str_replace("\r\n", '', $this->input->post('imgcaption2')),
                    'imgstyle2' => json_encode($imgstyle[2]),
                    
                    'not_image3' => $file_name[3], 'imgtitle3' => $this->input->post('imgtitle3'),
                    'imglink3' => (int)$this->input->post('imglink3'), 
                    'linkdetail3' => $this->input->post('linkdetail3'), 
                    'imgcaption3' => str_replace("\r\n", '', $this->input->post('imgcaption3')),
                    'imgstyle3' => json_encode($imgstyle[3]),
                    
                    'not_image4' => $file_name[4], 'imgtitle4' => $this->input->post('imgtitle4'),
                    'imglink4' => (int)$this->input->post('imglink4'), 
                    'linkdetail4' => $this->input->post('linkdetail4'), 
                    'imgcaption4' => str_replace("\r\n", '', $this->input->post('imgcaption4')),
                    'imgstyle4' => json_encode($imgstyle[4]),

                    'not_image5' => $file_name[5], 'imgtitle5' => $this->input->post('imgtitle5'),
                    'imglink5' => (int)$this->input->post('imglink5'), 
                    'linkdetail5' => $this->input->post('linkdetail5'), 
                    'imgcaption5' => str_replace("\r\n", '', $this->input->post('imgcaption5')),
                    'imgstyle5' => json_encode($imgstyle[5]),

                    'not_image6' => $file_name[6], 'imgtitle6' => $this->input->post('imgtitle6'),                   
                    'imglink6' => (int)$this->input->post('imglink6'), 
                    'linkdetail6' => $this->input->post('linkdetail6'), 
                    'imgcaption6' => str_replace("\r\n", '', $this->input->post('imgcaption6')),
                    'imgstyle6' => json_encode($imgstyle[6]),

                    'not_image7' => $file_name[7], 'imgtitle7' => $this->input->post('imgtitle7'),
                    'imglink7' => (int)$this->input->post('imglink7'), 
                    'linkdetail7' => $this->input->post('linkdetail7'), 
                    'imgcaption7' => str_replace("\r\n", '', $this->input->post('imgcaption7')),
                    'imgstyle7' => json_encode($imgstyle[7]),
					
		    
                    'not_image8' => $file_name[8], 'imgtitle8' => $this->input->post('imgtitle8'),
                    'imglink8' => (int)$this->input->post('imglink8'), 
                    'linkdetail8' => $this->input->post('linkdetail8'), 
                    'imgcaption8' => str_replace("\r\n", '', $this->input->post('imgcaption8')),
                    'imgstyle8' => json_encode($imgstyle[8]),
		    
                    'not_image9' => $file_name[9], 'imgtitle9' => $this->input->post('imgtitle9'),
                    'imglink9' => (int)$this->input->post('imglink9'), 
                    'linkdetail9' => $this->input->post('linkdetail9'), 
                    'imgcaption9' => str_replace("\r\n", '', $this->input->post('imgcaption9')),
                    'imgstyle9' => json_encode($imgstyle[9]),
		    
                    'not_image10' => $file_name[10], 'imgtitle10' => $this->input->post('imgtitle10'),
                    'imglink10' => (int)$this->input->post('imglink10'), 
                    'linkdetail10' => $this->input->post('linkdetail10'), 
                    'imgcaption10' => str_replace("\r\n", '', $this->input->post('imgcaption10')),
                    'imgstyle10' => json_encode($imgstyle[10]),
		    
                    'not_image11' => $file_name[11], 'imgtitle11' => $this->input->post('imgtitle11'),
                    'imglink11' => (int)$this->input->post('imglink11'), 
                    'linkdetail11' => $this->input->post('linkdetail11'), 
                    'imgcaption11' => str_replace("\r\n", '', $this->input->post('imgcaption11')),
                    'imgstyle11' => json_encode($imgstyle[11]),

                    'not_image12' => $file_name[12], 'imgtitle12' => $this->input->post('imgtitle12'),
                    'imglink12' => (int)$this->input->post('imglink12'), 
                    'linkdetail12' => $this->input->post('linkdetail12'), 
                    'imgcaption12' => str_replace("\r\n", '', $this->input->post('imgcaption12')),
                    'imgstyle12' => json_encode($imgstyle[12]),
		    
                    'not_dir_image' => date('dmY'),
                    'not_video_url' => $this->input->post('youtube'),
                    'not_video_url1' => $videoname,
                    'not_status' => $active_content,
                    'not_pro_cat_id' => (int)$this->input->post('not_pro_cat_id'),
                    'not_news_hot' => (int)$this->input->post('not_news_hot'),
                    'not_news_sale' => (int)$this->input->post('not_news_sale'),
                    'not_publish' => (int)$not_publish,
                    'not_slideshow' => $this->input->post('slideshow'),
                    'not_effect' => $this->input->post('effect'),
                    'not_music' => $this->input->post('music'),
                    'not_ad' => json_encode($not_ad),
                    'statistic' =>  json_encode($this->input->post('statistic')),
                    'not_statistic' =>  (int)$this->input->post('not_statistic'),
                    'not_customer' =>  json_encode($not_customer),
                    'not_posted_by' =>  'website' // or app
                );

                if (isset($img_statistic)) {
                    $dataEdit['img_statistic'] = $img_statistic;
                }
				
		//dd($dataAdd); die;		
		
                if ($this->content_model->add($dataAdd)) {
                    $this->session->set_flashdata('sessionSuccessAdd', 1);
                }
                redirect(base_url() . 'account/news/addnews', 'location');
            } else {
		
		$dataAdd = array(
                    'not_title' => $this->input->post('title_content'),
                    'not_description' => $this->input->post('description'),
                    'not_keywords' => $this->input->post('keywords'),
                    'not_detail' => $this->input->post('txtContent')
                );
                
		$data['dataAdd'] = $dataAdd;
            }
        }
        #Load view
        $folder = folderWeb;
        $dir = $_SERVER['DOCUMENT_ROOT'] . $folder . "/images";
        if ($opendir = opendir($dir)) {
            $images = array();
            while (($file = readdir($opendir)) !== FALSE) {
                if ($file != "." && $file != "..") {
                    $pathinfo = pathinfo($file);
                    if (isset($pathinfo['extension'])) {
                        $ext = strtolower($pathinfo['extension']);
                    } else {
                        $ext = '';
                    }
                    if ($ext == 'jpg' || $ext == 'jpeg' || $ext == 'png' || $ext == 'gif') {
                        $images["$file"] = $file;
                    }
                }
            }
        }
        $data['images'] = $images;

        $cat_level_0 = $this->category_model->fetch("*", "parent_id = 0 AND cat_status = 1 AND cate_type = 2", "cat_service, cat_order, cat_id", "ASC");
        $data['catlevel0'] = $cat_level_0;
        // Load shop's products
                 
        $data['products'] = $this->product_model->fetch("pro_category, pro_id, pro_name, pro_image, pro_dir, pro_type", "pro_type IN (0,2) AND pro_status = 1 AND pro_user=" . $iShopId, "pro_type", "ASC", null, null);
        #Load view
        
        
        $this->load->view('home/account/news/addnews', $data);
    }

    /**
     * @param $idnew
    */
    function editNew($idnew)
    {
        $sessionUser = (int)$this->session->userdata('sessionUser');
        $iShopId     = (int)$this->session->userdata('sessionUser');

        $group_id = $this->session->userdata('sessionGroup');

        if ($group_id == StaffStoreUser) {
            $oUser       = $this->user_model->get("*", "use_id = " . $sessionUser . ' AND use_status = 1');
            $sessionUser = $oUser->parent_id;
            $iShopId     = $oUser->parent_id;

            if (!empty($oUser)) {
                $oShop = $this->user_model->get("*", "use_id = " . $oUser->parent_id . ' AND use_status = 1');
                if (!empty($oShop) && $oShop->use_group == 3) {
                    // Tự động active khi nhân viên của gian hàng
                    $data['PermissionStoreUser'] = true;
                    $sessionUser                 = $oUser->parent_id;
                    $iShopId                     = $oUser->parent_id;
                }
            }
        }

        $shop = $this->shop_model->get("*", "sho_user = " . $iShopId . ' AND sho_status = 1');

        if (count($shop) > 0 && $shop->sho_address != '' && $shop->sho_kho_address != '' && $shop->sho_kho_district != '' && $shop->sho_kho_province != '') {
        } else {
            $this->session->set_flashdata('flash_message', 'Bạn phải cập nhật đầy đủ thông tin cần thiết của gian hàng ( được đánh dấu * ) để thực hiện những chức năng khác');
            redirect(base_url() . "account/shop", 'location');
            die();
        }
        $data['menuPanelGroup'] = 4;
        $data['menuSelected']   = 'news';
        $data['menuType']       = 'account';

        $this->load->model('content_model');
        $this->load->model('content_category_model');
        $this->load->model('category_model');

        /*$cat_level_0 = $this->content_category_model->fetch("*", "cat_status = 1 AND cat_type = 1 ", "cat_order, cat_id", "ASC");
        $data['cat_level_1'] = $this->content_category_model->fetch("*", "parent_id > 0 AND cat_status = 1 AND cat_type = 1");
        $data['catlevel0'] = $cat_level_0;*/

        $data['category1'] = $this->category_model->get("*", "cat_id = " . (int)$shop->sho_category);
        $editnew           = $this->content_model->get("*", "not_id =" . (int)$idnew . " AND not_user = " . $sessionUser);

        if (!$editnew) {
            redirect(base_url() . "account", 'location');
            die();
        }

        $data['editnew'] = $editnew;

        $maxorder           = $this->content_category_model->get("max(cat_order) as maxorder");
        $data['next_order'] = (int)$maxorder->maxorder + 1;
        $maxindex           = $this->content_category_model->get("max(cat_index) as maxindex");
        $data['next_index'] = (int)$maxindex->maxindex + 1;
        #END CHECK PERMISSION
        $data['successEdit'] = 0;
        if ($this->session->flashdata('sessionSuccessEditAccount')) {
            $data['successEdit'] = 1;
        } else {
            $data['successEdit'] = 0;
            #BEGIN: Set date
            #END: Set date
            $this->load->library('form_validation');
            #BEGIN: Set rules
            $this->form_validation->set_rules('title_content', 'lang:title_label_add', 'trim|required');//|callback__exist_title
            $this->form_validation->set_rules('description', 'lang:description_label_add', 'trim|required');//|callback__exist_title
            $this->form_validation->set_rules('keywords', 'lang:keywords_label_add', 'trim|required');//|callback__exist_title            
            $this->form_validation->set_rules('txtContent', 'lang:txtcontent_label_add', 'trim|required');
            $this->form_validation->set_message('required', $this->lang->line('required_message'));
            $this->form_validation->set_message('_valid_enddate', $this->lang->line('_valid_enddate_message'));
            $this->form_validation->set_error_delimiters('<div class="div_errorpost">', '</div>');


            #END Set message
            if ($this->form_validation->run() != FALSE) {

                #BEGIN: Upload image
                $this->load->library('upload');
                $this->load->library('image_lib');
                $pathImage = "media/images/content/";

                $this->load->library('ftp');
                $config['hostname'] = IP_CLOUDSERVER;
                $config['username'] = USER_CLOUDSERVER;
                $config['password'] = PASS_CLOUDSERVER;
                $config['port']     = PORT_CLOUDSERVER;
                $config['debug']    = FALSE;
                $this->ftp->connect($config);
                $pathImage = 'media/images/content/';
                $path      = '/public_html/media/images/content';
                $dir_image = $this->session->userdata('sessionUsername');
                $dir       = $editnew->not_dir_image;
                // Upload to other server cloud
                $ldir = array();
                $ldir = $this->ftp->list_files($path);

                // if $my_dir name exists in array returned by nlist in current '.' dir
                if (!in_array($dir, $ldir)) {
                    $this->ftp->mkdir($path . '/' . $dir, 0775);
                }
                #Create folder               	

                if ($this->input->post('image_dir') == '') {
                    $dir = date('dmY');
                } else {
                    $dir = $this->input->post('image_dir');
                }

                if ($this->input->post('image') == '') {
                    $image = $this->input->post('image_news');
                }

                if (!is_dir($pathImage . $dir_image)) {
                    @mkdir($pathImage . $dir_image, 0775);
                }

                $config['upload_path']   = $pathImage . $dir_image . '/';
                $config['allowed_types'] = 'gif|jpg|jpeg|png';
                $config['encrypt_name']  = true;
                $this->upload->initialize($config);


                if ($this->upload->do_upload('image')) {
                    $uploadData = $this->upload->data();

                    if ($uploadData['is_image'] == TRUE) {
                        $image = $uploadData['file_name'];

                        if (file_exists($pathImage . $dir_image . '/' . $image)) {
                            /* Create thumbnail 1 */
                            $configCrop['source_image']   = $pathImage . $dir_image . '/' . $image;
                            $configCrop['new_image']      = $pathImage . $dir_image . '/thumbnail_1_' . $image;
                            $configCrop['maintain_ratio'] = FALSE;
                            if ($uploadData['image_width'] > $uploadData['image_height']) {
                                $configCrop['width']  = $uploadData['image_height'];
                                $configCrop['height'] = $uploadData['image_height'];
                                $configCrop['x_axis'] = ($uploadData['image_width']/2) - ($uploadData['image_height']/2);
                                $configCrop['y_axis'] = 0;
                            }
                            if ($uploadData['image_width'] < $uploadData['image_height']) {
                                $configCrop['width']  = $uploadData['image_width'];
                                $configCrop['height'] = $uploadData['image_width'];
                                $configCrop['x_axis'] = 0;
                                $configCrop['y_axis'] = ($uploadData['image_height']/2) - ($uploadData['image_width']/2);
                            }
                            if ($uploadData['image_width'] == $uploadData['image_height']) {
                                $configCrop['width']  = $uploadData['image_width'];
                                $configCrop['height'] = $uploadData['image_height'];
                                $configCrop['x_axis'] = 0;
                                $configCrop['y_axis'] = 0;
                            }
                            $this->image_lib->initialize($configCrop);
                            $this->image_lib->crop();
                            $this->image_lib->clear();

                            $configResize['source_image']   = $pathImage . $dir_image . '/thumbnail_1_' . $image;
                            $configResize['new_image']      = $pathImage . $dir_image . '/thumbnail_1_' . $image;
                            $configResize['maintain_ratio'] = TRUE;
                            $configResize['width']          = 150;
                            $configResize['height']         = 150;
                            $configResize['quality']        = 90;
                            $this->image_lib->initialize($configResize);
                            $this->image_lib->resize();
                            $this->image_lib->clear();

                            /* Resize thumbnail 3 */
                            $configCrop['source_image']   = $pathImage . $dir_image . '/' . $image;
                            $configCrop['new_image']      = $pathImage . $dir_image . '/thumbnail_3_' . $image;
                            $configCrop['maintain_ratio'] = FALSE;
                            if ($uploadData['image_width'] > $uploadData['image_height']) {
                                $configCrop['width']  = $uploadData['image_height'];
                                $configCrop['height'] = $uploadData['image_height'];
                                $configCrop['x_axis'] = ($uploadData['image_width']/2) - ($uploadData['image_height']/2);
                                $configCrop['y_axis'] = 0;
                            }
                            if ($uploadData['image_width'] < $uploadData['image_height']) {
                                $configCrop['width']  = $uploadData['image_width'];
                                $configCrop['height'] = $uploadData['image_width'];
                                $configCrop['x_axis'] = 0;
                                $configCrop['y_axis'] = ($uploadData['image_height']/2) - ($uploadData['image_width']/2);
                            }
                            if ($uploadData['image_width'] == $uploadData['image_height']) {
                                $configCrop['width']  = $uploadData['image_width'];
                                $configCrop['height'] = $uploadData['image_height'];
                                $configCrop['x_axis'] = 0;
                                $configCrop['y_axis'] = 0;
                            }
                            $this->image_lib->initialize($configCrop);
                            $this->image_lib->crop();
                            $this->image_lib->clear();
                            
                            $configResize['source_image'] = $pathImage . $dir_image . '/thumbnail_3_' . $image;
                            $configResize['new_image'] = $pathImage . $dir_image . '/thumbnail_3_' . $image;
                            $configResize['maintain_ratio'] = FALSE;
                            $configResize['width'] = 600;
                            $configResize['height'] = 600; 
                            $configResize['quality'] = 90; 
							
                            $this->image_lib->initialize($configResize);
                            $this->image_lib->resize();
                            $this->image_lib->clear();

                            /* Create thumbnail 16:9 */
                            $configCrop['source_image']   = $pathImage . $dir_image . '/' . $image;
                            $configCrop['new_image']      = $pathImage . $dir_image . '/thumbnail_2_' . $image;
                            $configCrop['maintain_ratio'] = FALSE;
                            if ($uploadData['image_width'] > $uploadData['image_height'] && $uploadData['image_height'] <= $uploadData['image_width'] / 16 * 9) {
                                $configCrop['width']  = $uploadData['image_height'] / 9 * 16;
                                $configCrop['height'] = $uploadData['image_height'];
                                $configCrop['x_axis'] = ($uploadData['image_width'] - $configCrop['width']) / 2;
                                $configCrop['y_axis'] = 0;
                            }
                            if (($uploadData['image_width'] <= $uploadData['image_height'])
                                || ($uploadData['image_width'] > $uploadData['image_height'] && $uploadData['image_height'] > $uploadData['image_width'] / 16 * 9)) {
                                $configCrop['width']  = $uploadData['image_width'];
                                $configCrop['height'] = $uploadData['image_width'] / 16 * 9;
                                $configCrop['x_axis'] = 0;
                                $configCrop['y_axis'] = ($uploadData['image_height'] - $configCrop['height']) / 2;
                            }
                            $this->image_lib->initialize($configCrop);
                            $this->image_lib->crop();
                            $this->image_lib->clear();
                            
                            $configResize['source_image'] = $pathImage . $dir_image . '/thumbnail_2_' . $image;
                            $configResize['new_image'] = $pathImage . $dir_image . '/thumbnail_2_' . $image;
                            $configResize['maintain_ratio'] = FALSE;
                            $configResize['width'] = 600;
                            $configResize['height'] = 338;
                            $configResize['quality'] = 90;
			                $this->image_lib->initialize($configResize);
                            $this->image_lib->resize();
                            $this->image_lib->clear();

                            /* Resize image upload */
                            $configImage['source_image']   = $pathImage . $dir_image . '/' . $image;
                            $configImage['new_image']      = $pathImage . $dir_image . '/' . $image;
                            $configImage['maintain_ratio'] = TRUE;
                            $configImage['width']          = 800;
                            $configImage['height']         = 1;
                            $configImage['quality']        = 90;
                            $configImage['master_dim']     = 'width';
                            $this->image_lib->initialize($configImage);
                            $this->image_lib->resize();
                            $this->image_lib->clear();
                        }
                    }
                    // upload this image to other server 
                    if (file_exists($pathImage . $dir_image . '/' . $image)
                        && file_exists($pathImage . $dir_image . '/thumbnail_1_' . $image)
                        && file_exists($pathImage . $dir_image . '/thumbnail_2_' . $image)
                        && file_exists($pathImage . $dir_image . '/thumbnail_3_' . $image)
                    ) {
                        $this->ftp->upload($pathImage . $dir_image . '/' . $image, $path . '/' . $dir . '/' . $image, 'auto', 0775);
                        $this->ftp->upload($pathImage . $dir_image . '/thumbnail_1_' . $image, $path . '/' . $dir . '/thumbnail_1_' . $image, 'auto', 0775);
                        $this->ftp->upload($pathImage . $dir_image . '/thumbnail_2_' . $image, $path . '/' . $dir . '/thumbnail_2_' . $image, 'auto', 0775);
                        $this->ftp->upload($pathImage . $dir_image . '/thumbnail_3_' . $image, $path . '/' . $dir . '/thumbnail_3_' . $image, 'auto', 0775);
                        array_map('unlink', glob('media/images/content/' . $dir_image . '/*'));
                    }
                }

                $file_name = array();
                $imgstyle  = array();
                for ($i = 1; $i < 13; $i++) {
                    if ($this->upload->do_upload('image' . $i)) {
                        $uploadData = $this->upload->data();
                        if ($uploadData['is_image'] == TRUE) {
                            $file_name[$i] = $uploadData['file_name'];
                            //* Create thumbnail 1:1 */
                            $configCrop['source_image']   = $pathImage . $dir_image . '/' . $file_name[$i];
                            $configCrop['new_image']      = $pathImage . $dir_image . '/1x1_' . $file_name[$i];
                            $configCrop['maintain_ratio'] = FALSE;
                            $w                            = $uploadData['image_width'];
                            $h                            = $uploadData['image_height'];
                            if ($w > $h) {
                                $configCrop['width']  = $h;
                                $configCrop['height'] = $h;
                                $configCrop['x_axis'] = $w / 2 - $h / 2;
                                $configCrop['y_axis'] = 0;
                            }
                            if ($w < $h) {
                                $configCrop['width']  = $w;
                                $configCrop['height'] = $w;
                                $configCrop['x_axis'] = 0;
                                $configCrop['y_axis'] = $h / 2 - $w / 2;
                            }
                            if ($w == $h) {
                                $configCrop['width']  = $w;
                                $configCrop['height'] = $h;
                                $configCrop['x_axis'] = 0;
                                $configCrop['y_axis'] = 0;
                            }
                            $this->image_lib->initialize($configCrop);
                            $this->image_lib->crop();
                            $this->image_lib->clear();
                            //resize image to 450 x 450
                            $configResize['source_image']   = $pathImage . $dir_image . '/1x1_' . $file_name[$i];
                            $configResize['new_image']      = $pathImage . $dir_image . '/1x1_' . $file_name[$i];
                            $configResize['maintain_ratio'] = TRUE;
                            $configResize['width']          = 600;
                            $configResize['height']         = 600;
                            $this->image_lib->initialize($configResize);
                            $this->image_lib->resize();
                            $this->image_lib->clear();

                            /* resize image via width */
                            $configImage['source_image']   = $pathImage . $dir_image . '/' . $file_name[$i];
                            $configImage['new_image']      = $pathImage . $dir_image . '/' . $file_name[$i];
                            $configImage['maintain_ratio'] = TRUE;
                            $configImage['width']          = 800;
                            $configImage['height']         = 1;
                            $configImage['quality']        = 90;
                            $configImage['master_dim']     = 'width';
                            $this->image_lib->initialize($configImage);
                            $this->image_lib->resize();
                            $this->image_lib->clear();
                        }

                        // upload this image to other server
                        if (file_exists($pathImage . $dir_image . '/' . $file_name[$i])) {
                            $this->ftp->upload($pathImage . $dir_image . '/' . $file_name[$i], $path . '/' . $dir . '/' . $file_name[$i], 'auto', 0775);
                            $this->ftp->upload($pathImage . $dir_image . '/1x1_' . $file_name[$i], $path . '/' . $dir . '/1x1_' . $file_name[$i], 'auto', 0775);
                            array_map('unlink', glob('media/images/content/' . $dir_image . '/*'));
                        }
                    } else {
                        $file_name[$i] = $this->input->post('image_old' . $i);
                    }

                    $imgstyle[$i]->background = $this->input->post('background' . $i);
                    $imgstyle[$i]->color      = $this->input->post('color' . $i);
                    $imgstyle[$i]->imgeffect  = $this->input->post('imgeffect' . $i);
                    $imgstyle[$i]->texteffect = $this->input->post('texteffect' . $i);
                    $imgstyle[$i]->display    = $this->input->post('display' . $i);

                    $imgstyle[$i]->text_1_image    = $this->input->post('text_1_image' . $i);
                    $imgstyle[$i]->text_2_image    = $this->input->post('text_2_image' . $i);
                    $imgstyle[$i]->text_3_image    = $this->input->post('text_3_image' . $i);
                    $imgstyle[$i]->bg_color        = $this->input->post('bg_color' . $i);
                    $imgstyle[$i]->ra_color        = $this->input->post('ra_color' . $i);
                    $imgstyle[$i]->rgba_color      = $this->input->post('rgba_color' . $i);
                    $imgstyle[$i]->text_color      = $this->input->post('text_color' . $i);
                    $imgstyle[$i]->text_position   = $this->input->post('text_position' . $i);
                    $imgstyle[$i]->text_font       = $this->input->post('text_font' . $i);
                    $imgstyle[$i]->text_effect_in  = $this->input->post('text_effect_in' . $i);
                    $imgstyle[$i]->text_effect_out = $this->input->post('text_effect_out' . $i);

                    $caption2 = array();
                    if (!empty($this->input->post('icon' . $i)) || !empty($this->input->post('title' . $i))) {
                        $countpostcaption2 = count($this->input->post('icon' . $i));
                        for ($j = 0; $j < $countpostcaption2; $j++) {
                            $caption2[$j]->icon   = $this->input->post('icon' . $i)[$j];
                            $caption2[$j]->posi   = $this->input->post('posi' . $i)[$j];
                            $caption2[$j]->effect = $this->input->post('effect' . $i)[$j];
                            $caption2[$j]->title  = $this->input->post('title' . $i)[$j];
                            $caption2[$j]->desc   = $this->input->post('desc' . $i)[$j];
                        }
                        $imgstyle[$i]->caption2 = $caption2;
                    }
                }


                // Quang Cao
                $not_ad->ad_status = $this->input->post('ad_status');
                if ($this->upload->do_upload('ad_image')) {
                    $uploadData = $this->upload->data();
                    if ($uploadData['is_image'] == TRUE) {
                        $file_ad = $uploadData['file_name'];
                        /*resize image via width*/
                        $configImage['source_image']   = $pathImage . $dir_image . '/' . $file_ad;
                        $configImage['new_image']      = $pathImage . $dir_image . '/' . $file_ad;
                        $configImage['maintain_ratio'] = TRUE;
                        $configImage['width']          = 800;
                        $configImage['height']         = 1;
                        $configImage['quality']        = 90;
                        $configImage['master_dim']     = 'width';
                        $this->image_lib->initialize($configImage);
                        $this->image_lib->resize();
                        $this->image_lib->clear();
                    }

                    // upload this image to other server
                    if (file_exists($pathImage . $dir_image . '/' . $file_ad)) {
                        $this->ftp->upload($pathImage . $dir_image . '/' . $file_ad, $path . '/' . $dir . '/' . $file_ad, 'auto', 0775);
                        array_map('unlink', glob('media/images/content/' . $dir_image . '/*'));
                    }

                    $not_ad->ad_image = $file_ad;
                } else {
                    $not_ad->ad_image = $this->input->post('ad_image_old');
                }

                $not_ad->ad_link = $this->input->post('ad_link');
                if ($this->input->post('ad_title1') != '' || $this->input->post('ad_desc1') != '') {
                    $a[0]->title = $this->input->post('ad_title1');
                    $a[0]->desc  = $this->input->post('ad_desc1');
                }
                if ($this->input->post('ad_title1') != '' || $this->input->post('ad_desc1') != '') {
                    $a[1]->title = $this->input->post('ad_title2');
                    $a[1]->desc  = $this->input->post('ad_desc2');
                }
                if ($this->input->post('ad_title1') != '' || $this->input->post('ad_desc1') != '') {
                    $a[2]->title = $this->input->post('ad_title3');
                    $a[2]->desc  = $this->input->post('ad_desc3');
                }
                $not_ad->ad_content = $a;

                $not_ad->ad_time    = $this->input->post('ad_time');
                $not_ad->ad_display = $this->input->post('ad_display');


                $not_additional        = array();
                $count_post_additional = count($this->input->post('icon'));
                //echo $count_post_additional; die;
                if ($count_post_additional > 0) {
                    for ($i = 0; $i < $count_post_additional; $i++) {
                        $not_additional[$i]->icon  = $this->input->post('icon')[$i];
                        $not_additional[$i]->posi  = $this->input->post('posi')[$i];
                        $not_additional[$i]->title = $this->input->post('title')[$i];
                        $not_additional[$i]->desc  = $this->input->post('desc')[$i];
                    }
                }


                // image mô tả
                if ($this->upload->do_upload('img_statistic')) {
                    $uploadData = $this->upload->data();
                    if ($uploadData['is_image'] == TRUE) {
                        $img_statistic = $uploadData['file_name'];
                        /*resize image via width*/
                        $configImage['source_image']   = $pathImage . $dir_image . '/' . $img_statistic;
                        $configImage['new_image']      = $pathImage . $dir_image . '/' . $img_statistic;
                        $configImage['maintain_ratio'] = TRUE;
                        $configImage['width']          = 800;
                        $configImage['height']         = 1;
                        $configImage['quality']        = 90;
                        $configImage['master_dim']     = 'width';
                        $this->image_lib->initialize($configImage);
                        $this->image_lib->resize();
                        $this->image_lib->clear();
                    }
                    // upload this image to other server 
                    if (file_exists($pathImage . $dir_image . '/' . $img_statistic)) {
                        $this->ftp->upload($pathImage . $dir_image . '/' . $img_statistic, $path . '/' . $dir . '/' . $img_statistic, 'auto', 0775);
                        array_map('unlink', glob('media/images/content/' . $dir_image . '/*'));
                    }
                }
                // end image mô tả 

                // START y kien khach hang
                $not_customer->cus_status     = $this->input->post('cus_status');
                $not_customer->cus_title      = $this->input->post('cus_title');
                $not_customer->cus_color      = $this->input->post('cus_color');
                $not_customer->cus_background = $this->input->post('cus_background');


                $customer = array();
                foreach ($_FILES['cus_avatar']['name'] as $i => $val) {
                    $_FILES['avatar[]']['name']     = $_FILES['cus_avatar']['name'][$i];
                    $_FILES['avatar[]']['type']     = $_FILES['cus_avatar']['type'][$i];
                    $_FILES['avatar[]']['tmp_name'] = $_FILES['cus_avatar']['tmp_name'][$i];
                    $_FILES['avatar[]']['error']    = $_FILES['cus_avatar']['error'][$i];
                    $_FILES['avatar[]']['size']     = $_FILES['cus_avatar']['size'][$i];
                    if ($this->upload->do_upload('avatar[]')) {
                        $uploadData = $this->upload->data();
                        if ($uploadData['is_image'] == TRUE) {
                            $cus_avatar = $uploadData['file_name'];
                            // Crop image square
                            $configCrop['source_image']   = $pathImage . $dir_image . '/' . $cus_avatar;
                            $configCrop['new_image']      = $pathImage . $dir_image . '/' . $cus_avatar;
                            $configCrop['maintain_ratio'] = FALSE;
                            $w                            = $uploadData['image_width'];
                            $h                            = $uploadData['image_height'];
                            if ($w > $h) {
                                $configCrop['width']  = $h;
                                $configCrop['height'] = $h;
                                $configCrop['x_axis'] = $w / 2 - $h / 2;
                                $configCrop['y_axis'] = 0;
                            }
                            if ($w < $h) {
                                $configCrop['width']  = $w;
                                $configCrop['height'] = $w;
                                $configCrop['x_axis'] = 0;
                                $configCrop['y_axis'] = $h / 2 - $w / 2;
                            }
                            if ($w == $h) {
                                $configCrop['width']  = $w;
                                $configCrop['height'] = $h;
                                $configCrop['x_axis'] = 0;
                                $configCrop['y_axis'] = 0;
                            }
                            $this->image_lib->initialize($configCrop);
                            $this->image_lib->crop();
                            $this->image_lib->clear();

                            /*resize image via width*/
                            $configImage['source_image']   = $pathImage . $dir_image . '/' . $cus_avatar;
                            $configImage['new_image']      = $pathImage . $dir_image . '/' . $cus_avatar;
                            $configImage['maintain_ratio'] = TRUE;
                            $configImage['width']          = 1;
                            $configImage['height']         = 200;
                            $configImage['quality']        = 90;
                            $configImage['master_dim']     = 'height';
                            $this->image_lib->initialize($configImage);
                            $this->image_lib->resize();
                            $this->image_lib->clear();
                        }
                        // upload this image to other server 
                        if (file_exists($pathImage . $dir_image . '/' . $cus_avatar)) {
                            $this->ftp->upload($pathImage . $dir_image . '/' . $cus_avatar, $path . '/' . $dir . '/' . $cus_avatar, 'auto', 0775);
                            $this->ftp->delete_file($path . '/' . $dir . '/' . $this->input->post('cus_avatar_old')[$i]);
                        }
                    } else {
                        $cus_avatar = $this->input->post('cus_avatar_old')[$i];
                    }
                    $customer[$i]->cus_avatar   = $cus_avatar;
                    $customer[$i]->cus_text1    = $this->input->post('cus_text1')[$i];
                    $customer[$i]->cus_text2    = $this->input->post('cus_text2')[$i];
                    $customer[$i]->cus_text3    = $this->input->post('cus_text3')[$i];
                    $customer[$i]->cus_facebook = $this->input->post('cus_facebook')[$i];
                    $customer[$i]->cus_twitter  = $this->input->post('cus_twitter')[$i];
                    $customer[$i]->cus_google   = $this->input->post('cus_google')[$i];
                    $customer[$i]->cus_link     = $this->input->post('cus_link')[$i];
                }
                $not_customer->cus_list = $customer;

                // END y kien khach hang


                if ($_FILES['video']['name'] != '') {
                    $aTypeVideo = array(
                        'video/mp4' => '.mp4',
                        'video/mpeg' => '.mpeg',
                    );
                    $fVideo     = $_FILES['video'];
                    $sVideoName = uniqid() . time() . uniqid();
                    $this->ftp->upload($fVideo['tmp_name'], 'public_html/video/' . $sVideoName . $aTypeVideo[$fVideo['type']], 0755);
                    $videoname = $sVideoName . $aTypeVideo[$fVideo['type']];
                    // remove old_video
                    $this->ftp->delete_file('public_html/video/' . $this->input->post('video_old'));
                } else {
                    $videoname = $this->input->post('video_old');
                }
                // Delete directory 
                if (file_exists('media/images/content/' . $dir_image . '/index.html')) {
                    @unlink('media/images/content/' . $dir_image . '/index.html');
                }
                array_map('unlink', glob('media/images/content/' . $dir_image . '/*'));
                @rmdir('media/images/content/' . $dir_image);

                $this->ftp->close();


                #Load view
                $folder   = folderWeb;
                $path_dir = $_SERVER['DOCUMENT_ROOT'] . $folder . "/images";
                if ($opendir = opendir($path_dir)) {
                    $images = array();
                    while (($file = readdir($opendir)) !== FALSE) {
                        if ($file != "." && $file != "..") {
                            $pathinfo = pathinfo($file);
                            if (isset($pathinfo['extension'])) {
                                $ext = strtolower($pathinfo['extension']);
                            } else {
                                $ext = '';
                            }
                            if ($ext == 'jpg' || $ext == 'jpeg' || $ext == 'png' || $ext == 'gif') {
                                $images["$file"] = $file;
                            }
                        }
                    }
                }
                $data['images'] = $images;


                $dataEdit = array(
                    'not_title' => trim($this->filter->injection_html($this->input->post('title_content'))),
                    'not_description' => $this->input->post('description'),
                    'not_keywords' => $this->input->post('keywords'),
                    'not_group' => $this->filter->injection($group_id),
                    'id_category' => 16,
                    'not_degree' => 1,
                    'not_detail' => $this->input->post('txtContent'),
                    'not_additional' => json_encode($not_additional),
                    'not_display' => (int)$this->input->post('not_display'),
                    'not_enddate' => 0,
                    'cat_type' => 1,
                    'not_image' => $image,
                    'not_image1' => $file_name[1], 'imgtitle1' => $this->input->post('imgtitle1'), 'imglink1' => (int)$this->input->post('imglink1'), 'linkdetail1' => $this->input->post('linkdetail1'), 'imgcaption1' => str_replace("\r\n", '', $this->input->post('imgcaption1')), 'imgstyle1' => json_encode($imgstyle[1]),
                    'not_image2' => $file_name[2], 'imgtitle2' => $this->input->post('imgtitle2'), 'imglink2' => (int)$this->input->post('imglink2'), 'linkdetail2' => $this->input->post('linkdetail2'), 'imgcaption2' => str_replace("\r\n", '', $this->input->post('imgcaption2')), 'imgstyle2' => json_encode($imgstyle[2]),
                    'not_image3' => $file_name[3], 'imgtitle3' => $this->input->post('imgtitle3'), 'imglink3' => (int)$this->input->post('imglink3'), 'linkdetail3' => $this->input->post('linkdetail3'), 'imgcaption3' => str_replace("\r\n", '', $this->input->post('imgcaption3')), 'imgstyle3' => json_encode($imgstyle[3]),
                    'not_image4' => $file_name[4], 'imgtitle4' => $this->input->post('imgtitle4'), 'imglink4' => (int)$this->input->post('imglink4'), 'linkdetail4' => $this->input->post('linkdetail4'), 'imgcaption4' => str_replace("\r\n", '', $this->input->post('imgcaption4')), 'imgstyle4' => json_encode($imgstyle[4]),
                    'not_image5' => $file_name[5], 'imgtitle5' => $this->input->post('imgtitle5'), 'imglink5' => (int)$this->input->post('imglink5'), 'linkdetail5' => $this->input->post('linkdetail5'), 'imgcaption5' => str_replace("\r\n", '', $this->input->post('imgcaption5')), 'imgstyle5' => json_encode($imgstyle[5]),
                    'not_image6' => $file_name[6], 'imgtitle6' => $this->input->post('imgtitle6'), 'imglink6' => (int)$this->input->post('imglink6'), 'linkdetail6' => $this->input->post('linkdetail6'), 'imgcaption6' => str_replace("\r\n", '', $this->input->post('imgcaption6')), 'imgstyle6' => json_encode($imgstyle[6]),
                    'not_image7' => $file_name[7], 'imgtitle7' => $this->input->post('imgtitle7'), 'imglink7' => (int)$this->input->post('imglink7'), 'linkdetail7' => $this->input->post('linkdetail7'), 'imgcaption7' => str_replace("\r\n", '', $this->input->post('imgcaption7')), 'imgstyle7' => json_encode($imgstyle[7]),
                    'not_image8' => $file_name[8], 'imgtitle8' => $this->input->post('imgtitle8'), 'imglink8' => (int)$this->input->post('imglink8'), 'linkdetail8' => $this->input->post('linkdetail8'), 'imgcaption8' => str_replace("\r\n", '', $this->input->post('imgcaption8')), 'imgstyle8' => json_encode($imgstyle[8]),
                    'not_image9' => $file_name[9], 'imgtitle9' => $this->input->post('imgtitle9'), 'imglink9' => (int)$this->input->post('imglink9'), 'linkdetail9' => $this->input->post('linkdetail9'), 'imgcaption9' => str_replace("\r\n", '', $this->input->post('imgcaption9')), 'imgstyle9' => json_encode($imgstyle[9]),
                    'not_image10' => $file_name[10], 'imgtitle10' => $this->input->post('imgtitle10'), 'imglink10' => (int)$this->input->post('imglink10'), 'linkdetail10' => $this->input->post('linkdetail10'), 'imgcaption10' => str_replace("\r\n", '', $this->input->post('imgcaption10')), 'imgstyle10' => json_encode($imgstyle[10]),
                    'not_image11' => $file_name[11], 'imgtitle11' => $this->input->post('imgtitle11'), 'imglink11' => (int)$this->input->post('imglink11'), 'linkdetail11' => $this->input->post('linkdetail11'), 'imgcaption11' => str_replace("\r\n", '', $this->input->post('imgcaption11')), 'imgstyle11' => json_encode($imgstyle[11]),
                    'not_image12' => $file_name[12], 'imgtitle12' => $this->input->post('imgtitle12'), 'imglink12' => (int)$this->input->post('imglink12'), 'linkdetail12' => $this->input->post('linkdetail12'), 'imgcaption12' => str_replace("\r\n", '', $this->input->post('imgcaption12')), 'imgstyle12' => json_encode($imgstyle[12]),
                    'not_dir_image' => $dir,
                    'not_video_url' => $this->input->post('youtube'),
                    'not_video_url1' => $videoname,
                    'not_pro_cat_id' => (int)$this->input->post('category0'),
                    'not_news_hot' => (int)$this->input->post('not_news_hot'),
                    'not_news_sale' => (int)$this->input->post('not_news_sale'),
                    'not_slideshow' => (int)$this->input->post('slideshow'),
                    'not_effect' => $this->input->post('effect'),
                    'not_music' => $this->input->post('music'),
                    'not_ad' => json_encode($not_ad),
                    'statistic' => json_encode($this->input->post('statistic')),
                    'not_statistic' => (int)$this->input->post('not_statistic'),
                    'not_customer' => json_encode($not_customer),
                    'not_posted_by' => 'website' // or app

                );

                if (isset($img_statistic)) {
                    $dataEdit['img_statistic'] = $img_statistic;
                }


                if ($this->content_model->update($dataEdit, 'not_id = ' . (int)$idnew)) {
                    $this->session->set_flashdata('sessionSuccessEditAccount', 1);
                }

                redirect(base_url() . 'account/news', 'location');

            } else {

                $data['title_content']  = $this->input->post('title_content');
                $data['txtContent']     = $this->input->post('txtContent');
                $data['active_content'] = $this->input->post('active_content');
            }
        }
        // Load shop's products
        $data['products'] = $this->product_model->fetch("pro_category, pro_id, pro_name, pro_image, pro_dir, pro_type", "pro_type IN(0,2)  AND pro_status = 1 AND pro_user = " . $iShopId, "pro_type", "ASC", null, null);

        $cat_level_0       = $this->category_model->fetch("*", "parent_id = 0 AND cat_status = 1 AND cate_type = 2", "cat_service, cat_order, cat_id", "ASC");
        $data['catlevel0'] = $cat_level_0;
        #load view

        $this->load->view('home/account/news/edit', $data);
    }

    // tung end add
    function listnews()
    {
        $group_id = (int)$this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser || $group_id == BranchUser || $group_id == StaffStoreUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        $iUserId = (int)$this->session->userdata('sessionUser');
        $iShopId = (int)$this->session->userdata('sessionUser');

        if($group_id == StaffStoreUser) {
            $oUser = $this->user_model->get("*","use_id = " . $iUserId  . ' AND use_status = 1');
            $iUserId = $oUser->parent_id;
            $iShopId = $oUser->parent_shop;
            
            if(!empty($oUser)) {
                $oShop = $this->user_model->get("*","use_id = " . $oUser->parent_id  . ' AND use_status = 1');
                if(!empty($oShop) && $oShop->use_group == 3) {
                    // Tự động active khi nhân viên của gian hàng
                    $data['PermissionStoreUser'] = true;
                    $iUserId = $oUser->parent_id;
                    $iShopId = $oUser->parent_id;
                }
            }   
        }

	    $data['menuPanelGroup'] = 4;
        $data['group_id'] = $group_id;
        $data['menuSelected'] = 'news';
        $data['menuType'] = 'account';
        $action = array('search', 'keyword', 'filter', 'key', 'sort', 'by', 'page', 'status', 'id');
        $getVar = $this->uri->uri_to_assoc(3, $action);

        #If have page
        #END Search & Filter
        #BEGIN: Create link sort
        $pageSort = '';
        $pageUrl = '';
        #END Create link sort
        #BEGIN: Status
        $statusUrl = $pageUrl . $pageSort;
        $data['statusUrl'] = base_url() . 'account/news' . $statusUrl;
        $data['menuSelected'] = 'news';
        $data['menuType'] = 'account';

        $this->load->model('content_model');
        $this->load->model('content_category_model');
        $shop = $this->shop_model->get("*", "sho_user = " . $iUserId);
        $data['shop'] = $shop;
        $data['shopid'] = $shop->sho_id;
        if ($getVar['status'] != FALSE && trim($getVar['status']) != '' && $getVar['id'] != FALSE && (int)$getVar['id'] > 0) {
            switch (strtolower($getVar['status'])) {
                case 'active':

                    $this->content_model->update(array('not_status' => 1), "not_id = " . (int)$getVar['id']);
                    break;
                case 'deactive':
                    $this->content_model->update(array('not_status' => 0), "not_id = " . (int)$getVar['id']);
                    break;
            }
            redirect($data['statusUrl'], 'location');
        }
        $sort = 'not_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'title':
                    $pageUrl .= '/sort/title';
                    $sort = "name";
                    break;
                case 'nhanvien':
                    $pageUrl .= '/sort/nhanvien';
                    $sort = "use_username";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/news' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $limmit = settingOtherAccount; // -1 all
        $data['listnews'] = $this->content_model->fetch('*', 'not_user =' . $iUserId, $sort, $by, $start, $limmit);
        $totalRecord = count($this->content_model->fetch('*', 'not_user =' . $iUserId, $sort, $by, '', ''));
        $config['base_url'] = base_url() . 'account/news' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limmit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        //print_r($data);
        $this->load->view('home/account/news/listnews', $data);
    }

    function tree()
    {
        $this->load->model('user_tree_model');

        $root_user = $this->session->userdata('sessionUser');
        $user_id = $this->uri->segment(3); // co userid tren link

        if ($user_id > 0) {
            $root_user = $user_id;
        }
        if ($root_user > 0) {
            $rootUser = $this->user_model->get("use_id, use_username", "use_id = " . $root_user);
            $data['rootUser'] = $rootUser;
        }
        $html = '';
        $htmlTree = $this->getHTMLTree($root_user, $html);
        $data['htmlTree'] = $html;
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'tree';
	    $data['menuPanelGroup'] = 4;

        $this->load->view('home/account/tree/defaults', $data);
    }

    function getListChild_Tree($userid)
    {
        $this->load->model('user_tree_model');
        if ($userid > 0) {
            $listChild = $this->user_tree_model->fetch_join("tbtt_user_tree.*, tbtt_user.use_id, tbtt_user.use_username, tbtt_user.use_fullname", "INNER", "tbtt_user", "tbtt_user.use_id = tbtt_user_tree.user_id", "parent=" . $userid);
            return $listChild;
        }
    }

    function getChild($userid)
    {
        $this->load->model('user_tree_model');
        if ($userid > 0) {
            $userObject = $this->user_tree_model->get("*", "user_id = " . $userid);
            return $userObject->child;
        } else {
            return 0;
        }
    }

    function getNextList($child, &$list_next = array())
    {
        $this->load->model('user_tree_model');
        $userObject = $this->user_tree_model->get("*", "user_id = " . $child);
        if ($userObject->next > 0) {
            $list_next[] = $userObject->next;
        }
        if ($userObject->next > 0) {
            $this->getNextList($userObject->next, $list_next);
        } else {
            return $list_next;
        }
    }

    function getListChildTree($userid, &$list_child = array())
    {
        $child = $this->getChild($userid);
        if ($child > 0) {
            $list_child[] = $child;
            $this->getNextList($child, $list_child);
        } else {
            return 0;
        }
    }

    function getHTMLTree($userid, &$htmlTree)
    {
        $listChild = array();
        $this->getListChildTree($userid, $listChild);

        $listUser = array();
        foreach ($listChild as $child) {
            if ($child > 0) {
                $userObject = $this->user_model->get("use_id, use_username, use_fullname", "use_id = " . $child);
                $listUser[] = $userObject;
            }
        }
        if (count($listUser) > 0) {
            $htmlTree .=
                '<ul>';
            foreach ($listUser as $child) {
                if ($child->use_id > 0) {
                    $htmlTree .= '
                    <li> <span><i class="icon-folder-open"></i>' . $child->use_username . '</span> <a href="' . base_url() . 'account/tree/' . $child->use_id . '">' . $child->use_fullname . '</a>';
                    $htmlTree .= $this->getHTMLTree($child->use_id, $htmlTree);
                    $htmlTree .= '</li>
                        ';
                }
            }
            $htmlTree .= '</ul>';
        }
    }

    function getTreeInList($userid, &$allChild)
    {
        $listChild = array();
        $this->getListChildTree($userid, $listChild);
        foreach ($listChild as $child) {
            if ($child > 0) {
                $allChild[] = $child;
                $this->getTreeInList($child, $allChild);
            }
        }
    }

    function treelist()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
        ) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $root_user = $this->session->userdata('sessionUser');
        $user_id = $this->uri->segment(3); // co userid tren link

        if ($user_id > 0) {
            $root_user = $user_id;
        }
        if ($root_user > 0) {
            $rootUser = $this->user_model->get("use_id, use_username", "use_id = " . $root_user);
            $data['rootUser'] = $rootUser;
        }

        $listChild = array();
        $this->getTreeInList($root_user, $listChild);
        $strUserId = implode($listChild, ",");

        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        if ($user_id > 0) {
            $getVar = $this->uri->uri_to_assoc(4, $action);
        } else {
            $getVar = $this->uri->uri_to_assoc(3, $action);
        }

        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "use_fullname";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        if ($user_id > 0) {
            $data['sortUrl'] = base_url() . 'account/treelist/' . $user_id . $sortUrl . '/sort/';
        } else {
            $data['sortUrl'] = base_url() . 'account/treelist' . $sortUrl . '/sort/';
        }
        $data['pageSort'] = $pageSort;
        $where = '';
        if ($strUserId != '') {
            $where = 'use_id IN (' . $strUserId . ')';
        } else {
            $where = '0 > 1';
        }

        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $totalRecord = count($this->user_model->fetch("use_id", $where, "", ""));
        if ($user_id > 0) {
            $config['base_url'] = base_url() . 'account/treelist/' . $user_id . $pageUrl . '/page/';
        } else {
            $config['base_url'] = base_url() . 'account/treelist' . $pageUrl . '/page/';
        }
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        if ($user_id > 0) {
            $config['uri_segment'] = 4;
        } else {
            $config['uri_segment'] = 3;
        }

        $limmit = -1;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $limit = settingOtherAccount;
        $userTree = $this->user_model->fetch('use_id, use_username, use_fullname, use_email, use_mobile, use_group, parent_id', $where, $sort, $by, $start, $limit);
        $kk = 0;
        foreach ($userTree as $userObject) {
            if ($userObject->parent_id > 0) {
                $userParent = $this->user_model->get('use_id, use_username', 'use_id = ' . $userObject->parent_id);
                $parent = new stdClass();
                $parent->parent_id = $userParent->use_id;
                $parent->parent_username = $userParent->use_username;
            } else {
                $parent = new stdClass();
                $parent->parent_id = 0;
                $parent->parent_username = '';
            }

            $parentList[] = $parent;
            $kk++;
        }
        $data['parentList'] = $parentList;
        $data['staffs'] = $userTree;
        #Load view
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'tree';
        $this->load->view('home/account/tree/list', $data);
    }

    function invite_tree()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == StaffUser
            || $group_id == BranchUser
            || $group_id == StaffStoreUser
        ) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $userId = (int)$this->session->userdata('sessionUser');
        $data['userId'] = $userId;
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'tree';
        $data['menuPanelGroup'] = 4;
		$data['menuSelected'] = 'affiliate';
        $this->load->view('home/account/tree/invite', $data);
    }

    function request_member()
    {
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'tree';
        $this->load->view('home/account/tree/requestmember', $data);
    }

    // Yeu cau nang cap thanh vien
    function require_uprated_member()
    {
        $userId = (int)$this->session->userdata('sessionUser');
        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page', 'require');
        $getVar = $this->uri->uri_to_assoc(4, $action);
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "use_fullname";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/tree/uprated/' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination
        $groupid = $this->session->userdata('sessionGroup');
        $listChild = array();
        $this->getTreeInList($userId, $listChild);
        $listp = implode(',', $listChild);
        $listp = $listp;
        $where = '';
        switch ($groupid) {
            case 8:
                $where = 'parent_id = ' . $userId . ' AND use_group = 6';
                break;
            case 9:
                $where = '(parent_id = ' . $userId . ' AND use_group IN(6,7)) OR (parent_id IN(' . $listp . ') AND use_group = 6)';
                break;
            case 10:
                $where = '(parent_id = ' . $userId . ' AND use_group IN(6,7,8)) OR (parent_id IN(' . $listp . ') AND use_group IN(6,7))';
                break;
            case 12:
                $where = '(parent_id = ' . $userId . ' AND use_group IN(6,7,8,9)) OR (parent_id IN(' . $listp . ') AND use_group IN(6,7,8))';
                break;
        }
        $this->load->model('uprated_model');
        if ($this->input->post('level_list') != '' && $this->input->post('usid') != '') {
            $dataAdd = array(
                'user_require' => $userId,
                'user_allow_uprated' => (int)$this->input->post('usid'),
                'level_require' => (int)$this->input->post('level_list'),
                'created' => time(),
                'updated' => '',
                'status' => 0
            );
            $insert = $this->uprated_model->add($dataAdd);
            if ($insert) {
                redirect(base_url() . "account/tree/uprated", 'location');
            }
        }
        $arrry = array();
        $list_require = $this->uprated_model->fetch('*', '', "", "", "", "");
        foreach ($list_require as $item) {
            array_push($arrry, $item->user_allow_uprated);
        }
        $data['list_allow'] = $arrry;

        $select = '*';
        $table = 'tbtt_require_uprated';
        $onjoin = 'LEFT';
        $on = 'tbtt_user.use_id = tbtt_require_uprated.user_allow_uprated';
        $this->load->library('pagination');
        #Count total record
        $limmit = 15;
        $totalRecord = count($this->user_model->fetch_join($select, $onjoin, $table, $on, $where, "", "", 0, -1));
        $config['base_url'] = base_url() . 'account/tree/uprated/' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limmit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'tree';
        $this->load->model('uprated_model');
        $list = $this->user_model->fetch_join($select, $onjoin, $table, $on, $where, "", "", $start, $limmit);
        $data['list_up'] = $list;
        $this->load->view('home/account/tree/requireuprated', $data);
    }

    function statistic()
    {
        $parent_id = 0;
        $parent_group = 0;
        $user_id_arr = array((int)$this->session->userdata('sessionUser'));
        // $userId = $this->session->userdata('sessionUser');
        if ($this->session->userdata('sessionUser') < 0) {
            redirect(base_url() .'login', 'location'); die;
        }
        $group_id = $this->session->userdata('sessionGroup');
        if($group_id == StaffStoreUser) {
            $user_id = $this->user_model->get("parent_id", "use_id = " . $this->session->userdata('sessionUser'))->parent_id;
            $user_group = $this->user_model->get("use_group", "use_id = " . $user_id)->use_group;
            $user_id_arr = array($user_id);
        } else {
            $user_id = $this->session->userdata('sessionUser');
            $user_group = $this->session->userdata('sessionGroup');
        }

        $data['menuPanelGroup'] = 4;
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'statistic';
        $currentDate_first = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        $currentDate_after = mktime(23, 59, 59, date('m'), date('d'), date('Y'));      
        $tree = array();
        $saler = '';
        $id = $this->stringMyBranch($user_id);
        $tree[] = $user_id;               

        if ($this->session->userdata('sessionGroup') == AffiliateUser) {
            $getp = $this->user_model->fetch('use_id, parent_id', 'use_id = '. $user_id);
            $getafALL = $this->user_model->fetch('use_id', 'use_group = '. AffiliateUser .' AND parent_id IN('. $id .')'); // lấy CTVs của tất cả chi nhánh hoặc của nhân viên
            $or_saler .= $getp[0]->parent_id;
            if (!empty($getafALL)) {
                foreach ($getafALL as $key => $value) {
                    //Nếu là chi nhánh, lấy danh sách nhân viên
                    $tree[] = $value->use_id;
                }
            }
            $or_saler = implode(',', $tree);
            if ($this->session->userdata('sessionGroup') == AffiliateUser ) {
                $where_order = '(tbtt_showcart.af_id IN('. $or_saler .')';                
            } else {
                $p_saler = ',' . $getp[0]->use_id;
                if ($getp[0]->parent_id != '') {
                    $p_saler .= ',' . $getp[0]->parent_id;
                }                
                if ($this->session->userdata('sessionGroup') != StaffUser) {
                    $where_order = '(order_saler IN('. $id . $p_saler .') OR tbtt_showcart.af_id IN(' . $or_saler . ')';
                } else {
                    $where_order = 'tbtt_showcart.af_id IN('. $or_saler;
                }
            }
        }
        
        // if ($this->session->userdata('sessionGroup') == AffiliateStoreUser 
        //     || $this->session->userdata('sessionGroup') == StaffStoreUser 
        //     || $this->session->userdata('sessionGroup') == StaffUser) {
        //     $idCN = implode(",", $tree);
        //     $saler = ' AND ((tbtt_showcart.shc_saler = '. $GH .' AND pro_of_shop = 0)';
        //     if (!empty($idCN)) {
        //         $saler .= ' OR ((tbtt_showcart.shc_saler IN('. $idCN .')) AND pro_of_shop > 0)';
        //     }
        //     $saler .= ')';           
        // } else {
        //     if ($this->session->userdata('sessionGroup') == BranchUser) {
        //         $saler = ' AND tbtt_showcart.shc_saler = '. $this->session->userdata('sessionUser');
        //     }
        // }

        // if ($this->session->userdata('sessionGroup') == BranchUser 
        //     || $this->session->userdata('sessionGroup') == AffiliateUser) {
        //     $where_order = 'tbtt_showcart.shc_status IN(01,02,03,98)';
        // } else {
        //     $where_order = ' tbtt_showcart.shc_status IN(01,02,03,98)' . $saler;
        // } 
        
        // tong so san pham het hang  
        $data['products'] = count($this->product_model->fetch('pro_id', 'pro_status = 1 AND pro_instock = 0 AND pro_user = '. $user_id));      
        // if($group_id == StaffStoreUser) {
        //     $data['products'] = count($this->product_model->fetch('pro_id', 'pro_status = 1 AND pro_instock = 0 AND pro_user = '. $parent_id));
        // } else {
        //     $data['products'] = count($this->product_model->fetch('pro_id', 'pro_status = 1 AND pro_instock = 0 AND pro_user = '. $this->session->userdata('sessionUser')));
        // }

        // Tong so affiliate
        $data['listaf'] = count($this->user_model->fetch('use_id', 'use_group = 2 AND (parent_id IN('. $id .') OR parent_id = '. $user_id .') AND use_status = 1'));
        // if($group_id == StaffStoreUser) {
        //     $data['listaf'] = count($this->user_model->fetch('use_id', 'use_group = 2 AND (parent_id IN('. $id .') OR parent_id = '. $parent_id .') AND use_status = 1'));
        // } else {
        //     $data['listaf'] = count($this->user_model->fetch('use_id', 'use_group = 2 AND (parent_id IN('. $id .') OR parent_id = '. $this->session->userdata('sessionUser') .') AND use_status = 1'));
        // }
        
        //tổng doanh thu đơn hàng
        $this->load->library('utilSlv');
        $this->util = new utilSlv();
        $this->load->model('statistics_model');         
        $q = isset($_REQUEST['q']) ? trim($_REQUEST['q']) : '';        
        $data['page'] = array(
            'title' => 'Thống kê tổng doanh thu đơn hàng'
        );

        if ($this->input->post('daterange')) {
            $date_range = explode("_", $this->input->post('date_range'));
            $begin_date = $date_range[0] .' 00:00:00';
            $end_date = $date_range[1] .' 23:59:00';

            $_begin_date = $date_range[0];
            $_end_date = $date_range[1];

            $data['daterange'] = $this->input->post('daterange');
            $data['date_range'] = $this->input->post('date_range');
        } else {
            //mặc định cách 1 tuần
            $begin_date = date("Y-m-d 00:00:00", strtotime("-1 week"));
            $end_date = date("Y-m-d 23:59:00");

            $_begin_date = date("Y-m-d", strtotime("-1 week"));
            $_end_date = date("Y-m-d");
        }

        $daunam = date("Y-01-01 00:00:00");
        $now = date("Y-m-d H:i:s");
        $yesterday = date("Y-m-d", strtotime("-1 day"));
        $last_month = date("Y-m", strtotime("-1 month"));
        $end_yesterday = date("Y-m-d", strtotime("-1 day")) .' 23:59:00';
        $begin_yesterday = date("Y-m-d", strtotime("-1 day")) .' 00:00:00';
        $end_last_month = $last_month .'-'. date("t", strtotime($last_month .'-01')) .' 23:59:00';
        $begin_last_month = $last_month .'-01 00:00:00';// tong don hang moi

        $where_order = '(tbtt_showcart.shc_saler = '. $user_id .' OR (tbtt_showcart.shc_saler IN ('. $id .') AND tbtt_product.pro_of_shop > 0 ))';
        
        $data['totaldonhanghnay'] = count($this->order_model->fetch_join3('tbtt_order.id', 'INNER', 'tbtt_showcart', 'tbtt_showcart.shc_orderid = tbtt_order.id', 'LEFT', 'tbtt_product', 'tbtt_product.pro_id = tbtt_showcart.shc_product', $where_order .' AND tbtt_showcart.shc_status IN (01,02,03,98) AND change_status_date >= '. $currentDate_first . ' AND change_status_date <=' . $currentDate_after, '', '', '', '', '', 'tbtt_order.id'));

        // tong don hang
        $data['total_order'] = count($this->order_model->fetch_join3('tbtt_order.id', 'INNER', 'tbtt_showcart', 'tbtt_showcart.shc_orderid = tbtt_order.id', 'LEFT', 'tbtt_product', 'tbtt_product.pro_id = tbtt_showcart.shc_product', $where_order .' AND tbtt_showcart.shc_status IN (01,02,03,98)', '', '', '', '', '', 'tbtt_order.id'));        

        // tong don hang thanh cong
        $data['total_order_success'] = count($this->order_model->fetch_join3('tbtt_order.id', 'INNER', 'tbtt_showcart', 'tbtt_showcart.shc_orderid = tbtt_order.id', 'LEFT', 'tbtt_product', 'tbtt_product.pro_id = tbtt_showcart.shc_product', $where_order .' AND tbtt_showcart.shc_status = 98', '', '', '', '', '', 'tbtt_order.id'));

        // tong don hang huy
        $data['total_order_cancel'] = count($this->order_model->fetch_join3('tbtt_order.id', 'INNER', 'tbtt_showcart', 'tbtt_showcart.shc_orderid = tbtt_order.id', 'LEFT', 'tbtt_product', 'tbtt_product.pro_id = tbtt_showcart.shc_product', $where_order .' AND tbtt_showcart.shc_status = 99', '', '', '', '', '', 'tbtt_order.id'));
        
        //Doanh số hôm nay
        $total_re = $this->order_model->fetch_join3('shc_total', 'INNER', 'tbtt_showcart', 'tbtt_showcart.shc_orderid = tbtt_order.id', 'LEFT', 'tbtt_product', 'tbtt_showcart.shc_product = tbtt_product.pro_id', $where_order .' AND tbtt_showcart.shc_status IN (01,02,03,98) AND change_status_date >= '. $currentDate_first .' AND change_status_date <= '. $currentDate_after, '', '', '', '', '', '');
        $dshnay = 0;
        foreach ($total_re as $vl) {
            $dshnay += $vl->shc_total;
        }
        $data['total_re'] = $dshnay;

        //Doanh số hôm qua
        $total_hqua = $this->order_model->fetch_join3('shc_total', 'INNER', 'tbtt_showcart', 'tbtt_showcart.shc_orderid = tbtt_order.id', 'LEFT', 'tbtt_product', 'tbtt_showcart.shc_product = tbtt_product.pro_id', $where_order .' AND tbtt_showcart.shc_status IN (01,02,03,98) AND change_status_date <= ' . strtotime($end_yesterday) .' AND change_status_date >= '. strtotime($begin_yesterday), '', '', '', '', '', '');
        $tongHQ = 0;
        foreach ($total_hqua as $vl) {
            $tongHQ += $vl->shc_total;
        }
        $data['sales_yesterday'] = $tongHQ;

        //doanh số tháng trước
        $static_last_month = $this->statistics_model->getOrders(strtotime($begin_last_month), strtotime($end_last_month), '', $where_order); // . ' GROUP BY id'
        $tongTTrc = 0;
        foreach ($static_last_month as $vals) {
            $tongTTrc += $vals->shc_total;
        }
        $data['last_month'] = $tongTTrc;

        //doanh số tháng này
        $end_current_month = date("Y-m-d H:i:s");
        $begin_current_month = date("Y-m") .'-01 00:00:00';
        $static_current_month = $this->statistics_model->getOrders(strtotime($begin_current_month), strtotime($end_current_month), '', $where_order);
        $tongTNay = 0;
        foreach ($static_current_month as $vals) {
            $tongTNay += $vals->shc_total;
        }        
        $data['current_month'] = $tongTNay;

        // Tong doanh so        
        $total_dt = $this->order_model->fetch_join3('shc_total', 'INNER', 'tbtt_showcart', 'tbtt_showcart.shc_orderid = tbtt_order.id', 'LEFT', 'tbtt_product', 'tbtt_showcart.shc_product = tbtt_product.pro_id', $where_order . ' AND tbtt_showcart.shc_status IN (01,02,03,98)', '', '', '', '', '', '');
        $tongDT = 0;
        foreach ($total_dt as $vl) {
            $tongDT += $vl->shc_total;
        }

        $data['total'] = $tongDT;

        //Thu nhập hiện tại
        $data['current_earnings'] = $this->statistics_model->getCurrentEarningsStatistics('public', date("m-Y"), $user_id_arr);
        //Chart-----------------------------
        if ($this->input->post('options_tad') == "2") {
            $services_day['tad'] = "frm_revenues";
        } else {
            $services_day['tad'] = "frm_orders";
        }

        // if($group_id == StaffStoreUser) {
        //     $user_id = array($parent_id);
        // } else {
        //     $user_id = array($this->session->userdata('sessionUser'));
        // }
        $temp_uid = $user_id;
        $user_id = array($user_id);

        if ($this->session->userdata('sessionGroup') > 3 || ($group_id == StaffStoreUser && $user_group > 3)) {
            $model_aff = $this->user_model->fetch('use_id', 'use_group = 2 AND use_status = 1 AND parent_id IN ('. $temp_uid .')');
            $data['countAF'] = count($model_aff);
            $countShop = $this->shop_tree();
            $data['countShop'] = count($countShop[0]);
            $user_id = array_merge($user_id, $countShop[0]);
        }

        if ($services_day['tad'] == "frm_orders") {
            $dayx = $this->statistics_model->getQuantityOrder(strtotime($begin_date), strtotime($end_date), 'day', $where_order. ' AND tbtt_showcart.shc_status IN (01,02,03,98)');
            $monthx = $this->statistics_model->getQuantityOrder(strtotime($daunam), strtotime($end_date), 'month', $where_order. ' AND tbtt_showcart.shc_status IN (01,02,03,98)');
            $yearx = $this->statistics_model->getQuantityOrder(strtotime($daunam), strtotime($end_date), 'year', $where_order. ' AND tbtt_showcart.shc_status IN (01,02,03,98)');
            $services_day['title'] = "Thống kê tổng số lượng đơn hàng theo";
            $services_day['arrayToDataTable'] = "Số lượng";
        } else {
            $dayx = $this->statistics_model->getOrders(strtotime($begin_date), strtotime($end_date), 'day', $where_order. ' AND tbtt_showcart.shc_status IN (01,02,03,98)');
            $monthx = $this->statistics_model->getOrders(strtotime($daunam), strtotime($end_date), 'month', $where_order. ' AND tbtt_showcart.shc_status IN (01,02,03,98)');
            $yearx = $this->statistics_model->getOrders(strtotime($daunam), strtotime($end_date), 'year', $where_order. ' AND tbtt_showcart.shc_status IN (01,02,03,98)');
            $services_day['title'] = "Thống kê tổng doanh thu đơn hàng theo";
            $services_day['arrayToDataTable'] = "Đơn hàng";
        }

        foreach ($this->util->getDatesFromRange($_begin_date, $_end_date) as $vals) {
            $tongngay = 0;
            for ($i = 0; $i < count($dayx); $i++) {
                if ($dayx[$i]->updated_date == $vals) {
                    $tongngay += $dayx[$i]->shc_total;
                }
            }
            if ($tongngay) {
                $amountD = $tongngay;
            } else {
                $amountD = 0;
            }
            $services_day['dayx'] .= '["' . date("d-m-Y", strtotime($vals)) . '", ' . $amountD . ', "#a3a7b2"],';
        }

        //month
        foreach ($this->util->getMonthFromRange() as $valsM) {
            $tongthang = 0;
            for ($i = 0; $i < count($monthx); $i++) {
                if ($monthx[$i]->updated_date == $valsM) {
                    $tongthang += $monthx[$i]->shc_total;
                }
            }
            if ($tongthang) {
                $amountM = $tongthang;
            } else {
                $amountM = 0;
            }

            $services_day['monthx'] .= '["T' . $valsM . '", ' . $amountM . ', "#a3a7b2"],';
        }

        //year
        foreach ($this->util->getYearFromRange(date("Y", time())) as $valsY) {
            $tongnam = 0;
            for ($i = 0; $i < count($yearx); $i++) {
                if ($yearx[$i]->updated_date == $valsY) {
                    $tongnam += $yearx[$i]->shc_total; //order_total_no_shipping_fee;
                }
            }
            if ($tongnam) {
                $amountY = $tongnam;
            } else {
                $amountY = 0;
            }
            $services_day['yearx'] .= '["'. $valsY .'", '. $amountY .', "#a3a7b2"],';
        }

        $data['service_charts'] = $this->load->view('home/account/statistic/order_charts', $services_day, true);
        if (isset($_REQUEST) && $_REQUEST['show'] == "earn") {
            $data['group_3_charts'] = FALSE;
        } else {
            $data['group_3_charts'] = TRUE;
        }

        $data['CountGetAllOrder'] = $this->order_model->getOrderStatistic();
        $data['sales_last_month'] = $this->statistics_model->getOrdersStatistics($yesterday, $yesterday + 86400, 'day');
          
        #Load view
        $this->load->view('home/account/statistic/defaults', $data);
    }

    public function statisticIncome()
    {
        $this->load->library('utilSlv');
        $this->util = new utilSlv();
	
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'statistic';
        $this->load->model('statistics_model');
            
        $begin_date = date("Y-m-d 00:00:00", strtotime("-1 week"));
        $end_date = date("Y-m-d 23:59:00");
        $daunam = date("Y-01-01 00:00:00");

        $_begin_date = date("Y-m-d", strtotime("-1 week"));
        $_end_date = date("Y-m-d");
        $services_day = array();

        $group_id = $this->session->userdata('sessionGroup');
        if($group_id == StaffStoreUser) {
            $user_id = $this->user_model->get("parent_id", "use_id = " . $this->session->userdata('sessionUser'))->parent_id;
            $user_group = $this->user_model->get("use_group", "use_id = " . $user_id)->use_group;
        } else {
            $user_id = $this->session->userdata('sessionUser');
            $user_group = $this->session->userdata('sessionGroup');
        }

        if ($this->session->userdata('sessionGroup') == AffiliateStoreUser || ($this->session->userdata('sessionGroup') == StaffStoreUser && $user_group == AffiliateStoreUser)) {
            $tree = array();
            $GH = $user_id;
            // if ($this->session->userdata('sessionGroup') == StaffStoreUser) {
            //     $getp = $this->user_model->fetch('use_id,parent_id', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
            //     $tree[] = $GH = (int)$getp[0]->parent_id;
            // }
            $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $user_id);
            if (!empty($sub_tructiep)) {
                foreach ($sub_tructiep as $key => $value) {
                    //Nếu là chi nhánh, lấy danh sách nhân viên
                    // if ($value->use_group == StaffStoreUser) {
                    //     //Lấy danh sách CN dưới nó cua NVGH
                    //     $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                    //     if (!empty($sub_cn)) {
                    //         foreach ($sub_cn as $k => $vlue) {
                    //             $tree[] = $vlue->use_id;
                    //         }
                    //     }
                    // } else {
                    //     $tree[] = $value->use_id;
                    // }
                    $tree[] = $value->use_id;
                }
            }
            $id = implode(",", $tree);
            $saler = '((tbtt_showcart.shc_saler=' . $GH . ' AND pro_of_shop=0)';
            if (!empty($id)) {
                $saler .= ' OR ((tbtt_showcart.shc_saler IN(' . $id . ')) AND pro_of_shop>0)';
            }
            $saler .= ')';
        } else {
            if(($this->session->userdata('sessionGroup') == BranchUser) || ($this->session->userdata('sessionGroup') == StaffStoreUser && $user_group == BranchUser)) {
                $saler = 'tbtt_showcart.shc_saler = ' . $user_id;
            }
            if ($this->session->userdata('sessionGroup') == AffiliateUser) {
                $saler = 'tbtt_showcart.af_id = ' . (int)$this->session->userdata('sessionUser');
            }
        }
        $dayx = $this->statistics_model->getTamtinh(strtotime($begin_date), strtotime($end_date), 'day', $saler);
        $monthx = $this->statistics_model->getTamtinh(strtotime($daunam), strtotime($end_date), "month", $saler);
        $yearx = $this->statistics_model->getTamtinh(strtotime($daunam), strtotime($end_date), "year", $saler);
        $categories = array();
        foreach ($this->util->getDatesFromRange($_begin_date, $_end_date) as $vals) {
            $tongngay = $phi = 0;
            for ($i = 0; $i < count($dayx); $i++) {
                $categories[] = $this->findParentByID($dayx[$i]->cat_id);
                $phiAZibai = $categories[$i]->b2c_fee / 100;
                if ($dayx[$i]->updated_date == $vals) {
                    $phi += $dayx[$i]->shc_total * $phiAZibai;
                    if ($dayx[$i]->af_id > 0) {
                        if ($dayx[$i]->af_rate > 0) {
                            $tongngay += $dayx[$i]->HoahongPT;
                        } else {
                            $tongngay += $dayx[$i]->HoahongTien;
                        }
                    } else {
                        $tongngay += $dayx[$i]->shc_total;
                    }
                }
            }
            if ($this->session->userdata('sessionGroup') == AffiliateUser) {
                $phi = 0;
            }
            if ($tongngay) {
                $amountD = $tongngay - $phi;
            } else {
                $amountD = 0;
            }
            $services_day['dayx'] .= '["' . date("d-m-Y", strtotime($vals)) . '", ' . $amountD . ', "#a3a7b2"],';
        }
        //month
        $categories = array();
        foreach ($this->util->getMonthFromRange() as $valsM) {
            $tongthang = $phi = 0;
            for ($i = 0; $i < count($monthx); $i++) {
                if ($this->session->userdata('sessionGroup') == AffiliateUser) {
                    $categories[] = $this->findParentByID($dayx[$i]->cat_id);
                } else {
                    $categories[] = $this->findParentByID($monthx[$i]->cat_id);
                }
                $phiAZibai = $categories[$i]->b2c_fee / 100;
                if ($monthx[$i]->updated_date == $valsM) {
                    $phi += $monthx[$i]->shc_total * $phiAZibai;
                    if ($monthx[$i]->af_id > 0) {
                        if ($monthx[$i]->af_rate > 0) {
                            $tongthang += $monthx[$i]->HoahongPT;
                        } else {
                            $tongthang += $monthx[$i]->HoahongTien;
                        }
                    } else {
                        $tongthang += $monthx[$i]->shc_total;
                    }
                }
            }
            if ($this->session->userdata('sessionGroup') == AffiliateUser) {
                $phi = 0;
            }
            if ($tongthang) {
                $amountM = $tongthang - $phi;
            } else {
                $amountM = 0;
            }

            $services_day['monthx'] .= '["T' . $valsM . '", ' . $amountM . ', "#a3a7b2"],';
        }
        //year
        $categories = array();
        foreach ($this->util->getYearFromRange(date("Y", time())) as $valsY) {
            $tongnam = $phi = 0;
            for ($i = 0; $i < count($yearx); $i++) {
                if ($this->session->userdata('sessionGroup') == AffiliateUser) {
                    $categories[] = $this->findParentByID($dayx[$i]->cat_id);
                } else {
                    $categories[] = $this->findParentByID($yearx[$i]->cat_id);
                }

                $phiAZibai = $categories[$i]->b2c_fee / 100;
                if ($yearx[$i]->updated_date == $valsY) {
                    $phi += $yearx[$i]->shc_total * $phiAZibai;
                    if ($yearx[$i]->af_id > 0) {
                        if ($yearx[$i]->af_rate > 0) {
                            $tongnam += $yearx[$i]->HoahongPT;
                        } else {
                            $tongnam += $yearx[$i]->HoahongTien;
                        }
                    } else {
                        $tongnam += $yearx[$i]->shc_total;
                    }
                }
            }
            if ($this->session->userdata('sessionGroup') == AffiliateUser) {
                $phi = 0;
            }
            if ($tongnam) {
                $amountY = $tongnam - $phi;
            } else {
                $amountY = 0;
            }
            $services_day['yearx'] .= '["' . $valsY . '", ' . $amountY . ', "#a3a7b2"],';
        }
        $data['service_charts'] = $this->load->view('home/account/statistic/order_charts', $services_day, true);
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'statistic';
        $data['menuPanelGroup'] = 4;
        $this->load->view('home/account/statistic/income', $data);
    }

    // Thống kê của gian hang
    function statistic_Store()
    {
        $userId = (int)$this->session->userdata('sessionUser');
        $user_id_arr = array((int)$this->session->userdata('sessionUser'));
        $where_order_saler = $userId;
        $tree = array();
        $tree[] = (int)$this->session->userdata('sessionUser');
        $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN ('. StaffStoreUser .','. StaffUser .') AND use_status = 1 AND parent_id = '. $this->session->userdata('sessionUser'));
        if (!empty($sub_tructiep)) {
            foreach ($sub_tructiep as $key => $value) {
                //Nếu là chi nhánh, lấy danh sách nhân viên
                $tree[] = $value->use_id;
                if ($value->use_group == StaffStoreUser) {
                    //Lấy danh sách CN dưới nó cua NVGH
                    $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN('. BranchUser .','. StaffUser .') AND use_status = 1 AND parent_id = '. $value->use_id);
                    if (!empty($sub_cn)) {
                        foreach ($sub_cn as $k => $vlue) {
                            $tree[] = $vlue->use_id;
                            if ($vlue->use_group == BranchUser) {
                                //Lấy danh sách CN dưới nó cua NVGH
                                $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . StaffUser . ') AND use_status = 1 AND parent_id = ' . $vlue->use_id);
                                if (!empty($sub_cn)) {
                                    foreach ($sub_cn as $k => $v) {
                                        $tree[] = $v->use_id;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        $id = implode(',', $tree);
        $whereAff = '';
        //get list aff

        $or_saler = '';
        $where_order = '(';
        $where_order .= 'order_saler IN( ' . $id . ')';
        $saler = '';
        if ($this->session->userdata('sessionGroup') == AffiliateStoreUser || $this->session->userdata('sessionGroup') == StaffStoreUser || $this->session->userdata('sessionGroup') == StaffUser) {           
            $GH = (int)$this->session->userdata('sessionUser');            
            $idCN = implode(",", $tree);
            $saler = ' AND ((tbtt_showcart.shc_saler = '. $GH .' AND pro_of_shop = 0)';            
            $saler .= ')';
        }

        if ($this->session->userdata('sessionGroup') == BranchUser || $this->session->userdata('sessionGroup') == AffiliateUser) {            
        } else {
            $where_order .= ') and tbtt_showcart.shc_status IN(01,02,03,98)' . $saler;
        }
        $groupBy = 'id';
        if (!empty($or_saler)) {
            $get_id_ALL = $id . ',' . $or_saler;
        }
        
        $currentDate_first = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        $currentDate_after = mktime(23, 59, 59, date('m'), date('d'), date('Y'));;

        $data['menuPanelGroup'] = 4;
	    $data['menuType'] = 'account';
        $data['menuSelected'] = 'statisticStore';
        // tong so san pham het hang
        $this->load->model('product_model');
        $select = "pro_id, pro_name, pro_user";
        $whereTmp = "pro_status = 1 and pro_instock = 0  and pro_user = " . $userId;
        $products = $this->product_model->fetch($select, $whereTmp, "pro_id", "DESC", '', '');
        $data['products'] = count($products);
        // Tong so affiliate

        $liststore = $this->user_model->fetch("use_id", 'use_group = 2 AND use_status = 1 AND parent_id IN(' . $id . ')');
        $data['listaf'] = count($liststore);
        $this->load->library('utilSlv');
        $this->util = new utilSlv();
        $this->load->model('statistics_model');
        //tổng doanh thu đơn hàng
        #BEGIN: CHECK PERMISSION
        $q = isset($_REQUEST['q']) ? trim($_REQUEST['q']) : '';
        #END CHECK PERMISSION
        $data['page'] = array(
            'title' => 'Thống kê tổng doanh thu đơn hàng'
        );

        if ($this->input->post('daterange')) {
            $date_range = explode("_", $this->input->post('date_range'));
            $begin_date = $date_range[0] . ' 00:00:00';
            $end_date = $date_range[1] . ' 23:59:00';

            $_begin_date = $date_range[0];
            $_end_date = $date_range[1];

            $data['daterange'] = $this->input->post('daterange');
            $data['date_range'] = $this->input->post('date_range');
        } else {
            //mặc định cách 1 tuần
            $begin_date = date("Y-m-d 00:00:00", strtotime("-1 week"));
            $end_date = date("Y-m-d 23:59:00");

            $_begin_date = date("Y-m-d", strtotime("-1 week"));
            $_end_date = date("Y-m-d");
        }
        $daunam = date("Y-01-01 00:00:00");

        $now = date("Y-m-d H:i:s");
        $yesterday = date("Y-m-d", strtotime("-1 day"));
        $last_month = date("Y-m", strtotime("-1 month"));
        $end_yesterday = date("Y-m-d", strtotime("-1 day")) . ' 23:59:00';
        $begin_yesterday = date("Y-m-d", strtotime("-1 day")) . ' 00:00:00';
        $end_last_month = $last_month . '-' . date("t", strtotime($last_month . '-01')) . ' 23:59:00';
        $begin_last_month = $last_month . '-01 00:00:00';// tong don hang moi       
        $new_order = $this->order_model->fetch_join4('*', 'INNER', 'tbtt_showcart', 'tbtt_showcart.shc_orderid = tbtt_order.id', 'LEFT', 'tbtt_product', 'tbtt_showcart.shc_product = tbtt_product.pro_id', 'LEFT', 'tbtt_user', 'tbtt_user.use_id = tbtt_product.pro_user', $where_order . ' and tbtt_showcart.shc_status IN (01,02,03,98) and change_status_date >= ' . $currentDate_first . ' and change_status_date <=' . $currentDate_after, '', '', '', '', '', $groupBy);
        $data['totaldonhanghnay'] = count($new_order);

        // tong don hang       
        $total_order = $this->order_model->fetch_join4('*', 'INNER', 'tbtt_showcart', 'tbtt_showcart.shc_orderid = tbtt_order.id', 'LEFT', 'tbtt_product', 'tbtt_showcart.shc_product = tbtt_product.pro_id', 'LEFT', 'tbtt_user', 'tbtt_user.use_id = tbtt_product.pro_user', $where_order, '', '', '', '', '', $groupBy);
        $data['total_order'] = count($total_order);
        $groupOrder = 'id, tbtt_showcart.af_id, pro_id';
        //Doanh số hôm nay
        $total_re = $this->order_model->fetch_join4('shc_total', 'INNER', 'tbtt_showcart', 'tbtt_showcart.shc_orderid = tbtt_order.id', 'LEFT', 'tbtt_product', 'tbtt_showcart.shc_product = tbtt_product.pro_id', 'LEFT', 'tbtt_user', 'tbtt_user.use_id = tbtt_product.pro_user', $where_order . ' and change_status_date >= ' . $currentDate_first . ' and change_status_date <= ' . $currentDate_after, '', '', '', '', '', '');
        $dshnay = 0;
        foreach ($total_re as $vl) {
            $dshnay += $vl->shc_total;
        }
        $data['total_re'] = $dshnay;

        //Doanh số hôm qua
        $total_hqua = $this->order_model->fetch_join4('shc_total', 'INNER', 'tbtt_showcart', 'tbtt_showcart.shc_orderid = tbtt_order.id', 'LEFT', 'tbtt_product', 'tbtt_showcart.shc_product = tbtt_product.pro_id', 'LEFT', 'tbtt_user', 'tbtt_user.use_id = tbtt_product.pro_user', $where_order . ' and change_status_date <= ' . strtotime($end_yesterday) . ' and change_status_date >=' . strtotime($begin_yesterday), '', '', '', '', '', '');
        $tongHQ = 0;
        foreach ($total_hqua as $vl) {
            $tongHQ += $vl->shc_total;
        }
        $data['sales_yesterday'] = $tongHQ;

        //doanh số tháng trước
        $static_last_month = $this->statistics_model->getOrders(strtotime($begin_last_month), strtotime($end_last_month), '', $where_order);// . ' GROUP BY id'
        $tongTTrc = 0;
        foreach ($static_last_month as $vals) {
            $tongTTrc += $vals->shc_total;
        }
        $data['last_month'] = $tongTTrc;

        //doanh số tháng này
        $end_current_month = date("Y-m-d H:i:s");
        $begin_current_month = date("Y-m") . '-01 00:00:00';
        $static_current_month = $this->statistics_model->getOrders(strtotime($begin_current_month), strtotime($end_current_month), '', $where_order);
        $tongTNay = 0;
        foreach ($static_current_month as $vals) {
            $tongTNay += $vals->shc_total;
        }
        //var_dump($static_current_month);
        $data['current_month'] = $tongTNay;
        // Tong doanh so        
        $total_dt = $this->order_model->fetch_join4('shc_total', 'INNER', 'tbtt_showcart', 'tbtt_showcart.shc_orderid = tbtt_order.id', 'LEFT', 'tbtt_product', 'tbtt_showcart.shc_product = tbtt_product.pro_id', 'LEFT', 'tbtt_user', 'tbtt_user.use_id = tbtt_product.pro_user', $where_order, '', '', '', '', '', '');
        $tongDT = 0;
        foreach ($total_dt as $vl) {
            $tongDT += $vl->shc_total;
        }
        $data['total'] = $tongDT;

        //Thu nhập hiện tại
        $data['current_earnings'] = $this->statistics_model->getCurrentEarningsStatistics('public', date("m-Y"), $user_id_arr);

        //Chart-----------------------------
        if ($this->input->post('options_tad') == "2") {
            $services_day['tad'] = "frm_revenues";
        } else {
            $services_day['tad'] = "frm_orders";
        }

        $user_id = array((int)$this->session->userdata('sessionUser'));

        if ($this->session->userdata('sessionGroup') > 3) {

            $model_aff = $this->user_model->fetch('use_id', 'use_group = 2 AND use_status = 1 AND parent_id IN (' . $id . ')');
            $data['countAF'] = count($model_aff);
            $countShop = $this->shop_tree();
            $data['countShop'] = count($countShop[0]);
            $user_id = array_merge($user_id, $countShop[0]);
        }

        if ($services_day['tad'] == "frm_orders") {

            $dayx = $this->statistics_model->getQuantityOrder(strtotime($begin_date), strtotime($end_date), 'day', $where_order);
            $monthx = $this->statistics_model->getQuantityOrder(strtotime($daunam), strtotime($end_date), 'month', $where_order);
            $yearx = $this->statistics_model->getQuantityOrder(strtotime($daunam), strtotime($end_date), 'year', $where_order);
            $services_day['title'] = "Thống kê tổng số lượng đơn hàng theo";
            $services_day['arrayToDataTable'] = "Số lượng";
        } else {
            $dayx = $this->statistics_model->getOrders(strtotime($begin_date), strtotime($end_date), 'day', $where_order);
            $monthx = $this->statistics_model->getOrders(strtotime($daunam), strtotime($end_date), 'month', $where_order);
            $yearx = $this->statistics_model->getOrders(strtotime($daunam), strtotime($end_date), 'year', $where_order);
            $services_day['title'] = "Thống kê tổng doanh thu đơn hàng theo";
            $services_day['arrayToDataTable'] = "Đơn hàng";
        }
        foreach ($this->util->getDatesFromRange($_begin_date, $_end_date) as $vals) {

            $tongngay = 0;
            for ($i = 0; $i < count($dayx); $i++) {
                if ($dayx[$i]->updated_date == $vals) {
                    $tongngay += $dayx[$i]->shc_total;
                }
            }
            if ($tongngay) {
                $amountD = $tongngay;
            } else {
                $amountD = 0;
            }
            $services_day['dayx'] .= '["' . date("d-m-Y", strtotime($vals)) . '", ' . $amountD . ', "#a3a7b2"],';
        }
        //month
        foreach ($this->util->getMonthFromRange() as $valsM) {
            $tongthang = 0;
            for ($i = 0; $i < count($monthx); $i++) {
                if ($monthx[$i]->updated_date == $valsM) {
                    $tongthang += $monthx[$i]->shc_total;
                }
            }
            if ($tongthang) {
                $amountM = $tongthang;
            } else {
                $amountM = 0;
            }

            $services_day['monthx'] .= '["T' . $valsM . '", ' . $amountM . ', "#a3a7b2"],';
        }
        //year
        foreach ($this->util->getYearFromRange(date("Y", time())) as $valsY) {
            $tongnam = 0;
            for ($i = 0; $i < count($yearx); $i++) {
                if ($yearx[$i]->updated_date == $valsY) {
                    $tongnam += $yearx[$i]->shc_total; //order_total_no_shipping_fee;
                }
            }
            if ($tongnam) {
                $amountY = $tongnam;
            } else {
                $amountY = 0;
            }

            $services_day['yearx'] .= '["' . $valsY . '", ' . $amountY . ', "#a3a7b2"],';
        }
        $data['service_charts'] = $this->load->view('home/account/statistic/order_charts', $services_day, true);
        if (isset($_REQUEST) && $_REQUEST['show'] == "earn") {
            $data['group_3_charts'] = FALSE;
        } else {
            $data['group_3_charts'] = TRUE;
        }


        $data['CountGetAllOrder'] = $this->order_model->getOrderStatistic();
        $data['sales_last_month'] = $this->statistics_model->getOrdersStatistics($yesterday, $yesterday + 86400, 'day');

        $this->load->view('home/account/statistic/defaults', $data);
    }

    public function statisticIncome_Store()
    {
        $this->load->library('utilSlv');
        $this->util = new utilSlv();
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'statistic';
        $data['menuPanelGroup'] = 4;
        $this->load->model('statistics_model');

        $begin_date = date("Y-m-d 00:00:00", strtotime("-1 week"));
        $end_date = date("Y-m-d 23:59:00");
        $daunam = date("Y-01-01 00:00:00");

        $_begin_date = date("Y-m-d", strtotime("-1 week"));
        $_end_date = date("Y-m-d");
        $services_day = array();
        $where = 'tbtt_showcart.shc_saler';

        if ($this->session->userdata('sessionGroup') == AffiliateStoreUser || $this->session->userdata('sessionGroup') == StaffStoreUser) {
            $tree = array();
            $GH = (int)$this->session->userdata('sessionUser');
            $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . StaffStoreUser . ',' . StaffUser . ',' . AffiliateUser . ') AND use_status = 1 AND parent_id = "' . $this->session->userdata('sessionUser') . '"');
            if (!empty($sub_tructiep)) {
                foreach ($sub_tructiep as $key => $value) {
                    //Nếu là chi nhánh, lấy danh sách nhân viên
                    $tree[] = $value->use_id;
                    $sub_aff = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . AffiliateUser . ') AND use_status = 1 AND parent_id = "' . $value->use_id . '"');
                    foreach ($sub_aff as $key => $value) {
                        //Nếu là chi nhánh, lấy danh sách nhân viên
                        $tree[] = $value->use_id;
                    }
                }
            }
            $id = implode(",", $tree);
            $saler = '((tbtt_showcart.shc_saler=' . $GH . ' AND pro_of_shop=0)';
            if (!empty($id)) {
                $saler .= ' OR ((tbtt_showcart.af_id IN(' . $id . ') AND tbtt_showcart.shc_saler=' . $GH . '))';
            }
            $saler .= ')';
        } else {
            $saler = 'tbtt_showcart.shc_saler = ' . (int)$this->session->userdata('sessionUser');
        }
        $dayx = $this->statistics_model->getTamtinh(strtotime($begin_date), strtotime($end_date), 'day', $saler);
        $monthx = $this->statistics_model->getTamtinh(strtotime($daunam), strtotime($end_date), "month", $saler);
        $yearx = $this->statistics_model->getTamtinh(strtotime($daunam), strtotime($end_date), "year", $saler);
        $categories = array();
        foreach ($this->util->getDatesFromRange($_begin_date, $_end_date) as $vals) {
            $tongngay = $phi = 0;
            for ($i = 0; $i < count($dayx); $i++) {
                $categories[] = $this->findParentByID($dayx[$i]->cat_id);
                $phiAZibai = $categories[$i]->b2c_fee / 100;
                if ($dayx[$i]->updated_date == $vals) {
                    $phi += $dayx[$i]->shc_total * $phiAZibai;
                    if ($dayx[$i]->af_id > 0) {
                        if ($dayx[$i]->af_rate > 0) {
                            $tongngay += $dayx[$i]->HoahongPT;
                        } else {
                            $tongngay += $dayx[$i]->HoahongTien;
                        }
                    } else {
                        $tongngay += $dayx[$i]->shc_total;
                    }
                }
            }
            if ($this->session->userdata('sessionGroup') == AffiliateUser) {
                $phi = 0;
            }
            if ($tongngay) {
                $amountD = $tongngay - $phi;
            } else {
                $amountD = 0;
            }
            $services_day['dayx'] .= '["' . date("d-m-Y", strtotime($vals)) . '", ' . $amountD . ', "#a3a7b2"],';
        }
        //month
        $categories = array();
        foreach ($this->util->getMonthFromRange() as $valsM) {
            $tongthang = $phi = $tongt = 0;
            for ($i = 0; $i < count($monthx); $i++) {
                $categories[] = $this->findParentByID($monthx[$i]->cat_id);
                $phiAZibai = $categories[$i]->b2c_fee / 100;
                if ($monthx[$i]->updated_date == $valsM) {
                    $phi += $monthx[$i]->shc_total * $phiAZibai;
                    if ($monthx[$i]->af_id > 0) {
                        if ($monthx[$i]->af_rate > 0) {
                            $tongthang += $monthx[$i]->HoahongPT;
                        } else {
                            $tongthang += $monthx[$i]->HoahongTien;
                        }
                    } else {
                        $tongthang += $monthx[$i]->shc_total;
                    }
                }
            }
            if ($tongthang) {
                $amountM = $tongthang - $phi;
            } else {
                $amountM = 0;
            }

            $services_day['monthx'] .= '["T' . $valsM . '", ' . $amountM . ', "#a3a7b2"],';
        }
        //year
        $categories = array();
        foreach ($this->util->getYearFromRange(date("Y", time())) as $valsY) {
            $tongnam = $phi = 0;
            for ($i = 0; $i < count($yearx); $i++) {
                $categories[] = $this->findParentByID($yearx[$i]->cat_id);
                $phiAZibai = $categories[$i]->b2c_fee / 100;
                if ($yearx[$i]->updated_date == $valsY) {
                    $phi += $yearx[$i]->shc_total * $phiAZibai;
                    if ($yearx[$i]->af_id > 0) {
                        if ($yearx[$i]->af_rate > 0) {
                            $tongnam += $yearx[$i]->HoahongPT;
                        } else {
                            $tongnam += $yearx[$i]->HoahongTien;
                        }
                    } else {
                        $tongnam += $yearx[$i]->shc_total;
                    }
                }
            }
            if ($tongnam) {
                $amountY = $tongnam - $phi;
            } else {
                $amountY = 0;
            }
            $services_day['yearx'] .= '["' . $valsY . '", ' . $amountY . ', "#a3a7b2"],';
        }
        $data['service_charts'] = $this->load->view('home/account/statistic/order_charts', $services_day, true);
        $data['menuPanelGroup'] = 4;
	    $data['menuType'] = 'account';
        $data['menuSelected'] = 'statisticStore';
        $this->load->view('home/account/statistic/income', $data);
    }

    // Get list branch of shop, $u is user id shop
    public function stringMyBranch($u = 0)
    {
        // $this->load->model('user_model');
        $listbranchs = $this->user_model->fetch('use_id', 'use_group = 14 AND parent_id = '. $u .' AND use_status = 1');
        $listbranch = '0';
        $arraylistbranch = array();
        if ($listbranchs) {
            foreach ($listbranchs as $vuser) {
                $arraylistbranch[] = $vuser->use_id;
            }
             $listbranch = implode(',', $arraylistbranch);
        }
        return $listbranch;
    }
    // end tke gian hang

    function statisticMember()
    {
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'statistic';
        $data['menuPanelGroup'] = 4;
        $this->load->model("user_model");
        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "use_fullname";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        $limmit = 15;
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/statisticMember' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $current_day = strtotime(date("Y-m-d", mktime(0, 0, 0, date("n", time()), date("j", time()) - TimeMemberStatic, date("Y", time()))));
        $totalRecord = count($this->user_model->fetch('*', 'use_group IN (2,3,6) AND use_regisdate > ' . $current_day . ' AND parent_id = ' . (int)$this->session->userdata('sessionUser')));
        $config['base_url'] = base_url() . 'account/statisticMember' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limmit;
        $config['num_links'] = 3;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        $data['listmember'] = $this->user_model->fetch('*', 'use_group IN (2,3,6) AND use_regisdate > ' . $current_day . ' AND parent_id = ' . (int)$this->session->userdata('sessionUser'), $sort, $by, $start, $limmit);

        $this->load->view('home/account/statistic/listmember', $data);
    }

    function getAfByUser($userId)
    {
        $this->load->model("user_model");
        $shop_detail = $this->user_model->fetch("*", array("use_group" => 2, "use_status" => 1, "parent_id" => $userId));
        $shopList = array();
        if (count($shop_detail) > 0) {
            foreach ($shop_detail as $shop) {
                $shopList[] = $shop->use_id;
            }
        }
        return $shopList;
    }

    function countAF()
    {

        $userdata = $this->session->userdata;
        $tree = array();
        $this->getTreeInList($userdata["sessionUser"], $tree);

        $shop_tree = array();
        $shop_tree[] = $this->getAfByUser($userdata["sessionUser"]);
        if (count($tree) > 0) {
            foreach ($tree as $node) {
                $tmp = $this->getAfByUser($node);
                if ($tmp != -1) {
                    //$shop_tree[] = $tmp;
                    if (!in_array($tmp, $shop_tree, true)) {
                        $shop_tree[0] = array_merge($shop_tree[0], $tmp);
                    }

                }
            }
        }

        return $shop_tree;
    }

    function statistic_order()
    {
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'statistic';
        $data['menuPanelGroup'] = 4;
        $this->load->view('home/account/statistic/order', $data);
    }

    function statistic_product()
    {
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'statistic';
        $data['menuPanelGroup'] = 4;
        $this->load->view('home/account/statistic/product', $data);
    }

    function statistic_revenue()
    {
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'statistic';
        $data['menuPanelGroup'] = 4;
        $this->load->view('home/account/statistic/revenue', $data);
    }

    function statistic_commission()
    {
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'statistic';
        $data['menuPanelGroup'] = 4;
        $this->load->view('home/account/statistic/commission', $data);
    }

    function statistic_tree()
    {
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'statistic';
        $data['menuPanelGroup'] = 4;
        $this->load->view('home/account/statistic/tree', $data);
    }

    function statistic_sharing()
    {
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'statistic';
        $data['menuPanelGroup'] = 4;
        $this->load->view('home/account/statistic/sharing', $data);
    }

    function service()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser 
            || $group_id == AffiliateUser 
            || $group_id == StaffStoreUser) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        //ini_set('display_errors', 1);
        //error_reporting(E_ALL);
        $this->load->library('utilslv');
        $util = utilslv::getInstance();
        $util->addScript(base_url() . 'templates/home/js/package.js');
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
        $userId = (int)$this->session->userdata('sessionUser');
        $user_data = $this->user_model->get('use_group', "use_id = " . (int)$this->session->userdata('sessionUser'));
        $data['user_group'] = $user_data->use_group;
        if ($user_data->use_group == 2) {
	    $data['menuPanelGroup'] = 4;
            $data['menuType'] = 'account';
            $data['menuSelected'] = 'service';
            $this->load->model('package_model');
            $this->load->model('package_daily_model');
            $data['package_daily'] = $this->package_daily_model->get_list(array('select' => '*', 'where' => array('unit_type' => 'tháng')));
            $data['package_time'] = $this->package_model->get_list(array('select' => 'id, period, month_price, discount_rate, p_type, unit_type', 'where' => array('p_type' => 'package_daily')));
        } else {
	        $data['menuPanelGroup'] = 4;
            $data['menuType'] = 'account';
            $data['menuSelected'] = 'service';
            $this->load->model('package_model');
            $this->load->model('service_model');
            $this->load->model('package_daily_model');
            $data['package'] = $this->package_model->getPackage();
            $data['simplePackage'] = $this->package_model->getSimplePackage();
            $data['prices'] = $this->package_model->getPackagePrice();
            $data['services'] = $this->package_model->getServiceList();

            ///$data['maxPackage'] = $this->package_model->getMaxUsedPackage($userId);
            $data['avai_date'] = $this->package_model->getAvailableDate($userId);
            $data['free_exist'] = $this->package_model->checkFreePackage($userId);
            $util->addInlineScript("var packageDate = " . json_encode($data['avai_date']) . ";\n");
            $data['discountShop'] = $shop->sho_discount_rate;

            $sho_style = array();
            $data['package_daily'] = $this->package_daily_model->get_list(array('select' => '*', 'where' => array('unit_type' => 'ngày', 'published' => 1)), $sho_style);

            //Get data for edit view list service
            // by Bao Tran
            $data['ser_list_1'] = $this->service_model->getServiceList(array('tbtt_package_service.package_id' => 1), false);
            $data['ser_list_2'] = $this->service_model->getServiceList(array('tbtt_package_service.package_id' => 2), false);
            $data['ser_list_3'] = $this->service_model->getServiceList(array('tbtt_package_service.package_id' => 3), false);
            $data['ser_list_4'] = $this->service_model->getServiceList(array('tbtt_package_service.package_id' => 4), false);
            $data['ser_list_7'] = $this->service_model->getServiceList(array('tbtt_package_service.package_id' => 7), false);
            $data['ser_pack'] = $this->service_model->getServiceData('`id`,`group`, `name`,`limit`,`unit`');

            $data['position'] = array(
                '000' => "Toàn quốc",
                '001' => "Khu vực 1",
                '999' => "Khu vực 2"
            );
            $data['news_type'] = array(
                '000' => "Tin hot",
                '111' => "Tin khuyến mãi"
            );
        }
        $this->load->view('home/account/service/defaults', $data);
    }

    function registerService($pid = 0)
    {

        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser || $group_id == AffiliateUser || $group_id == StaffStoreUser
        ) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        $iUserId = (int)$this->session->userdata('sessionUser');
        
        if($group_id == StaffStoreUser) {
            $oUser = $this->user_model->get("*","use_id = " . $iUserId  . ' AND use_status = 1');
            $iUserId = $oUser->parent_id;
        }

        $this->load->library('utilslv');
        $util = utilslv::getInstance();
        $util->addScript(base_url() . 'templates/home/js/package.js');
        $shop = $this->shop_model->get("*", "sho_user = " . $iUserId);
        $data['shopid'] = $shop->sho_id;
        $userId = (int)$this->session->userdata('sessionUser');
        $user_data = $this->user_model->get('use_group', "use_id = " . $iUserId);
        $data['user_group'] = $user_data->use_group;
        if ($user_data->use_group == 2) {
            $data['menuType'] = 'account';
            $data['menuSelected'] = 'service';
            $this->load->model('package_model');
            $this->load->model('package_daily_model');
            $data['package_daily'] = $this->package_daily_model->get_list(array('select' => '*', 'where' => array('unit_type' => 'tháng')));
            $data['package_time'] = $this->package_model->get_list(array('select' => 'id,period,month_price,discount_rate,p_type, unit_type', 'where' => array('p_type' => 'package_daily')));
        } else {
            $data['menuType'] = 'account';
            $data['menuSelected'] = 'service';
            $this->load->model('package_model');

            ///$data['maxPackage'] = $this->package_model->getMaxUsedPackage($userId);
            $data['avai_date'] = $this->package_model->getAvailableDate($userId);
            $data['free_exist'] = $this->package_model->checkFreePackage($userId);
            $util->addInlineScript("var packageDate = " . json_encode($data['avai_date']) . ";\n");

            switch ($shop->sho_style) {
                case 'default':
                    $sho_style = array('05', '04', '07');
                    break;
                case 'style1':
                    $sho_style = array('05', '04', '07');
                    break;
                case 'style2':
                    $sho_style = array('04', '06', '07');
                    break;
                case 'style3':
                    $sho_style = array('05', '06', '07');
                    break;
                case 'style4':
                    $sho_style = array('04', '05', '06');
                    break;
                default:
                    $sho_style = array();
                    break;
            }
            $this->load->model('package_daily_model');
            $parrams = array('select' => '*', 'where' => array('unit_type' => 'ngày', 'published' => 1));
            switch ($this->uri->segment('3')) {
                case 'products':
                    $parrams['where_in'] = array('p_type' => array('04', '05', '06', '07', '08'));
                    break;
                case 'news':
                    $parrams['where_in'] = array('p_type' => array('01', '02', '03'));
                    break;
            }
            $data['package_daily'] = $this->package_daily_model->get_list($parrams, $sho_style);


            $data['position'] = array(
                '000' => "Toàn quốc",
                '001' => "Khu vực 1",
                '999' => "Khu vực 2"
            );
            $data['news_type'] = array(
                '000' => "Tin hot",
                '111' => "Tin khuyến mãi"
            );
        }
        $data['pid'] = $pid;
        $this->load->view('home/account/service/new_service', $data);
    }

    function service_using($page = 0)
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser || $group_id == AffiliateUser

        ) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $this->db->cache_off();
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
	    $data['menuPanelGroup'] = 4;
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'service';
        $this->load->library('utilslv');
        $util = utilslv::getInstance();
        $util->addScript(base_url() . 'templates/home/js/package.js');
        $this->load->model('package_user_model');
        $this->package_user_model->pagination(false);
        $this->package_user_model->setLink(base_url() . 'account/service/using');
        $data['data'] = $this->package_user_model->listerUsingPage((int)$this->session->userdata('sessionUser'), $page);
        $data['pager'] = $this->package_user_model->pager;
        $data['packages'] = $this->package_user_model->getPackage();
        $data['link'] = $this->package_user_model->getLink();
        $this->load->view('home/account/service/using', $data);
    }

    function serviceDetail($id)
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser || $group_id == AffiliateUser
        ) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        switch ($this->uri->segment(3)) {
            case 'detail_daily':
                $this->load->model('package_daily_user_model');
                $data['menuType'] = 'account';
                $data['menuSelected'] = 'service';
                $data['id'] = $id;
                $this->load->model('package_daily_model');
                $contents = $this->package_daily_model->getContent($data['id']);
                $data["dailycontent"] = array();
                $dailyUser = $this->package_daily_user_model->get("*", array("id" => $id));
                foreach ($contents as $value) {
                    $data["dailycontent"][] = $value['content_id'];
                }
                if ($dailyUser->content_type == "product") {
                    $this->getListProduct($data);
                }
                if ($dailyUser->content_type == "news") {
                    $this->getListnews($data);
                }
                break;
            case 'detail':
                $this->load->model('package_user_model');
                $data['services'] = $this->package_user_model->getSubservice($id);
                $data['menuType'] = 'account';
                $data['menuSelected'] = 'service';
                $this->load->view('home/account/service/detail', $data);
                break;
        }
    }

    function getListProductAff($page = 0)
    {
        $this->load->library('utilslv');
        $util = utilslv::getInstance();
        $util->addScript(base_url() . 'templates/home/js/affiliate.js');
        $this->load->model('af_product_model');

        $this->af_product_model->pagination(TRUE);
        $this->af_product_model->setCurLink('account/affiliate/products');
        $body = array();

        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $body['shop'] = $shop;
        $body['shopid'] = $shop->sho_id;
        $body['sho_category'] = $shop->sho_category;
        $afId = (int)$this->session->userdata('sessionUser');
        $body['number_cat'] = 1;
        $numberMyProduct = $this->af_product_model->myNumberProduct($afId);
        $body['numberMyProduct'] = $numberMyProduct;
        $body['products'] = $this->af_product_model->lister(array('use_id' => $afId), $page);

        $body['pager'] = $this->af_product_model->pager;
        $body['sort'] = $this->af_product_model->getAdminSort();
        $body['filter'] = $this->af_product_model->getFilter();
        $body['category'] = $this->af_product_model->getCategory();
        $body['link'] = base_url() . $this->af_product_model->getRoute('product');
        $body['productLink'] = $body['link'];
        $body['myproductsLink'] = base_url() . $this->af_product_model->getRoute('myproducts');
        $body['num'] = $page;
        $body['shopCategory'] = $this->af_product_model->getShopCategory();
        $body['menuType'] = 'account';
        $body['menuSelected'] = 'affiliate';

        $this->load->view('home/affiliate/products', $body);
    }

    function addDailyContent()
    {
        $this->load->model("package_daily_model");
        $this->load->model("package_daily_user_model");
        $listaf = $this->user_model->fetch("use_id", "use_group = 2", "", "");
        foreach ($listaf as $key => $list) {
            if ($key == 0) {
                $lst_af = ',' . $list->use_id . ',';
            } else {
                $lst_af .= $list->use_id . ',';
            }
        }
        $this->load->model('product_model');
        $this->load->model('press_product_user_af_model');
        $id = $_POST['id'];
        $pro_id = $_POST['pro_id'];
        $product = $this->product_model->get("*", "pro_id = " . $pro_id);
        $value['isOk'] = false;
        $value['msg'] = "Có lỗi xảy ra, xin vui lòng liên hệ với kĩ thuật viên";
        if ($id) {
            if (isset($_REQUEST['info_id']) && $_REQUEST['info_id'] == "08") {
                if ($product->is_product_affiliate == 0) {
                    $value["msg"] = "Sản phẩm này không phải là sản phẩm Affiliate. Vui lòng click <a class='text-primary' target='_blank' href='" . base_url() . "account/product/edit/{$pro_id}'> vào đây </a>để cập nhật sản phẩm sang <i><b>Là sản phẩm Affiliate</b></i>!";
                }
            } else {
                $dailyUser = $this->package_daily_user_model->get("*", array("id" => $id));
                $date = strtotime($dailyUser->begined_date);
                $datetime = $date + (1 * 24 * 60 * 60);
                $now = time();
                if ($now <= $datetime) {
                    $contents = $this->package_daily_model->getContent($id);
                    if (count($contents) < $dailyUser->content_num) {
                        if (isset($lst_af)) {
                            $pro_ad = array(
                                'user_id_af' => $lst_af,
                                'pro_id' => $pro_id,
                                'begin_date' => $dailyUser->begined_date
                            );
                            $this->press_product_user_af_model->add($pro_ad);
                        }
                        $query['select'] = "*";
                        $query['where'] = array("id" => $dailyUser->package_id);
                        $daily = $this->package_daily_model->get_one($query);
                        $data = array(
                            "order_id" => $id,
                            "content_id" => $pro_id,
                            "begin_date" => $dailyUser->begined_date,
                            "pos_num" => $dailyUser->pos_num,
                            "p_type" => $dailyUser->p_type,
                            "content_type" => $dailyUser->content_type
                        );
                        $value['id'] = $this->package_daily_model->addContent($data);
                        $value['modified'] = $this->package_daily_user_model->updateModifiedDate($id);
                        $value['isOk'] = true;
                        $value["msg"] = "Cập nhật thành công";
                    } else {
                        $value['msg'] = "Bạn chỉ có thể thêm tối đa " . $dailyUser->content_num . " sản phẩm";
                    }
                } else {
                    $value['msg'] = "Gói dịch vụ đã hết hạn";
                }

            }
        }
        echo json_encode($value);
    }

    function removeDailyContent()
    {
        $this->load->model("package_daily_model");
        $this->load->model("package_daily_user_model");
        $this->load->model('press_product_user_af_model');
        $id = $_POST['order_id'];
        $content_id = $_POST['content_id'];
        $value['isOk'] = false;
        $value['msg'] = "có lỗi xảy ra, xin vui lòng liên hệ với kĩ thuật viên";
        if ($id) {
            $dailyUser = $this->package_daily_user_model->get("*", array("id" => $id));
            $date = strtotime($dailyUser->begined_date);
            $datetime = $date + (1 * 24 * 60 * 60);
            $now = time();
            if ($now <= $datetime) {
                if ($dailyUser->user_id == (int)$this->session->userdata('sessionUser')) {
                    $this->press_product_user_af_model->delete($content_id);
                    $this->package_daily_model->deleteContent($content_id, $id);
                    $value['modified'] = $this->package_daily_user_model->updateModifiedDate($id);
                    $value['isOk'] = true;
                    $value["msg"] = "Xóa thành công";
                }
            } else {
                $value['msg'] = "Gói dịch vụ đã hết hạn";
            }
        }
        echo json_encode($value);
    }

    function getListProduct($data)
    {
        $pro_type = $this->uri->segment(5);
        $group_id = $this->session->userdata('sessionGroup');
        $this->load->model('product_model');
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu 1
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;
        $this->load->model('manufacturer_model');
        $this->load->model('category_model');
        $data['manufacturer_category'] = $this->manufacturer_model->fetch("*");
        /* $cat_level_0 = $this->category_model->fetch("*", "parent_id = 0 AND cat_status = 1", "cat_order, cat_id", "ASC");
         if (isset($cat_level_0)) {
             foreach ($cat_level_0 as $key => $item) {
                 $cat_level_1 = $this->category_model->fetch("*", "parent_id = " . (int)$item->cat_id . " AND cat_status = 1");
                 $cat_level_0[$key]->child_count = count($cat_level_1);
             }
         }
         $data['catlevel0'] = $cat_level_0; */
        if ($shop->sho_category > 0) {
            $where_category = ' AND cat_id =' . $shop->sho_category;
        } else {
            $where_category = "";
        }
        $cat_level_0 = $this->category_model->fetch("*", "parent_id = 0 AND cat_status = 1" . $where_category, "cat_order, cat_id", "ASC");
        if (isset($cat_level_0)) {
            foreach ($cat_level_0 as $key => $item) {
                $cat_level_1 = $this->category_model->fetch("*", "parent_id = " . (int)$item->cat_id . " AND cat_status = 1");
                $cat_level_0[$key]->child_count = count($cat_level_1);
            }
        }
        $data['catlevel0'] = $cat_level_0;
        $maxorder = $this->category_model->get("max(cat_order) as maxorder");
        $data['next_order'] = (int)$maxorder->maxorder + 1;

        $maxindex = $this->category_model->get("max(cat_index) as maxindex");
        $data['next_index'] = (int)$maxindex->maxindex + 1;
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser') . " AND sho_status = 1");
        $data['shopid'] = $shop->sho_id;
        $data['shopid'] = $shop->sho_id;
        $data['shoptype'] = $shop->shop_type;
        $data['advertisePage'] = 'account';
        $data['advertise'] = $this->advertise_model->fetch("adv_id, adv_title, adv_banner, adv_dir, adv_link, adv_page, adv_position,adv_iframe", "adv_status = 1 AND adv_enddate >= $currentDate", "adv_order", "ASC");
        #END Advertise
        #BEGIN: Counter
        $data['counter'] = $this->counter_model->get();
        #END Counter
        #Define url for $getVar
        $action = array('edit', 'search', 'keyword', 'sort', 'by', 'status', 'id', 'page');
        if ($pro_type == 'product' || $pro_type == 'service' || $pro_type == 'coupon') {
            $getVar = $this->uri->uri_to_assoc(4, $action);
        } else {
            $getVar = $this->uri->uri_to_assoc(3, $action);
        }
        #BEGIN: CHECK GROUP
        if ((int)$this->session->userdata('sessionGroup') == 1) {
            redirect(base_url() . 'account', 'location');
            die();
        }
        #END CHECK GROUP
        #BEGIN: Delete
        if ($this->input->post('checkone') && is_array($this->input->post('checkone')) && count($this->input->post('checkone')) > 0) {
            $this->load->library('file');
            $idCheckOneProduct = implode(',', $this->input->post('checkone'));
            $checkOneProduct = $this->product_model->fetch("pro_id, pro_image, pro_dir", "pro_id IN($idCheckOneProduct) AND pro_user = " . (int)$this->session->userdata('sessionUser'));
            $idProduct = array();
            foreach ($checkOneProduct as $checkOneProductArray) {
                $idProduct[] = $checkOneProductArray->pro_id;
                #Remove image
                if ($checkOneProductArray->pro_image != 'none.gif') {
                    $imageArray = explode(',', $checkOneProductArray->pro_image);
                    foreach ($imageArray as $imageArrays) {
                        if (trim($imageArrays) != '' && file_exists('media/images/product/' . $checkOneProductArray->pro_dir . '/' . $imageArrays)) {
                            @unlink('media/images/product/' . $checkOneProductArray->pro_dir . '/' . $imageArrays);
                        }
                    }
                    for ($i = 1; $i <= 3; $i++) {
                        if (file_exists('media/images/product/' . $checkOneProductArray->pro_dir . '/thumbnail_' . $i . '_' . $imageArray[0])) {
                            @unlink('media/images/product/' . $checkOneProductArray->pro_dir . '/thumbnail_' . $i . '_' . $imageArray[0]);
                        }
                    }
                    if (trim($checkOneProductArray->pro_dir) != '' && is_dir('media/images/product/' . $checkOneProductArray->pro_dir) && count($this->file->load('media/images/product/' . $checkOneProductArray->pro_dir, 'index.html')) == 0) {
                        if (file_exists('media/images/product/' . $checkOneProductArray->pro_dir . '/index.html')) {
                            @unlink('media/images/product/' . $checkOneProductArray->pro_dir . '/index.html');
                        }
                        @rmdir('media/images/product/' . $checkOneProductArray->pro_dir);
                    }
                }
            }
            if (count($idProduct) > 0) {
                $this->load->model('product_favorite_model');
                $this->load->model('product_comment_model');
                $this->load->model('product_bad_model');

                $this->product_favorite_model->delete($idProduct, "prf_product");
                $this->product_comment_model->delete($idProduct, "prc_product");
                $this->product_bad_model->delete($idProduct, "prb_product");
                $this->showcart_model->delete($idProduct, "shc_product");
                $this->product_model->delete($idProduct, "pro_id");
            }
            redirect(base_url() . trim(uri_string(), '/'), 'location');
        }
        #END Delete
        $this->load->library('hash');
        #BEGIN: Search & sort
        $where = "pro_user = " . (int)$this->session->userdata('sessionUser');
        $sort = 'pro_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageSort = '';
        $pageUrl = '';
        $keyword = '';
        if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
            $keyword = $this->filter->html($getVar['keyword']);
            switch (strtolower($getVar['search'])) {
                case 'name':
                    $sortUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $pageUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $where .= " AND pro_name LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                    break;
            }
        }
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "pro_name";
                    break;
                case 'category':
                    $pageUrl .= '/sort/category';
                    $sort = "cat_name";
                    break;
                case 'postdate':
                    $pageUrl .= '/sort/postdate';
                    $sort = "pro_begindate";
                    break;
                case 'enddate':
                    $pageUrl .= '/sort/enddate';
                    $sort = "pro_enddate";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "pro_id";
            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #Keyword
        $data['keyword'] = $keyword;
        #BEGIN: Create link sort
        $id = $this->uri->segment(4);
        $data['sortUrl'] = base_url() . 'account/service/detail_daily/' . $id . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Status
        $statusUrl = $pageUrl . $pageSort;
        $data['statusUrl'] = base_url() . 'account/service/detail_daily' . $statusUrl;
        if ($getVar['status'] != FALSE && trim($getVar['status']) != '' && $getVar['id'] != FALSE && (int)$getVar['id'] > 0) {
            switch (strtolower($getVar['status'])) {
                case 'active':
                    $this->product_model->update(array('pro_status' => 1), "pro_id = " . (int)$getVar['id'] . " AND pro_user = " . (int)$this->session->userdata('sessionUser'));
                    break;
                case 'deactive':
                    $this->product_model->update(array('pro_status' => 0), "pro_id = " . (int)$getVar['id'] . " AND pro_user = " . (int)$this->session->userdata('sessionUser'));
                    break;
            }
            redirect($data['statusUrl'], 'location');
        }
        #END Status
        #BEGIN: Pagination
        $where .= " AND  tbtt_product.pro_status = 1";
        $this->load->library('pagination');
        if ($pro_type == 'product') {
            $where .= ' AND tbtt_product.pro_type = 0';
        } elseif ($pro_type == 'service') {
            $where .= ' AND tbtt_product.pro_type = 1';
        } elseif ($pro_type == 'coupon') {
            $where .= ' AND tbtt_product.pro_type = 2';
        }
        #Count total record
        $totalRecord = count($this->product_model->fetch_join("pro_id", "LEFT", "tbtt_category", "tbtt_product.pro_category = tbtt_category.cat_id", "", "", "", "", "", "", $where, "", ""));
        $config['base_url'] = base_url() . 'account/service/detail_daily' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        #Fetch record
        $select = "pro_id, pro_name, pro_descr, pro_category, pro_dir, pro_image, pro_begindate, pro_enddate, pro_status, pro_view, pro_cost, pro_instock, pro_saleoff_value, pro_type_saleoff, cat_name, is_product_affiliate, af_amt, af_rate";
        $limit = settingOtherAccount;
        $data['product'] = $this->product_model->fetch_join($select, "LEFT", "tbtt_category", "tbtt_product.pro_category = tbtt_category.cat_id", "", "", "", "", "", "", $where, $sort, $by, $start, $limit);
        #Load view
        $data['flash_message'] = $this->session->flashdata('countProductByUser');

        $this->load->view('home/account/product/lists', $data);
    }

    function getListnews($data)
    {
        $group_id = (int)$this->session->userdata('sessionGroup');
        $action = array('search', 'keyword', 'filter', 'key', 'sort', 'by', 'page', 'status', 'id');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #If have page
        #END Search & Filter
        #BEGIN: Create link sort
        $pageSort = '';
        $pageUrl = '';
        #END Create link sort
        #BEGIN: Status
        $statusUrl = $pageUrl . $pageSort;
        $data['statusUrl'] = base_url() . 'account/news' . $statusUrl;
        $this->load->model('content_model');
        $this->load->model('content_category_model');
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shop'] = $shop;
        $data['shopid'] = $shop->sho_id;
        if ($getVar['status'] != FALSE && trim($getVar['status']) != '' && $getVar['id'] != FALSE && (int)$getVar['id'] > 0) {
            switch (strtolower($getVar['status'])) {
                case 'active':

                    $this->content_model->update(array('not_status' => 1), "not_id = " . (int)$getVar['id']);
                    break;
                case 'deactive':

                    $this->content_model->update(array('not_status' => 0), "not_id = " . (int)$getVar['id']);
                    break;
            }
            redirect($data['statusUrl'], 'location');
        }
        $sort = 'not_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(5, $action);
        $keyword = '';
        if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
            $keyword = $this->filter->html($getVar['keyword']);
            switch (strtolower($getVar['search'])) {
                case 'name':
                    $sortUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $pageUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $where = " AND not_title LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                    break;
            }
        }
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'title':
                    $pageUrl .= '/sort/title';
                    $sort = "name";
                    break;
                case 'nhanvien':
                    $pageUrl .= '/sort/nhanvien';
                    $sort = "use_username";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        #Keyword
        $data['keyword'] = $keyword;
        $data['sortUrl'] = base_url() . 'account/news' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $limmit = 10; // -1 all
        $data['listnews'] = $this->content_model->fetch('*', 'not_user =' . (int)$this->session->userdata('sessionUser') . $where, $sort, $by, $start, $limmit);
        $totalRecord = count($this->content_model->fetch('*', 'not_user =' . (int)$this->session->userdata('sessionUser'), $sort, $by));
        $config['base_url'] = base_url() . 'account/news' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        $this->load->view('home/account/news/dailylistnews', $data);
    }

    function service_requesting($page = 0)
    {
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'service';
        $this->load->library('utilslv');
        $util = utilslv::getInstance();
        $util->addScript(base_url() . 'templates/home/js/package.js');

        $this->load->model('package_user_model');
        $this->package_user_model->pagination(TRUE);
        $this->package_user_model->setLink(base_url() . 'account/service/requesting');
        $data['data'] = $this->package_user_model->lister(array(), $page);
        $data['pager'] = $this->package_user_model->pager;
        $data['sort'] = $this->package_user_model->getSort();
        $data['packages'] = $this->package_user_model->getPackage();
        $data['filter'] = $this->package_user_model->getFilter();
        $data['period'] = $this->package_user_model->getPeriod();
        $data['sortDate'] = $this->package_user_model->getSortDate();
        $data['serviceStatus'] = $this->package_user_model->getServiceStatus();
        $data['link'] = $this->package_user_model->getLink();
        $this->load->view('home/account/service/requesting', $data);
    }

    function service_expired($page = 0)
    {
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'service';
        $this->load->library('utilslv');
        $util = utilslv::getInstance();
        $util->addScript(base_url() . 'templates/home/js/package.js');

        $this->load->model('package_user_model');
        $this->package_user_model->pagination(TRUE);
        $this->package_user_model->setLink(base_url() . 'account/service/expired');
        $data['data'] = $this->package_user_model->lister(array('os' => '05'), $page);
        $data['pager'] = $this->package_user_model->pager;
        $data['sort'] = $this->package_user_model->getSort();
        $data['packages'] = $this->package_user_model->getPackage();
        $data['filter'] = $this->package_user_model->getFilter();
        $data['period'] = $this->package_user_model->getPeriod();
        $data['sortDate'] = $this->package_user_model->getSortDate();
        $data['serviceStatus'] = $this->package_user_model->getServiceStatus();
        $data['link'] = $this->package_user_model->getLink();
        $this->load->view('home/account/service/expired', $data);
    }

    function bank($user_id)
    {
        $user_id = (int)$this->uri->segment(3);
        $userId = (int)$this->session->userdata('sessionUser');
        if (isset($user_id) && !empty($user_id) && (int)$user_id > 0) {
            $userId = (int)$user_id;
        }

        $group_id = (int)$this->session->userdata('sessionGroup');
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'income';
        $data['menuType'] = 'account';
        #END Menu

        #BEGIN: Check for Bran config info Bank
        $checked = true;
        if ($group_id == BranchUser) {
            $this->load->model('branch_model');
            $shop_rule = $this->branch_model->getConfig("*", "bran_id = " . $userId);
            $bran_array = explode(",", $shop_rule->config_rule);
            if ($shop_rule && isset($bran_array) && in_array(50, $bran_array)) {
            } else {
                $checked = false;
            }
        }
        $data['checked'] = $checked;
        #END: Check for Bran config info Bank

        #END Unlink captcha
        if ($this->session->flashdata('sessionSuccessEditBank')) {
            $data['successEditBank'] = true;
        } else {
            // if ($this->input->post('isPostAccount') && time() - (int)$this->session->userdata('sessionTimePosted') <= (int)settingTimePost) {
            //     redirect(base_url() . 'account/edit', 'location');
            //     die();
            // }
            $this->load->library('form_validation');
            $data['successEditBank'] = false;
            #BEGIN: Get user

            $user = $this->user_model->get("*", "use_id = " . $userId . " AND use_status = 1 AND (use_enddate >= $currentDate OR use_enddate = 0)");
            $data['user'] = $user;
            #END Set rules
            $this->form_validation->set_rules('namebank_regis', 'lang:reemail_account_label_edit_account', 'trim|required');
            $this->form_validation->set_rules('addbank_regis', 'lang:fullname_account_label_edit_account', 'trim|required');
            $this->form_validation->set_rules('accountname_regis', 'lang:address_account_label_edit_account', 'trim|required');
            $this->form_validation->set_rules('accountnum_regis', 'lang:province_account_label_edit_account', 'trim|required');
            #BEGIN: Set message
            $this->form_validation->set_message('required', $this->lang->line('required_message'));
            $this->form_validation->set_message('_valid_nick', $this->lang->line('_valid_nick_message'));
            $this->form_validation->set_message('matches', $this->lang->line('matches_message'));
            $this->form_validation->set_message('valid_email', $this->lang->line('valid_email_message'));
            $this->form_validation->set_message('_exist_province', $this->lang->line('_exist_province_message'));
            $this->form_validation->set_message('_exist_email_edit', $this->lang->line('_exist_email_edit_message_edit_account'));
            $this->form_validation->set_message('_is_phone', $this->lang->line('_is_phone_message'));
            //$this->form_validation->set_message('_valid_captcha_edit', $this->lang->line('_valid_captcha_edit_message_edit_account'));
            $this->form_validation->set_error_delimiters('<div class="div_errorpost">', '</div>');
            #END Set message
            if ($this->form_validation->run() != FALSE) {
                $dataEdit = array(
                    "bank_name" => trim($this->filter->injection_html($this->input->post("namebank_regis"))),
                    "bank_add" => trim($this->filter->injection_html($this->input->post("addbank_regis"))),
                    "account_name" => trim($this->filter->injection_html($this->input->post("accountname_regis"))),
                    "num_account" => trim($this->input->post("accountnum_regis"))
                );
                if ($this->user_model->update($dataEdit, "use_id = " . $userId)) {
                    $this->session->set_flashdata('sessionSuccessEditBank', 1);
                }
                $this->session->set_userdata('sessionTimePosted', time());
                redirect(base_url() . trim(uri_string(), '/'), 'location');
            } else {
                $data['namebank_regis'] = $this->input->post('namebank_regis');
                $data['addbank_regis'] = $this->input->post('addbank_regis');
                $data['accountname_regis'] = $this->input->post('accountname_regis');
                $data['num_account'] = $this->input->post('num_account');
            }
        }

        #Load view
        $this->load->view('home/account/shop/bank', $data);
    }

    function kho($user_id)
    {
        $user_id = (int)$this->uri->segment(3);
        $userId = (int)$this->session->userdata('sessionUser');
        if (isset($user_id) && !empty($user_id) && (int)$user_id > 0) {
            $userId = (int)$user_id;
        }

        $group_id = (int)$this->session->userdata('sessionGroup');
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuSelected'] = 'income';
        $data['menuType'] = 'account';
        #END Menu
        #BEGIN: Check for Bran config info Bank
        $getshop = $this->shop_model->get("*", "sho_user = " . (int)$user_id);
        $this->load->model('province_model');
        $this->load->model('district_model');
        $data['province'] = $this->province_model->fetch("pre_id, pre_name", "pre_id != 1 AND pre_status = 1", "pre_order", "ASC");
        $data['kho_district'] = $this->district_model->find_by(array('ProvinceCode' => $getshop->sho_kho_province));
        #END: Check for Bran config info Bank

        #END Unlink captcha
        if ($this->session->flashdata('sessionSuccessEditBank')) {
            $data['successEditBank'] = true;
        } else {
            //            if ($this->input->post('isPostAccount') && time() - (int)$this->session->userdata('sessionTimePosted') <= (int)settingTimePost) {
            //                redirect(base_url() . 'account/edit', 'location');
            //                die();
            //            }
            $this->load->model('shop_model');
            $this->load->model('branch_model');
            $getshop = $this->shop_model->get("*", "sho_user = " . (int)$user_id);
            $data['successEditShopRuleAccount'] = false;
            $shop_rule = $this->branch_model->getConfig("*", "bran_id = " . (int)$user_id);


            #END Set message
            if ($this->input->post('isEditKho')) {
                $dataUpdate = array(
                    'sho_kho_address' => trim($this->filter->injection_html($this->input->post('address_kho_shop'))),
                    'sho_kho_province' => (int)$this->input->post('province_kho_shop'),
                    'sho_kho_district' => $this->input->post('district_kho_shop'),

                );
                if ($this->shop_model->update($dataUpdate, "sho_user = " . (int)$user_id)) {
                    $this->session->set_flashdata('sessionSuccessEditBank', 1);
                }
                $this->session->set_userdata('sessionTimePosted', time());
                redirect(base_url() . trim(uri_string(), '/'), 'location');
            } else {
                $rule = explode(",", $shop_rule->config_rule);
                $khaibaoKho = $act = '';
                if (in_array('51', $rule)) {
                    $khaibaoKho = 'readonly';
                    $act = 'disabled';
                }
                $data['khaibaoKho'] = $khaibaoKho;
                $data['act'] = $act;
                $data['address_kho_shop'] = $getshop->sho_kho_address;
                $data['province_kho_shop'] = $getshop->sho_kho_province;
                $data['district_kho_shop'] = $getshop->sho_kho_district;
            }
        }

        #Load view
        $this->load->view('home/account/branch/kho', $data);
    }

    function limitctvbran()
    {
        $data['menuPanelGroup'] = 4;
	    $data['menuSelected'] = 'chinhanh';
        $data['menuType'] = 'account';
        $this->load->library('form_validation');
        #BEGIN: Set rules

        $this->form_validation->set_rules('sho_limit_ctv', '', 'required');
        //$this->form_validation->set_rules('captcha_changepass', 'lang:captcha_changepass_label_change_password', 'required|callback__valid_captcha_changepassword');
        #END Set rules
        #BEGIN: Set message
        if ($this->form_validation->run() != FALSE) {
            $this->shop_model->update(array("sho_limit_ctv" => (int)$this->input->post("sho_limit_ctv")), "sho_user = " . (int)$this->uri->segment(3));
            redirect('/account/listbranch', 'location');
        } else {
            $branchs = $this->shop_model->get('sho_limit_ctv', "sho_status = 1 AND sho_user=" . (int)$this->uri->segment(3));
            $data['branchs'] = $branchs;
        }
        #Load view
        $this->load->view('home/account/shop/limit_ctv', $data);
    }

    function service_canceled($page = 0)
    {
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'service';
        $this->load->library('utilslv');
        $util = utilslv::getInstance();
        $util->addScript(base_url() . 'templates/home/js/package.js');

        $this->load->model('package_user_model');
        $this->package_user_model->pagination(TRUE);
        $this->package_user_model->setLink(base_url() . 'account/service/canceled');
        $data['data'] = $this->package_user_model->lister(array('os' => '06'), $page);
        $data['pager'] = $this->package_user_model->pager;
        $data['sort'] = $this->package_user_model->getSort();
        $data['packages'] = $this->package_user_model->getPackage();
        $data['filter'] = $this->package_user_model->getFilter();
        $data['period'] = $this->package_user_model->getPeriod();
        $data['sortDate'] = $this->package_user_model->getSortDate();
        $data['serviceStatus'] = $this->package_user_model->getServiceStatus();
        $data['link'] = $this->package_user_model->getLink();
        $this->load->view('home/account/service/canceled', $data);
    }

    function completePayment()
    {
        $orderId = $this->input->post('order', 0);
        $userId = (int)$this->session->userdata('sessionUser');
        if ($userId <= 0) {
            $return = array('error' => true, 'message' => 'Vui lòng đăng nhập');
        } elseif (1 && $orderId > 0) { // Check admin role here
            $this->load->model('package_user_model');
            $result = $this->package_user_model->completePayment($orderId);

            if ($result > 0) {
                $return = array('error' => false, 'message' => 'Thành công');
            } else {
                $return = array('error' => true, 'message' => 'Có lỗi');
            }
        }
        echo json_encode($return);
        exit();
    }

    function cancelOrder()
    {
        $orderId = $this->input->post('order', 0);
        $userId = (int)$this->session->userdata('sessionUser');
        if ($userId <= 0) {
            $return = array('error' => true, 'message' => 'Vui lòng đăng nhập');
        } elseif (1 && $orderId > 0) { // Check admin role here
            $this->load->model('package_user_model');
            $result = $this->package_user_model->cancelOrder($orderId);

            if ($result > 0) {
                $return = array('error' => false, 'message' => 'Thành công');
            } else {
                $return = array('error' => true, 'message' => 'Có lỗi');
            }
        }
        echo json_encode($return);
        exit();
    }

    function startService()
    {
        $orderId = $this->input->post('order', 0);
        $userId = (int)$this->session->userdata('sessionUser');
        if ($userId <= 0) {
            $return = array('error' => true, 'message' => 'Vui lòng đăng nhập');
        } elseif (1 && $orderId > 0) { // Check admin role here

            $this->load->model('package_user_model');
            $result = $this->package_user_model->startService($orderId);

            if ($result > 0) {
                $return = array('error' => false, 'message' => 'Thành công');
            } else {
                $return = array('error' => true, 'message' => 'Có lỗi');
            }
        }
        echo json_encode($return);
        exit();
    }

    function addPackage()
    {
        $this->load->library('utilslv');
        $action = new utilslv();
        $package = $this->input->post('package', 0);
        $period = $this->input->post('periods', -1);
        $userId = (int)$this->session->userdata('sessionUser');
        if ($userId <= 0) {
            $return = array('error' => true, 'message' => 'Vui lòng đăng nhập');
        } else { // Check admin role here 
            $iUserAffId = $this->input->post('iUserId');

            $data_return = [];
            $rent_header = null;
            if($this->session->userdata('token')) {
                $token = $this->session->userdata('token');
                $rent_header[] = "Authorization: Bearer $token" ;
                $rent_header[] = "Content-Type: multipart/form-data";
            }

            // data statistic affiliate order
            $url = $this->config->item('api_aff_add_order');

            $params = [
                'package_id'        => !empty($_POST['package']) ? $_POST['package'] : '',
                'limit'             => isset($_POST['numbran']) ? $_POST['numbran'] : 1,
                'user_id'           => $userId,
                'user_affiliate_id' => $iUserAffId,
                'type_pay'          => $_POST['type_pay'],
                'type_affiliate'    => $_POST['type_affiliate'],
                'discount_type'     => (int)$_POST['discount_type'] > 0 ? $_POST['discount_type'] : 1,
            ];

            $make_call = $this->callAPI('POST', $url, $params, $rent_header);
            $make_call = json_decode($make_call, true);
            if($make_call['status'] == 1) {
                $return = array('error' => false, 'message' => 'Thành công',
                'order_id' => $make_call['data']['order_id'],
                'amount' => $make_call['data']['iAmount'],
                'sServiceName' => $make_call['data']['sServiceName'],
                'link_pay' => '');
            }else {
                $return = array('error' => true, 'message' => $make_call['msg'], 'link_pay' => '');
                    echo json_encode($return);
                    die();
            }

            $name_package =!empty($return['sServiceName']) ? $return['sServiceName'] : 'Dịch vụ';
            if (!empty($_POST['type_pay']) && !empty($return['order_id']) && !empty($return['amount'])) 
            {

                if ($_POST['type_pay'] == 1) 
                {
                    $endpoint = END_POINT;
                    $partnerCode = PARTNER_CODE;
                    $accessKey = ACCESS_KEY;
                    $serectkey = SERECT_KEY;
                    $orderInfo = "Mua gói " . $name_package;
                    $returnUrl = base_url() . 'shop/service/notify';
                    $notifyurl = base_url() . 'shop/service/up-package';
                    $amount = $return['amount']."";
                    $orderid = 'Azibai-'. $return['order_id']."";
                    $requestId = 'Azibai-'. $return['order_id']."";
                    $requestType = "captureMoMoWallet";
                    $extraData = "package={$package};name={$name_package}";
                    $rawHash = "partnerCode=".$partnerCode."&accessKey=".$accessKey."&requestId=".$requestId."&amount=".$amount."&orderId=".$orderid."&orderInfo=".$orderInfo."&returnUrl=".$returnUrl."&notifyUrl=".$notifyurl."&extraData=".$extraData;
                    $signature = hash_hmac("sha256", $rawHash, $serectkey);
                    $data_mono =  array(
                        'partnerCode' => $partnerCode,
                        'accessKey' => $accessKey,
                        'requestId' => $requestId,
                        'amount' => $amount,
                        'orderId' => $orderid,
                        'orderInfo' => $orderInfo,
                        'returnUrl' => $returnUrl,
                        'notifyUrl' => $notifyurl,
                        'extraData' => $extraData,
                        'requestType' => $requestType,
                        'signature' => $signature
                    );
                    $result_momo = $this->execPostRequest($endpoint, json_encode($data_mono));
                    $return['link_pay'] = $result_momo;
                } 
                else if ($_POST['type_pay'] > 1) 
                {
                    $this->load->model('nganluong_model');
                    $user_info = $this->user_model->get('*', 'use_id = ' . $this->session->userdata('sessionUser'));

                    $payment_method = $_POST['type_pay'];
                    $bank_code = $_POST['bankcode']; // done
                    $total_amount = $return['amount'].""; // done
                    $order_id = 'Azibai-'. $return['order_id']."";   // done

                    $return_url = base_url() . 'shop/service/notify?package='.$package.'&name='.$name_package;
                    $cancel_url = base_url() . 'shop/service/cancel-notify?package='.$package.'&name='.$name_package;
                    $array_items = array();
                    $fee_shipping = 0;
                    $order_description = "";
                    $order_code = $order_id;
                    $payment_type = 1;
                    $discount_amount = 0;
                    $tax_amount = 0;
                    $buyer_fullname = $user_info->use_fullname;
                    $buyer_email = !empty($user_info->use_email) ? $user_info->use_email : 'info@azibai.com';
                    $buyer_mobile = $user_info->use_mobile;
                    $buyer_address = $user_info->use_address;

                    if ($payment_method != '' && $buyer_email != "" && $buyer_mobile != "" && $buyer_fullname != "" && filter_var($buyer_email, FILTER_VALIDATE_EMAIL)) {

                        if ($payment_method == 3) 
                        {
                            $nl_result = $this->nganluong_model->VisaCheckout($order_code, $total_amount, $payment_type, $order_description, $tax_amount, $fee_shipping, $discount_amount, $return_url, $cancel_url, $buyer_fullname, $buyer_email, $buyer_mobile, $buyer_address, $array_items);

                            $return['link_pay'] = $nl_result;

                        } 
                        else if ($payment_method == 2 && $bank_code != '') 
                        {

                            $nl_result = $this->nganluong_model->BankCheckout($order_code, $total_amount, $bank_code, $payment_type, $order_description, $tax_amount,
                                $fee_shipping, $discount_amount, $return_url, $cancel_url, $buyer_fullname, $buyer_email, $buyer_mobile,
                                $buyer_address, $array_items);

                            $return['link_pay'] = $nl_result;

                        }
                    }
                }
            }
            else if ($return['error'] != true) 
            {
                $logaction = 'Bạn đã mua thành công gói ' . $return['sServiceName'] . '. Số tiền ' . $action->my_number_format($return['amount']) . ' đ';
                $this->session->set_flashdata('flash_message_success', $logaction);
            }
        }
        echo json_encode($return);
        exit();
    }


    function addPackage_bak()
    {
        $this->load->library('utilslv');
        $action = new utilslv();
        $package = $this->input->post('package', 0);
        $period = $this->input->post('periods', -1);
        $userId = (int)$this->session->userdata('sessionUser');
        if ($userId <= 0) {
            $return = array('error' => true, 'message' => 'Vui lòng đăng nhập');
        } elseif (1 && $package > 0) { // Check admin role here 
            $id = $this->package_user_model->getPackageId(array('info_id' => $package, 'period' => $period));
            if ($id['id'] > 0) {
                $package_info = $this->package_user_model->getPackage(array('id' => $package));
                if ($period > 0) {
                    $p_time = ". Thời gian sử dụng : " . $period . " tháng";
                } else {
                    $p_time = "";
                }
                $iUserAffId = $this->input->post('iUserId');
                if($iUserAffId == 0) {
                    $iUserAffId = $userId;
                }


                $data_return = [];
                $rent_header = null;
                if($this->session->userdata('token')) {
                    $token = $this->session->userdata('token');
                    $rent_header[] = "Authorization: Bearer $token" ;
                    $rent_header[] = "Content-Type: multipart/form-data";
                }
                
                // data statistic affiliate order
                $url = $this->config->item('api_aff_add_order');
    
                $params = [
                    'package_id'        => $id['id'],
                    'limit'             => isset($_POST['numbran']) ? $_POST['numbran'] : 1,
                    'user_id'           => $userId,
                    'user_affiliate_id' => $iUserAffId,
                    'type_pay'          => $_POST['type_pay'],
                    'type_affiliate'    => $_POST['type_affiliate'],
                    'discount_type'     => $_POST['discount_type'],
                ];
                
                $make_call = $this->callAPI('POST', $url, $params, $rent_header);
                $make_call = json_decode($make_call, true);
                if($make_call['status'] == 1) {
                    $return = array('error' => false, 'message' => 'Thành công', 'order_id' => $make_call['data']['order_id'], 'amount' => $make_call['data']['iAmount'], 'link_pay' => '');
                }else {
                    $return = array('error' => true, 'message' => $make_call['msg']);
                        echo json_encode($return);
                        die();
                }
                
                $name_package =!empty($package_info[0]['name']) ? $package_info[0]['name'] : 'Dịch vụ';
                if (!empty($_POST['type_pay']) && !empty($_POST['type_pay']) && !empty($return['order_id']) && !empty($return['amount'])) 
                {

                    if ($_POST['type_pay'] == 1) 
                    {
                        $endpoint = END_POINT;
                        $partnerCode = PARTNER_CODE;
                        $accessKey = ACCESS_KEY;
                        $serectkey = SERECT_KEY;
                        $orderInfo = "Mua gói " . $name_package;
                        $returnUrl = base_url() . 'shop/service/notify';
                        $notifyurl = base_url() . 'shop/service/up-package';
                        $amount = $return['amount']."";
                        $orderid = 'Azibai-'. $return['order_id']."";
                        $requestId = 'Azibai-'. $return['order_id']."";
                        $requestType = "captureMoMoWallet";
                        $extraData = "package={$package};name={$name_package}";
                        $rawHash = "partnerCode=".$partnerCode."&accessKey=".$accessKey."&requestId=".$requestId."&amount=".$amount."&orderId=".$orderid."&orderInfo=".$orderInfo."&returnUrl=".$returnUrl."&notifyUrl=".$notifyurl."&extraData=".$extraData;
                        $signature = hash_hmac("sha256", $rawHash, $serectkey);
                        $data_mono =  array(
                            'partnerCode' => $partnerCode,
                            'accessKey' => $accessKey,
                            'requestId' => $requestId,
                            'amount' => $amount,
                            'orderId' => $orderid,
                            'orderInfo' => $orderInfo,
                            'returnUrl' => $returnUrl,
                            'notifyUrl' => $notifyurl,
                            'extraData' => $extraData,
                            'requestType' => $requestType,
                            'signature' => $signature
                        );
                        $result_momo = $this->execPostRequest($endpoint, json_encode($data_mono));
                        $return['link_pay'] = $result_momo;
                    } 
                    else if ($_POST['type_pay'] > 1) 
                    {
                        $this->load->model('nganluong_model');
                        $user_info = $this->user_model->get('*', 'use_id = ' . $this->session->userdata('sessionUser'));

                        $payment_method = $_POST['type_pay'];
                        $bank_code = $_POST['bankcode']; // done
                        $total_amount = $return['amount'].""; // done
                        $order_id = 'Azibai-'. $return['order_id']."";   // done

                        $return_url = base_url() . 'shop/service/notify?package='.$package.'&name='.$name_package;
                        $cancel_url = base_url() . 'shop/service/cancel-notify?package='.$package.'&name='.$name_package;
                        $array_items = array();
                        $fee_shipping = 0;
                        $order_description = "";
                        $order_code = $order_id;
                        $payment_type = 1;
                        $discount_amount = 0;
                        $tax_amount = 0;
                        $buyer_fullname = $user_info->use_fullname;
                        $buyer_email = $user_info->use_email;
                        $buyer_mobile = $user_info->use_mobile;
                        $buyer_address = $user_info->use_address;

                        if ($payment_method != '' && $buyer_email != "" && $buyer_mobile != "" && $buyer_fullname != "" && filter_var($buyer_email, FILTER_VALIDATE_EMAIL)) {

                            if ($payment_method == 3) 
                            {
                                $nl_result = $this->nganluong_model->VisaCheckout($order_code, $total_amount, $payment_type, $order_description, $tax_amount, $fee_shipping, $discount_amount, $return_url, $cancel_url, $buyer_fullname, $buyer_email, $buyer_mobile, $buyer_address, $array_items);

                                $return['link_pay'] = $nl_result;

                            } 
                            else if ($payment_method == 2 && $bank_code != '') 
                            {

                                $nl_result = $this->nganluong_model->BankCheckout($order_code, $total_amount, $bank_code, $payment_type, $order_description, $tax_amount,
                                    $fee_shipping, $discount_amount, $return_url, $cancel_url, $buyer_fullname, $buyer_email, $buyer_mobile,
                                    $buyer_address, $array_items);

                                $return['link_pay'] = $nl_result;

                            }
                        }
                    }
                }
                else if ($return['error'] != true) 
                {
                    $_info = $this->package_user_model->getPackageUser($id['id']);
                    $logaction = 'Bạn đã mua thành công gói ' . $package_info[0]['name'] . $p_time . '. Số tiền ' . $action->my_number_format($_info[0]->real_amount) . ' đ';
                    $this->session->set_flashdata('flash_message_success', $logaction);
                }
                
            } else {
                $this->session->set_flashdata('flash_message_error', 'Thông tin gói không hợp lệ');
                $return = array('error' => true, 'message' => 'Thông tin gói không hợp lệ');
            }
        }
        echo json_encode($return);
        exit();
    }

    function execPostRequest($url, $data)
    {
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            'Content-Type: application/json',
            'Content-Length: ' . strlen($data))
        );
        curl_setopt($ch, CURLOPT_TIMEOUT, 5);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
        $result = curl_exec($ch);
        if (curl_error($ch)) {
            $error_msg = curl_error($ch);
        }
        curl_close($ch);
        return $result;
    }

    /**
     ***************************************************************************
     * Created: 2019/05/10
     * Get price affiliate
     ***************************************************************************
     * @author: Duc<nguyenvietduckt82@gmail.com>
     * @return: string
     *  
     ***************************************************************************
    */

    private function getPriceAffiliate($id,$service_id) {
        $this->load->model('package_model');
        $this->load->model('affiliate_price_model');
        
        $aPriceDiscount = array(
            'discount_price'    => 0,
            'discount_percen'  => 0
        ); 
        if($id == 0) {
            $id = (int)$this->session->userdata('sessionUser');
        }

        $oAffUser = $this->user_model->get("affiliate_level,parent_id","use_id = " . $id);
        $aPack = $this->package_model->get_one(array('where' => 'package.id = '.$service_id));

        if(!empty($aPack)) {
            // Ưu tiên 1 : lấy giá và cấp trên set cho nó
            $aAffPrice = $this->affiliate_price_model->getwhere("*",'service_id = '.$aPack['info_id'].' && user_set = '.$oAffUser->parent_id.' && user_app = '.$id.' && id_level = '.$oAffUser->affiliate_level);
            // Ưu tiên 2 : Nếu ưu tiên 1 ko có thì lấy giá của đại lý cấp trên set cho toàn bộ affiliate cùng cấp
            if(empty($aAffPrice)) {
                $aAffPrice = $this->affiliate_price_model->getwhere("*",'service_id = '.$aPack['info_id'].' && user_set = '.$oAffUser->parent_id.' && user_app = 0 && id_level = '.$oAffUser->affiliate_level);
            }
            // Ưu tiên 3 : nếu cả 2 cái trên không có thì lấy giá azibai set cho affiliate cùng cấp
            if(empty($aAffPrice)) {
                $aAffPrice = $this->affiliate_price_model->getwhere("*",'service_id = '.$aPack['info_id'].' && user_set = 0 && user_app = 0 && id_level = '.$oAffUser->affiliate_level);
            }

            // Ưu tiên 4 : nếu ko set giá thì lấy giá gốc
           
            if(!empty($aAffPrice)) {
                $aPriceDiscount['discount_price']   = $aAffPrice['discount_price'];
                $aPriceDiscount['discount_percen']  = $aAffPrice['discount_value'];
                $aPriceDiscount['real']  = $aPack['month_price'];
            }else {
                $aPriceDiscount['discount_percen'] = 0;
                $aPriceDiscount['discount_price']   = $aPack['month_price'];
                $aPriceDiscount['real']   = $aPack['month_price'];
            }
        }
        return $aPriceDiscount;
    }

    ##Check using services for Shop who register pack open CTV Online
    ## by Bao Tran
    function CheckCurrentMyServices()
    {
        $userId = (int)$this->session->userdata('sessionUser');
        if ($userId) {
            $package = (int)$this->input->post('pack_id', 0);
            if (isset($package) && $package == 17) {
                $get_current_pack = $this->package_user_model->getCurrentPackage($userId);
                if ($get_current_pack && $get_current_pack['id'] == 7) {
                    echo '1';
                    exit();
                }
            }

            if (isset($package) && $package == 16) {
                $get_current_pack = $this->package_user_model->getCurrentPackage($userId);
                if ($get_current_pack && ($get_current_pack['id'] == 4 || $get_current_pack['id'] == 7)) {
                    echo '1';
                    exit();
                }
            }
            echo '-1';
            exit();
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
    }

    function loadCategoryHot($parent, $level)
    {
        $retArray = '';

        $select = "*";
        $whereTmp = "cat_status = 1  and parent_id='$parent' and cat_hot = 1 ";
        $category = $this->category_model->fetch($select, $whereTmp, "cat_order", "ASC");

        $retArray .= '<div class="row hotcat">';
        foreach ($category as $key => $row) {
            $link = '<a href="' . base_url() . $row->cat_id . '/' . RemoveSign($row->cat_name) . '">' . $row->cat_name . '</a>';
            $images = '<img class="img-responsive" src="' . base_url() . 'templates/home/images/category/' . $row->cat_image . '"/><br/>';
            $retArray .= '<div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">' . $images . '<strong>' . $link . '</strong>';
            $retArray .= $this->loadSupCategoryHot($row->cat_id, $level + 1);
            $retArray .= "</div>";
        }
        $retArray .= '</div>';
        return $retArray;
    }

    function loadSupCategoryHot($parent, $level)
    {
        $retArray = '';

        $select = "*";
        $whereTmp = "cat_status = 1  and parent_id='$parent'  and cat_hot = 1 ";
        $category = $this->category_model->fetch($select, $whereTmp, "cat_order", "ASC");

        $retArray .= '<ul class="supcat">';
        foreach ($category as $key => $row) {
            $link = '<a href="' . base_url() . $row->cat_id . '/' . RemoveSign($row->cat_name) . '">' . $row->cat_name . '</a>';
            $retArray .= '<li> - ' . $link . '</li>';

        }
        $retArray .= '</ul>';
        return $retArray;
    }

    function loadCategoryRoot($parent, $level)
    {
        $select = "*";
        $whereTmp = "cat_status = 1 and cate_type = 0 and parent_id='$parent'";
        $categoryRoot = $this->category_model->fetch($select, $whereTmp, "cat_order", "ASC");
        return $categoryRoot;
    }

    function supplier($page)
    {
        $userId = (int)$this->session->userdata('sessionUser');
        $this->load->model('af_product_model');
        $this->af_product_model->pagination(TRUE);
        $this->af_product_model->setCurLink('account/supplier');
        $body = array();
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $body['shopid'] = $shop->sho_id;
        $this->load->model('category_model');
        $cat_level_0 = $this->category_model->fetch("*", "parent_id = 0 AND cat_status = 1 AND cate_type = 0", "cat_name", "ASC");
        if (isset($cat_level_0)) {
            foreach ($cat_level_0 as $key => $item) {
                $cat_level_1 = $this->category_model->fetch("*", "parent_id = " . (int)$item->cat_id . " AND cat_status = 1");
                $cat_level_0[$key]->child_count = count($cat_level_1);
            }
        }
        $body['cat_level_0'] = $cat_level_0;
        $body['products'] = $this->af_product_model->getSupplierProduct(array('tbtt_product.pro_user <>' => $userId, 'tbtt_shop.shop_type >=' => 1), $page);
        $body['sort'] = $this->af_product_model->getFilterSort(array('name', 'price', 'cat', 'shop'));
        $body['pager'] = $this->af_product_model->pager;
        $body['filter'] = $this->af_product_model->getFilter();
        $body['menuSelected'] = 'shop';
        $body['menuType'] = 'account';
        $body['num'] = $page;
        $this->load->view('home/account/supplier/defaults', $body);
    }

    function get_start_end_date()
    {
        $r_month = (int)date("m");
        $r_year = (int)date("Y");
        if ($r_month == 1) {
            $calculation_month = 12;
            $calculation_year = $r_year - 1;
        } else {
            $calculation_month = $r_month - 1;
            $calculation_year = $r_year;
        }
        $test = testMode;
        if ($test == 1) {
            $calculation_month = testModeMonth;
            $calculation_year = testModeYear;
        }
        $numberDayOnMonth = cal_days_in_month(CAL_GREGORIAN, $calculation_month, $calculation_year);
        $startMonth = mktime(0, 0, 0, $calculation_month, 1, $calculation_year);
        $endMonth = mktime(23, 59, 59, $calculation_month, $numberDayOnMonth, $calculation_year);
        $arrStartEnd = array();
        $arrStartEnd[0] = $startMonth;
        $arrStartEnd[1] = $endMonth;
        return $arrStartEnd;
    }

    function get_list_child_tree($userid)
    {
        $this->load->model('user_tree_model');
        if ($userid > 0) {
            $listChild = $this->user_tree_model->fetch("*", "parent = " . $userid);
            return $listChild;
        }
    }

    function get_revenue_by_user($user_id, $type, $monthyear)
    {
        $this->load->model('revenue_model');
        $revenueByDay = $this->revenue_model->get($select = "*", $where = "user_id = $user_id AND type = '" . $type . "' AND revenue_month_year = '" . $monthyear . "'");
        return $revenueByDay;
    }

    function moreDetailCommission($user_id, $type, $month, $year)
    {

        $isPersonal = 0;
        $isPersonal = $_REQUEST['isPersonal'];
        $this->load->model('commission_model');
        $this->load->model('revenue_store_category_model');
        $this->load->model('revenue_model');
        $startdate = mktime(0, 0, 0, $month, 1, $year);
        $enddate = strtotime("first day of next month", $startdate);
        $data['user'] = $this->user_model->get('*', array('use_id' => $user_id));
        if ($isPersonal) {
            $where = "tbtt_revenue.user_id = $user_id AND type = '" . $type . "' AND revenue_month_year = '" . $month . '-' . $year . "'";
            if ($type == '03') {
                $this->load->model('package_user_model');
                $this->load->model('package_daily_user_model');
                $data['listUserPackage'] = $this->package_user_model->fetch_join("tbtt_user.use_username,tbtt_package_user.*,tbtt_package.info_id,tbtt_package_info.name, tbtt_shop.sho_link", "INNER", "tbtt_user", "tbtt_package_user.user_id = tbtt_user.use_id", "INNER", "tbtt_package", "tbtt_package.id = tbtt_package_user.package_id", "INNER", "tbtt_package_info", "tbtt_package_info.id = tbtt_package.info_id", "INNER", "tbtt_shop", "tbtt_package_user.user_id = tbtt_shop.sho_user", "tbtt_package_info.id > 1 AND sponser_id = $user_id AND UNIX_TIMESTAMP(begined_date) >= " . $startdate . " AND UNIX_TIMESTAMP(begined_date) <= " . $enddate);
                $data['listUserPackageDaily'] = $this->package_daily_user_model->fetch_join("tbtt_user.use_username,tbtt_package_daily_user.*,tbtt_package_daily.*, tbtt_shop.sho_link", "INNER", "tbtt_user", "tbtt_package_daily_user.user_id = tbtt_user.use_id", "INNER", "tbtt_package_daily", "tbtt_package_daily.id = tbtt_package_daily_user.package_id", "INNER", "tbtt_shop", "tbtt_package_daily_user.user_id = tbtt_shop.sho_user", "", "", "", "sponser_id = $user_id AND UNIX_TIMESTAMP(begined_date) >= " . $startdate . " AND UNIX_TIMESTAMP(begined_date) <= " . $enddate);
            } else {
                $data['revenue_store'] = $this->revenue_store_category_model->fetch_join("tbtt_category.cat_name, tbtt_user.use_username, tbtt_revenue_store_category.*", "INNER", "tbtt_user", "tbtt_revenue_store_category.rsc_shop_id = tbtt_user.use_id", "LEFT", "tbtt_category", "tbtt_revenue_store_category.rsc_category_id = tbtt_category.cat_id", "", "", "", "tbtt_revenue_store_category.rsc_parent_id = $user_id AND tbtt_revenue_store_category.rsc_type = '$type' AND tbtt_revenue_store_category.rsc_created_month_year = '" . $month . '-' . $year . "'");
                $inWhere = '';
                switch ($type) {
                    case '01':
                        # code...
                        $inWhere = 'tbtt_showcart.shc_buyer_parent';
                        break;
                    case '02':
                    case '05':
                        # code...
                        $inWhere = 'tbtt_showcart.shc_saler_parent';
                        break;
                    case '04':
                        # code...
                        $inWhere = 'tbtt_showcart.af_id_parent';
                        break;
                }
                $this->db->select('tbtt_showcart.*, use_username,cat_id, cat_name, rsc_percent, sho_id, sho_link');
                $this->db->from('tbtt_showcart');
                $this->db->join('tbtt_user', 'tbtt_user.use_id = tbtt_showcart.shc_saler');
                $this->db->join('tbtt_category', 'tbtt_category.cat_id = tbtt_showcart.pro_category');
                $this->db->join('tbtt_revenue_store_category', 'tbtt_revenue_store_category.rsc_category_id = tbtt_showcart.pro_category');
                $this->db->join('tbtt_shop', 'tbtt_shop.sho_user = tbtt_showcart.shc_saler');
                $this->db->where($inWhere, (int)$user_id);
                $this->db->where('tbtt_showcart.shc_status', '98');
                $this->db->where('tbtt_revenue_store_category.rsc_type', $type);
                $this->db->where('tbtt_showcart.shc_change_status_date >=', $startdate);
                $this->db->where('tbtt_showcart.shc_change_status_date <=', $enddate);
                $this->db->group_by('tbtt_category.cat_id');
                $query = $this->db->get();
                $data['retail'] = $query->result();
                $query->free_result();

                $this->load->model('account_model');
                $this->load->model('showcart_model');
                $this->db->select('tbtt_showcart.*,tbtt_product.pro_name, cat_id, cat_name');
                $this->db->from('tbtt_showcart');
                $this->db->join('tbtt_product', 'tbtt_showcart.shc_product = tbtt_product.pro_id');
                $this->db->join('tbtt_category', 'tbtt_category.cat_id = tbtt_showcart.pro_category');
                $this->db->join('tbtt_shop', 'tbtt_shop.sho_user = tbtt_showcart.shc_saler');
                $this->db->where($inWhere, (int)$user_id);
                $this->db->where('tbtt_showcart.shc_status', '98');
                $this->db->where('tbtt_showcart.shc_change_status_date >=', $enddate);
                $this->db->where('tbtt_showcart.shc_change_status_date <=', $enddate);
                $query = $this->db->get();
                $data['retail_pro'] = $query->result();
                $query->free_result();
            }
        } else {
            $where = "tbtt_revenue.parent_id = $user_id AND type = '" . $type . "' AND revenue_month_year = '" . $month . '-' . $year . "'";
        }
        $revenueService = $this->revenue_model->fetch_join("tbtt_user.use_username, tbtt_revenue.*", "INNER", "tbtt_user", "tbtt_revenue.user_id = tbtt_user.use_id", "", "", "", "", "", "", $where, $order = "id", $by = "DESC");
        $monthyear = $month . '-' . $year;
        $profit = $this->get_revenue_by_user($user_id, $type, $monthyear);
        $data['profit'] = $profit;
        $data['revenueList'] = $revenueService;
        $data['isPersonal'] = $isPersonal;
        $data['type'] = $type;
        $data['month'] = $month;
        $data['year'] = $year;
        $data['menuSelected'] = 'commission';
        $data['menuType'] = 'account';
        if (count($data['revenueList']) == 0) {
            redirect(base_url() . "account", 'location');
        }
        $this->load->view('home/account/commission/more_detail', $data);
    }

    function isChild($child_id)
    {
        $userid = (int)$this->session->userdata('sessionUser');
        $listChild = $this->get_list_child_tree($userid);
        $isChild = false;
        //$arrListChild[] = $commission->user_id;
        foreach ($listChild as $child) {
            if ($child_id == $child->user_id) {
                $isChild = true;
            };
        }
        return $isChild;
    }

    function detailcommission($id)
    {
        $this->load->model('commission_model');
        $this->load->model('revenue_store_category_model');
        $commission = $this->commission_model->get("*", "id = $id");

        if ($commission->empty_position > 0) {
            $this->load->model('commission_empty_position_model');
            $commissioEmpty = $this->commission_empty_position_model->get("*", "user_id = $commission->user_id AND type = '" . $commission->type . "' AND  created_month_year = '" . $commission->commission_month . "'");
        }
        $profit = $this->get_revenue_by_user($commission->user_id, $commission->type, $commission->commission_month);
        $listChild = $this->get_list_child_tree($commission->user_id);
        $arrListChild = array();
        //$arrListChild[] = $commission->user_id;
        foreach ($listChild as $child) {
            $arrListChild[] = $child->user_id;
        }
        $type_commis = (int)$_REQUEST['personal'];
        $listChildStr = implode(",", $arrListChild);
        $useridIn = '';
        if ($listChildStr != '') {
            $useridIn = "user_id IN ($listChildStr)  AND ";
        }

        if ($commission->type == '03') {
            $this->load->model('revenue_model');
            $this->load->model('package_user_model');
            $this->load->model('package_daily_user_model');
            if (isset($type_commis) && $type_commis > 0 && $commission->description = 'Hoa hồng bán Giải pháp cá nhân') {
                $month = explode('-', $commission->commission_month);
                $startdate = mktime(0, 0, 0, $month[0], 1, $month[1]);
                $enddate = strtotime("first day of next month", $startdate);
                // $arr_start_end_date = $this->get_start_end_date();
                $this->load->model('package_user_model');
                $this->load->model('package_daily_user_model');

                // $userid = (int)$this->session->userdata('sessionUser');
                $userid = $commission->user_id;
                if ($userid > 0) {
                    $listUserPackage = $this->package_user_model->fetch_join("tbtt_user.use_username,tbtt_package_user.*,tbtt_package.info_id,tbtt_package_info.name, tbtt_shop.sho_link", "INNER", "tbtt_user", "tbtt_package_user.user_id = tbtt_user.use_id", "INNER", "tbtt_package", "tbtt_package.id = tbtt_package_user.package_id", "INNER", "tbtt_package_info", "tbtt_package_info.id = tbtt_package.info_id", "INNER", "tbtt_shop", "tbtt_package_user.user_id = tbtt_shop.sho_user", "tbtt_package_info.id > 1 AND sponser_id = $userid AND UNIX_TIMESTAMP(begined_date) >= " . $startdate . " AND UNIX_TIMESTAMP(begined_date) <= " . $enddate);
                    $listUserPackageDaily = $this->package_daily_user_model->fetch_join("sum(tbtt_package_daily_user.real_amount) as total, tbtt_user.use_username,tbtt_package_daily_user.*,tbtt_package_daily.*, tbtt_shop.sho_link", "INNER", "tbtt_user", "tbtt_package_daily_user.user_id = tbtt_user.use_id", "INNER", "tbtt_package_daily", "tbtt_package_daily.id = tbtt_package_daily_user.package_id", "INNER", "tbtt_shop", "tbtt_package_daily_user.user_id = tbtt_shop.sho_user", "", "", "", "sponser_id = $userid AND UNIX_TIMESTAMP(begined_date) >= " . $startdate . " AND UNIX_TIMESTAMP(begined_date) <= " . $enddate, "", "", "", "", 'tbtt_package_daily_user.package_id');
                    $revenueService = $this->revenue_model->fetch_join("tbtt_user.use_username, tbtt_revenue.*", "INNER", "tbtt_user", "tbtt_revenue.user_id = tbtt_user.use_id", "", "", "", "", "", "", $where = "user_id = $commission->user_id AND type = '" . $commission->type . "' AND revenue_month_year = '" . $commission->commission_month . "'", $order = "id", $by = "DESC");
                }
            } else {
                if ($commission->group_id == Developer2User) {
                    $revenueService = $this->revenue_model->fetch_join("tbtt_user.use_username, tbtt_revenue.*", "INNER", "tbtt_user", "tbtt_revenue.user_id = tbtt_user.use_id", "", "", "", "", "", "", $where = "user_id = $commission->user_id AND type = '" . $commission->type . "' AND revenue_month_year = '" . $commission->commission_month . "'", $order = "id", $by = "DESC");
                    $month = explode('-', $commission->commission_month);
                    $startMonth = mktime(0, 0, 0, $month[0], 1, $month[1]);

                    $endMonth = strtotime("first day of next month", $startMonth);

                    $listUserPackage = $this->package_user_model->fetch_join("tbtt_user.use_username,tbtt_package_user.*,tbtt_package.info_id,tbtt_package_info.name, tbtt_shop.sho_link", "INNER", "tbtt_user", "tbtt_package_user.user_id = tbtt_user.use_id", "INNER", "tbtt_package", "tbtt_package.id = tbtt_package_user.package_id", "INNER", "tbtt_package_info", "tbtt_package_info.id = tbtt_package.info_id", "INNER", "tbtt_shop", "tbtt_package_user.user_id = tbtt_shop.sho_user", "sponser_id = $commission->user_id AND UNIX_TIMESTAMP(begined_date) >= " . $startMonth . " AND UNIX_TIMESTAMP(begined_date) <= " . $endMonth);
                    $listUserPackageDaily = $this->package_daily_user_model->fetch_join("tbtt_user.use_username,tbtt_package_daily_user.*,tbtt_package_daily.*, tbtt_shop.sho_link", "INNER", "tbtt_user", "tbtt_package_daily_user.user_id = tbtt_user.use_id", "INNER", "tbtt_package_daily", "tbtt_package_daily.id = tbtt_package_daily_user.package_id", "INNER", "tbtt_shop", "tbtt_package_daily_user.user_id = tbtt_shop.sho_user", "", "", "", "sponser_id = $commission->user_id AND UNIX_TIMESTAMP(begined_date) >= " . $startMonth . " AND UNIX_TIMESTAMP(begined_date) <= " . $endMonth);
                } else {
                    if ($useridIn != '') {
                        $revenueServiceFromDev1Up = $this->revenue_model->fetch_join("tbtt_user.use_username, tbtt_revenue.*", "INNER", "tbtt_user", "tbtt_revenue.user_id = tbtt_user.use_id", "", "", "", "", "", "", $where = $useridIn . "type = '" . $commission->type . "' AND revenue_month_year = '" . $commission->commission_month . "'", $order = "id", $by = "DESC");
                    }
                }
            }
        } else {
            $this->load->model('revenue_model');
            if ($commission->group_id == Developer2User) {
                $revenue = $this->revenue_store_category_model->fetch_join("tbtt_category.cat_name, tbtt_user.use_username, tbtt_revenue_store_category.*", "INNER", "tbtt_user", "tbtt_revenue_store_category.rsc_shop_id = tbtt_user.use_id", "LEFT", "tbtt_category", "tbtt_revenue_store_category.rsc_category_id = tbtt_category.cat_id", "", "", "", "tbtt_revenue_store_category.rsc_parent_id = $commission->user_id AND tbtt_revenue_store_category.rsc_type = '$commission->type' AND tbtt_revenue_store_category.rsc_created_month_year = '$commission->commission_month'");
            } else {
                if ($useridIn != '') {
                    $revenueFromDev1Up = $this->revenue_model->fetch_join("tbtt_user.use_username, tbtt_revenue.*", "INNER", "tbtt_user", "tbtt_revenue.user_id = tbtt_user.use_id", "", "", "", "", "", "", $where = $useridIn . "type = '" . $commission->type . "' AND revenue_month_year = '" . $commission->commission_month . "'", $order = "id", $by = "DESC");
                }
            }
        }

        $body = array();
        $body['revenue'] = $revenue;
        $body['commission'] = $commission;
        $body['commissioEmpty'] = $commissioEmpty;
        $body['profit'] = $profit;
        $body['revenueService'] = $revenueService;
        $body['listUserPackage'] = $listUserPackage;
        $body['listUserPackageDaily'] = $listUserPackageDaily;
        $body['revenueFromDev1Up'] = $revenueFromDev1Up;
        $body['revenueServiceFromDev1Up'] = $revenueServiceFromDev1Up;
        $body['menuSelected'] = 'commission';
        $body['menuType'] = 'account';
        if ($commission->type == '03') {
            if (isset($type_commis) && $type_commis > 0) {
                $this->load->view('home/account/commission/detail_personnal', $body);
            } else {
                $this->load->view('home/account/commission/detail03', $body);
            }
        } else {
            $this->load->view('home/account/commission/detail', $body);
        }
    }

    function detailcommissionpositionempty($id)
    {
        $this->load->model('commission_model');
        $this->load->model('revenue_store_category_model');
        $commission = $this->commission_model->get("*", "id = $id");
        if ($commission->empty_position > 0) {
            $this->load->model('revenue_model');
            $this->load->model('commission_empty_position_model');
            $commis = $this->revenue_model->fetch_join("tbtt_revenue.*, tbtt_user.use_username", "INNER", "tbtt_user", "tbtt_user.use_id = tbtt_revenue.user_id", "", "", "", "", "", "", "tbtt_revenue.user_id = $commission->empty_position AND type = '" . $commission->type . "' AND  revenue_month_year = '" . $commission->commission_month . "'");
            $commissioEmpty = $this->commission_empty_position_model->fetch_join("tbtt_commission_empty_position.*, tbtt_user.use_username", "INNER", "tbtt_user", "tbtt_user.use_id = tbtt_commission_empty_position.user_child_id", "", "", "", "", "", "", "user_id = $commission->user_id AND user_child_id = $commission->empty_position AND type = '" . $commission->type . "' AND  created_month_year = '" . $commission->commission_month . "'");
        }

        $body = array();
        $body['commis'] = $commis;
        $body['commission'] = $commission;
        $body['commissioEmpty'] = $commissioEmpty;
        $body['menuSelected'] = 'commission';
        $body['menuType'] = 'account';
        $this->load->view('home/account/commission/detail_position_empty', $body);
    }

    function detailcomission_type1($id)
    {
        $person = $_REQUEST['personal'];
        $this->load->model('commission_model');
        $commission = $this->commission_model->get("*", "id = $id");
        $body = array();
        if (count($commission) > 0) {
            $date_comis = explode('-', $commission->commission_month);
            $currentday = strtotime('first day of next month', strtotime($date_comis[1] . '-' . $date_comis[0] . '-01'));
            $firstday = mktime(0, 0, 0, $date_comis[0], 1, $date_comis[1]);
            // $currentday = mktime(23, 59, 59, $date_comis[0], date("d",$lastday), $date_comis[1]);
            $this->load->model('account_model');
            $this->load->model('showcart_model');
            $body['commission'] = $commission;
            $body['menuSelected'] = 'commission';
            $body['menuType'] = 'account';
            if (isset($person) && $person > 0) {
                $this->db->select('tbtt_showcart.*, use_username,cat_id, cat_name, rsc_percent, sho_id, sho_link');
                $this->db->from('tbtt_showcart');
                $this->db->join('tbtt_user', 'tbtt_user.use_id = tbtt_showcart.shc_saler');
                $this->db->join('tbtt_category', 'tbtt_category.cat_id = tbtt_showcart.pro_category');
                $this->db->join('tbtt_revenue_store_category', 'tbtt_revenue_store_category.rsc_category_id = tbtt_showcart.pro_category');
                $this->db->join('tbtt_shop', 'tbtt_shop.sho_user = tbtt_showcart.shc_saler');
                $this->db->where('tbtt_showcart.af_id_parent', (int)$this->session->userdata('sessionUser'));
                $this->db->where('tbtt_showcart.shc_status', '98');
                $this->db->where('tbtt_revenue_store_category.rsc_type', '04');
                $this->db->where('tbtt_showcart.shc_change_status_date >=', $firstday);
                $this->db->where('tbtt_showcart.shc_change_status_date <=', $currentday);
                $this->db->group_by('tbtt_category.cat_id');
                $query = $this->db->get();
                $body['retail'] = $query->result();
                $query->free_result();

                $this->load->model('account_model');
                $this->load->model('showcart_model');
                $this->db->select('tbtt_showcart.*,tbtt_product.pro_name, cat_id, cat_name');
                $this->db->from('tbtt_showcart');
                $this->db->join('tbtt_product', 'tbtt_showcart.shc_product = tbtt_product.pro_id');
                $this->db->join('tbtt_category', 'tbtt_category.cat_id = tbtt_showcart.pro_category');
                $this->db->join('tbtt_shop', 'tbtt_shop.sho_user = tbtt_showcart.shc_saler');
                $this->db->where('tbtt_showcart.af_id_parent', (int)$this->session->userdata('sessionUser'));
                $this->db->where('tbtt_showcart.shc_status', '98');
                $this->db->where('tbtt_showcart.shc_change_status_date >=', $firstday);
                $this->db->where('tbtt_showcart.shc_change_status_date <=', $currentday);
                $query = $this->db->get();
                $body['retail_pro'] = $query->result();
                $query->free_result();
                $this->load->view('home/account/commission/detail_personnal_typee4', $body);
            } else {
                $listChild = $this->get_list_child_tree((int)$this->session->userdata('sessionUser'));
                $arrListChild = array();
                foreach ($listChild as $child) {
                    $arrListChild[] = $child->user_id;
                }
                $listChildStr = implode(",", $arrListChild);
                $this->db->select('tbtt_showcart.*, use_username, rsc_percent, cat_id, cat_name');
                $this->db->from('tbtt_showcart');
                $this->db->join('tbtt_user', 'tbtt_user.use_id = tbtt_showcart.shc_saler_parent');
                $this->db->join('tbtt_category', 'tbtt_category.cat_id = tbtt_showcart.pro_category');
                $this->db->join('tbtt_revenue_store_category', 'tbtt_revenue_store_category.rsc_category_id = tbtt_showcart.pro_category');
                $this->db->where('tbtt_showcart.shc_status', '98');
                if ($listChildStr != '') {
                    $usearray = explode(",", $listChildStr);
                    $usearray = array_map('intval', $usearray);
                    $this->db->where_in('tbtt_showcart.af_id_parent', $usearray);
                }
                $this->db->where('tbtt_revenue_store_category.rsc_type', '05');
                $this->db->where('tbtt_showcart.shc_change_status_date >=', $firstday);
                $this->db->where('tbtt_showcart.shc_change_status_date <=', $currentday);
                $query = $this->db->get();
                $body['retail'] = $query->result();
                $query->free_result();
                $this->load->view('home/account/commission/detail04', $body);
            }
        }
    }

    function detailcomission_type2($id)
    {
        $person = $_REQUEST['personal'];
        $this->load->model('commission_model');
        $commission = $this->commission_model->get("*", "id = $id");
        $body = array();
        if (count($commission) > 0) {
            $date_comis = explode('-', $commission->commission_month);
            $currentday = strtotime('first day of next month', strtotime($date_comis[1] . '-' . $date_comis[0] . '-01'));
            $firstday = mktime(0, 0, 0, $date_comis[0], 1, $date_comis[1]);
            // $currentday = mktime(23, 59, 59, $date_comis[0], date("d",$lastday), $date_comis[1]);
            $this->load->model('account_model');
            $this->load->model('showcart_model');
            $body['commission'] = $commission;
            $body['menuSelected'] = 'commission';
            $body['menuType'] = 'account';
            if (isset($person) && $person > 0) {
                $this->db->select('DISTINCT tbtt_showcart.*, use_username,cat_id, cat_name, rsc_percent, sho_id, sho_link');
                $this->db->from('tbtt_showcart');
                $this->db->join('tbtt_user', 'tbtt_user.use_id = tbtt_showcart.shc_saler');
                $this->db->join('tbtt_category', 'tbtt_category.cat_id = tbtt_showcart.pro_category');
                $this->db->join('tbtt_revenue_store_category', 'tbtt_revenue_store_category.rsc_category_id = tbtt_showcart.pro_category');
                $this->db->join('tbtt_shop', 'tbtt_shop.sho_user = tbtt_showcart.shc_saler');
                $this->db->where('tbtt_showcart.af_id_parent', (int)$this->session->userdata('sessionUser'));
                $this->db->where('tbtt_showcart.shc_status', '98');
                $this->db->where('tbtt_revenue_store_category.rsc_type', '04');
                $this->db->where('tbtt_showcart.shc_change_status_date >=', $firstday);
                $this->db->where('tbtt_showcart.shc_change_status_date <=', $currentday);
                $this->db->group_by('tbtt_category.cat_id');
                $query = $this->db->get();
                $body['retail'] = $query->result();
                $query->free_result();

                $this->load->model('account_model');
                $this->load->model('showcart_model');
                $this->db->select('DISTINCT tbtt_showcart.*,tbtt_product.pro_name, cat_id, cat_name');
                $this->db->from('tbtt_showcart');
                $this->db->join('tbtt_product', 'tbtt_showcart.shc_product = tbtt_product.pro_id');
                $this->db->join('tbtt_category', 'tbtt_category.cat_id = tbtt_showcart.pro_category');
                $this->db->join('tbtt_shop', 'tbtt_shop.sho_user = tbtt_showcart.shc_saler');
                $this->db->where('tbtt_showcart.af_id_parent', (int)$this->session->userdata('sessionUser'));
                $this->db->where('tbtt_showcart.shc_status', '98');
                $this->db->where('tbtt_showcart.shc_change_status_date >=', $firstday);
                $this->db->where('tbtt_showcart.shc_change_status_date <=', $currentday);
                $query = $this->db->get();
                $body['retail_pro'] = $query->result();
                $query->free_result();
                $this->load->view('home/account/commission/detail_personnal_typee4', $body);
            } else {
                $listChild = $this->get_list_child_tree((int)$this->session->userdata('sessionUser'));
                $arrListChild = array();
                foreach ($listChild as $child) {
                    $arrListChild[] = $child->user_id;
                }
                $listChildStr = implode(",", $arrListChild);
                $this->db->select('DISTINCT tbtt_showcart.*, use_username, rsc_percent, cat_id, cat_name');
                $this->db->from('tbtt_showcart');
                $this->db->join('tbtt_user', 'tbtt_user.use_id = tbtt_showcart.shc_saler_parent');
                $this->db->join('tbtt_category', 'tbtt_category.cat_id = tbtt_showcart.pro_category');
                $this->db->join('tbtt_revenue_store_category', 'tbtt_revenue_store_category.rsc_category_id = tbtt_showcart.pro_category');
                $this->db->where('tbtt_showcart.shc_status', '98');
                if ($listChildStr != '') {
                    $usearray = explode(",", $listChildStr);
                    $usearray = array_map('intval', $usearray);
                    $this->db->where_in('tbtt_showcart.af_id_parent', $usearray);
                }
                $this->db->where('tbtt_revenue_store_category.rsc_type', '05');
                $this->db->where('tbtt_showcart.shc_change_status_date >=', $firstday);
                $this->db->where('tbtt_showcart.shc_change_status_date <=', $currentday);
                $query = $this->db->get();
                $body['retail'] = $query->result();
                $query->free_result();

                $this->load->view('home/account/commission/detail04', $body);
            }
        }
    }

    function detailcomission_type4($id)
    {
        $person = $_REQUEST['personal'];
        $this->load->model('commission_model');
        $commission = $this->commission_model->get("*", "id = $id");
        $body = array();

        if (count($commission) > 0) {
            // $dayfirst =  strtotime('first day of this month', strtotime('-1 month', $commission->created_date));
            // $daylast =  strtotime('first day of next month', strtotime('-1 month', $commission->created_date));
            $date_comis = explode('-', $commission->commission_month);
            $currentday = strtotime('first day of next month', strtotime($date_comis[1] . '-' . $date_comis[0] . '-01'));
            $firstday = mktime(0, 0, 0, $date_comis[0], 1, $date_comis[1]);
            // $currentday = mktime(23, 59, 59, $date_comis[0], date("d",$lastday), $date_comis[1]);
            $this->load->model('account_model');
            $this->load->model('showcart_model');
            $body['commission'] = $commission;
            $body['menuSelected'] = 'commission';
            $body['menuType'] = 'account';
            if (isset($person) && $person > 0) {
                $this->db->select('tbtt_showcart.*, use_username,cat_id, cat_name, rsc_percent, sho_id, sho_link');
                $this->db->from('tbtt_showcart');
                $this->db->join('tbtt_user', 'tbtt_user.use_id = tbtt_showcart.shc_saler');
                $this->db->join('tbtt_category', 'tbtt_category.cat_id = tbtt_showcart.pro_category');
                $this->db->join('tbtt_revenue_store_category', 'tbtt_revenue_store_category.rsc_category_id = tbtt_showcart.pro_category');
                $this->db->join('tbtt_shop', 'tbtt_shop.sho_user = tbtt_showcart.shc_saler');
                $this->db->where('tbtt_showcart.af_id_parent', (int)$this->session->userdata('sessionUser'));
                $this->db->where('tbtt_showcart.shc_status', '98');
                $this->db->where('tbtt_revenue_store_category.rsc_type', '04');
                $this->db->where('tbtt_showcart.shc_change_status_date >=', $firstday);
                $this->db->where('tbtt_showcart.shc_change_status_date <=', $currentday);
                $this->db->group_by('tbtt_category.cat_id');
                $query = $this->db->get();
                $body['retail'] = $query->result();
                $query->free_result();

                $this->load->model('account_model');
                $this->load->model('showcart_model');
                $this->db->select('DISTINCT tbtt_showcart.*,tbtt_product.pro_name, cat_id, cat_name');
                $this->db->from('tbtt_showcart');
                $this->db->join('tbtt_product', 'tbtt_showcart.shc_product = tbtt_product.pro_id');
                $this->db->join('tbtt_category', 'tbtt_category.cat_id = tbtt_showcart.pro_category');
                $this->db->join('tbtt_shop', 'tbtt_shop.sho_user = tbtt_showcart.shc_saler');
                $this->db->where('tbtt_showcart.af_id_parent', (int)$this->session->userdata('sessionUser'));
                $this->db->where('tbtt_showcart.shc_status', '98');
                $this->db->where('tbtt_showcart.shc_change_status_date >=', $firstday);
                $this->db->where('tbtt_showcart.shc_change_status_date <=', $currentday);
                $query = $this->db->get();
                $body['retail_pro'] = $query->result();

                $query->free_result();
                $this->load->view('home/account/commission/detail_personnal_typee4', $body);
            } else {
                $listChild = $this->get_list_child_tree((int)$this->session->userdata('sessionUser'));
                $arrListChild = array();
                foreach ($listChild as $child) {
                    $arrListChild[] = $child->user_id;
                }
                $listChildStr = implode(",", $arrListChild);
                $this->db->select('DISTINCT tbtt_showcart.*, use_username, rsc_percent, cat_id, cat_name');
                $this->db->from('tbtt_showcart');
                $this->db->join('tbtt_user', 'tbtt_user.use_id = tbtt_showcart.shc_saler_parent');
                $this->db->join('tbtt_category', 'tbtt_category.cat_id = tbtt_showcart.pro_category');
                $this->db->join('tbtt_revenue_store_category', 'tbtt_revenue_store_category.rsc_category_id = tbtt_showcart.pro_category');
                $this->db->where('tbtt_showcart.shc_status', '98');
                if ($listChildStr != '') {
                    $usearray = explode(",", $listChildStr);
                    $usearray = array_map('intval', $usearray);
                    $this->db->where_in('tbtt_showcart.af_id_parent', $usearray);
                }
                $this->db->where('tbtt_revenue_store_category.rsc_type', '04');
                $this->db->where('tbtt_showcart.shc_change_status_date >=', $firstday);
                $this->db->where('tbtt_showcart.shc_change_status_date <=', $currentday);
                $query = $this->db->get();
                $body['retail'] = $query->result();
                $query->free_result();
                $this->load->view('home/account/commission/detail04', $body);
            }
        }
    }

    function detailcomission_type5($id)
    {
        $person = $_REQUEST['personal'];
        $this->load->model('commission_model');
        $commission = $this->commission_model->get("*", "id = $id");
        $body = array();
        $body['menuSelected'] = 'commission';
        $body['menuType'] = 'account';
        $body['commission'] = $commission;
        if (count($commission) > 0) {
            $date_comis = explode('-', $commission->commission_month);
            $currentday = strtotime('first day of next month', strtotime($date_comis[1] . '-' . $date_comis[0] . '-01'));
            $firstday = mktime(0, 0, 0, $date_comis[0], 1, $date_comis[1]);
            // $currentday = mktime(23, 59, 59, $date_comis[0], date("d",$lastday), $date_comis[1]);
            $this->load->model('account_model');
            $this->load->model('showcart_model');
            if (isset($person) && $person > 0) {
                $this->db->select('DISTINCT tbtt_showcart.*, use_username,cat_id, cat_name, rsc_percent, sho_id, sho_link');
                $this->db->from('tbtt_showcart');
                $this->db->join('tbtt_user', 'tbtt_user.use_id = tbtt_showcart.shc_saler');
                $this->db->join('tbtt_category', 'tbtt_category.cat_id = tbtt_showcart.pro_category');
                $this->db->join('tbtt_revenue_store_category', 'tbtt_revenue_store_category.rsc_category_id = tbtt_showcart.pro_category');
                $this->db->join('tbtt_shop', 'tbtt_shop.sho_user = tbtt_showcart.shc_saler');
                $this->db->where('tbtt_showcart.shc_saler_parent', (int)$this->session->userdata('sessionUser'));
                $this->db->where('tbtt_showcart.shc_status', '98');
                $this->db->where('tbtt_revenue_store_category.rsc_type', '05');
                $this->db->where('tbtt_showcart.shc_change_status_date >=', $firstday);
                $this->db->where('tbtt_showcart.shc_change_status_date <=', $currentday);
                $this->db->group_by('tbtt_category.cat_id');
                $query = $this->db->get();
                $body['retail'] = $query->result();
                $query->free_result();

                $this->db->select('tbtt_showcart.*,tbtt_product.pro_name, cat_id, cat_name');
                $this->db->from('tbtt_showcart');
                $this->db->join('tbtt_product', 'tbtt_showcart.shc_product = tbtt_product.pro_id');
                $this->db->join('tbtt_category', 'tbtt_category.cat_id = tbtt_showcart.pro_category');
                $this->db->join('tbtt_shop', 'tbtt_shop.sho_user = tbtt_showcart.shc_saler');
                $this->db->where('tbtt_showcart.shc_saler_parent', (int)$this->session->userdata('sessionUser'));
                $this->db->where('tbtt_showcart.shc_status', '98');
                $this->db->where('tbtt_showcart.shc_change_status_date >=', $firstday);
                $this->db->where('tbtt_showcart.shc_change_status_date <=', $currentday);
                $query = $this->db->get();
                $body['retail_pro'] = $query->result();
                $query->free_result();
                $this->load->view('home/account/commission/detail_personnal_typee5', $body);
            } else {
                $listChild = $this->get_list_child_tree((int)$this->session->userdata('sessionUser'));
                $arrListChild = array();
                foreach ($listChild as $child) {
                    $arrListChild[] = $child->user_id;
                }
                $listChildStr = implode(",", $arrListChild);
                $this->db->select('DISTINCT tbtt_showcart.*, use_username, rsc_percent, cat_id, cat_name');
                $this->db->from('tbtt_showcart');
                $this->db->join('tbtt_user', 'tbtt_user.use_id = tbtt_showcart.shc_saler_parent');
                $this->db->join('tbtt_category', 'tbtt_category.cat_id = tbtt_showcart.pro_category');
                $this->db->join('tbtt_revenue_store_category', 'tbtt_revenue_store_category.rsc_category_id = tbtt_showcart.pro_category');

                $this->db->where('tbtt_showcart.shc_status', '98');
                if ($listChildStr != '') {
                    $usearray = explode(",", $listChildStr);
                    $usearray = array_map('intval', $usearray);
                    $this->db->where_in('tbtt_showcart.shc_saler_parent', $usearray);
                }
                $this->db->where('tbtt_revenue_store_category.rsc_type', '05');
                $this->db->where('tbtt_showcart.shc_change_status_date >=', $firstday);
                $this->db->where('tbtt_showcart.shc_change_status_date <=', $currentday);
                $query = $this->db->get();
                $body['retail'] = $query->result();
                $query->free_result();
                $this->load->view('home/account/commission/detail05', $body);
            }
        }
    }

    function commission($page)
    {
        $userId = (int)$this->session->userdata('sessionUser');
        $this->load->model('commission_model');
        $this->commission_model->pagination(TRUE);
        $this->commission_model->setCurLink('account/commission');
        $body = array();
        $body['list'] = $this->commission_model->getCommissionList(array('user_id' => $userId), $page);
        $body['sort'] = $this->commission_model->getAdminSort();
        $body['pager'] = $this->commission_model->pager;
        $body['filter'] = $this->commission_model->getFilter();
        $body['total'] = $this->commission_model->getTotal();
        $body['menuSelected'] = 'commission';
        $body['menuType'] = 'account';
        $this->load->view('home/account/commission/default', $body);
    }

    function user_income($page = 0)
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id != StaffUser && $group_id != NormalUser) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $linkParrams = array();
        $this->load->model('account_model');
        $isPaging = $this->input->get_post('excel', 0) == 1 ? FALSE : TRUE;
        $this->account_model->pagination($isPaging);
        $body = array();
        $filter = array();
        $requesP = $_REQUEST;
        $uid = (int)$this->session->userdata('sessionUser');
        $filter['where'] = array();
        $filter['page'] = $page;
        $filter['where']['user_id'] = $uid;
        $filter['where']['status'] = isset($_REQUEST['status']) ? (int)$_REQUEST['status'] : 0;
        $linkParrams[] = 'status=' . $filter['where']['status'];

        $ctype = isset($_REQUEST['ctype']) ? $_REQUEST['ctype'] : '';
        if ($ctype != '') {
            $filter['where']['type'] = $ctype;
            $linkParrams[] = 'ctype=' . $ctype;
        } else {
            $filter['where_in']['type'] = array('01', '02', '03', '04', '05', '07', '08');
        }

        $month = isset($_REQUEST['month']) ? $_REQUEST['month'] : '';
        $year = isset($_REQUEST['year']) ? $_REQUEST['year'] : '';
        if (!isset($_REQUEST['month'])) {
            $month = date("m", strtotime("-1 months"));
            $year = date("Y", strtotime("-1 months"));
        }
        if ($month != '' && $year != '') {
            $filter['where']['month_year'] = $month . '-' . $year;
            $linkParrams[] = 'month=' . $month;
            $linkParrams[] = 'year=' . $year;
            $requesP['month'] = $month;
            $requesP['year'] = $year;
        } else {
            $defaultMonth = date('m-Y', strtotime('first day of last month'));
            $filter['where']['month_year'] = $defaultMonth;
            list($month, $year) = explode('-', $defaultMonth);
            $linkParrams[] = 'month=' . $month;
            $linkParrams[] = 'year=' . $year;
            $requesP['month'] = $month;
            $requesP['year'] = $year;
        }

        $filter['select'] = 'tbtt_money.*';
        $filter['select'] .= ', DATE_FORMAT(created_date, \'%d/%m/%Y %h:%i\') AS created_date';
        $sort = isset($_REQUEST['sort']) ? $_REQUEST['sort'] : 'id';
        $dir = isset($_REQUEST['dir']) ? $_REQUEST['dir'] : 'desc';
        $requesP['sort'] = $sort;
        $requesP['dir'] = $dir;
        switch ($sort) {
            case 'group':
                $filter['order_by'] = "group_id $dir , id desc";
                break;
            case 'amount':
                $filter['order_by'] = "amount $dir , id desc";
                break;
            case 'created_date':
                $filter['order_by'] = "created_date $dir , id desc";
                break;
            default:
                $filter['order_by'] = "id desc";

        }
        $filter['sufix'] = '?' . implode('&', array_merge($linkParrams, array('sort=' . $sort, 'dir=' . $dir)));
        $filter['link'] = base_url() . 'account/income/user';
        $body['status'] = $this->account_model->getPaymentStatus();
        //Remove type 5, 6
        unset($body['status'][4]);
        unset($body['status'][5]);
        $body['user'] = $this->account_model->getUserInfo($uid);
        $body['accounts'] = $this->account_model->getAccounts($filter);
        $body['pager'] = $this->account_model->pager;
        $body['num'] = $page;
        $body['sort'] = $this->account_model->getAdminSort($linkParrams);
        $body['groups'] = $this->account_model->getUserGroup();
        $body['types'] = $this->account_model->getFilterType();
        $body['ctypes'] = $this->account_model->getCommissionType();
        $body['link'] = base_url() . 'account/income/user';
        $body['filter'] = $requesP;
        $amountFilter = array(
            'where' => array(
                'user_id' => $uid
            ),
            'where_not_in' => array(
                'status' => array(9)
            )
        );
        $body['user']['havingAmount'] = $this->account_model->getAccountAmount($amountFilter);

        $bankingFilter = array(
            'where' => array(
                'user_id' => $uid,
                'status' => 1
            )
        );
        $body['user']['bankingAmount'] = $this->account_model->getAccountAmount($bankingFilter);
        $body['menuPanelGroup'] = 4;
	   $body['menuSelected'] = 'income';
        $body['menuType'] = 'account';
        $this->load->model('commission_model');
        $whereCommission = array();
        $commissionList = array();
        foreach ($body['accounts'] as $key => $value) {
            $whereCommission['user_id'] = $value['user_id'];
            $whereCommission['group_id'] = $value['group_id'];
            $whereCommission['parent_id'] = $value['parent_id'];
            //$whereCommission['CAST(commission AS DECIMAL(20, 2)) = '] =  $value['amount'];
            $whereCommission['type'] = $value['type'];
            $whereCommission['commission_month'] = $value['month_year'];
            $commissionItem = $this->commission_model->get('*', $whereCommission);
            $commissionItem->moneyId = $value['id'];
            $commissionList[$value['id']] = $commissionItem;
        }

        $body['commissionList'] = $commissionList;
        $this->load->view('home/account/income/default', $body);
    }

    function provisional_income($page = 0)
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id != StaffUser && $group_id != NormalUser) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $month_af = $this->input->post('month_af');
        $year_af = $this->input->post('year_af');
        if (isset($month_af) && (int)$month_af > 0 && isset($year_af) && (int)$year_af > 0) {
            $firstday = mktime(0, 0, 0, $month_af, 1, $year_af);
            // $currentday = strtotime('first day of next month ',$firstday);
            $currentday = strtotime('first day of next month', $firstday);
        } else {
            //  $firstday =  strtotime('first day of this month', time());
            $firstday = mktime(0, 0, 0, date("m"), 1, date("Y"));
            $currentday = mktime(23, 59, 59, date("m"), date("d"), date("Y"));
        }
        $body['month_af'] = $month_af;
        $body['year_af'] = $year_af;
        $this->load->model('account_model');
        $this->load->model('showcart_model');
        $this->db->select('tbtt_showcart.*, tbtt_product.pro_name, tbtt_product.pro_image, tbtt_product.pro_dir, tbtt_product.pro_cost, tbtt_product.pro_category, tbtt_detail_product.*');
        $this->db->from('tbtt_showcart');
        $this->db->join('tbtt_product', 'tbtt_showcart.shc_product = tbtt_product.pro_id');
        $this->db->join('tbtt_detail_product', 'tbtt_detail_product.id = tbtt_showcart.shc_dp_pro_id', 'left');
        $this->db->where('tbtt_showcart.af_id', (int)$this->session->userdata('sessionUser'));
        $this->db->where_in('tbtt_showcart.shc_status', array('01', '02', '03', '98'));
        $this->db->where('tbtt_showcart.shc_change_status_date >=', $firstday);
        $this->db->where('tbtt_showcart.shc_change_status_date <=', $currentday);
        $query = $this->db->get();
        $body['provisional'] = $query->result();
        $query->free_result();
	    $body['menuPanelGroup'] = 4;
        $body['menuSelected'] = 'income';
        $body['menuType'] = 'account';
        $get_u = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $this->session->userdata('sessionUser') . '"');
        switch ($get_u[0]->use_group) {
            case AffiliateStoreUser:
            case BranchUser:
                if ($get_u[0]->domain != '') {
                    $domain = $get_u[0]->domain;
                } else {
                    $parent = $get_u[0]->sho_link;
                }
                break;
            case StaffStoreUser:
            case StaffUser:
                $get_p = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_u[0]->parent_id . '"');

                if ($get_p[0]->domain != '') {
                    $domain = $get_p[0]->domain;
                } else {
                    $parent = $get_p[0]->sho_link;
                }
                break;
            case AffiliateUser:
                $get_p = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_u[0]->parent_id . '"');
                if ($get_p[0]->use_group == AffiliateStoreUser || $get_p[0]->use_group == BranchUser) {
                    if ($get_p[0]->domain != '') {
                        $domain = $get_p[0]->domain;
                    } else {
                        $parent = $get_p[0]->sho_link;
                    }
                } else {
                    if ($get_p[0]->use_group == StaffStoreUser || $get_p[0]->use_group == StaffUser) {
                        $get_p1 = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_p[0]->parent_id . '"');
                        if ($get_p1[0]->domain != '') {
                            $domain = $get_p1[0]->domain;
                        } else {
                            $parent = $get_p1[0]->sho_link;
                        }
                    } else {
                        $get_p1 = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_p[0]->parent_id . '"');
                        if ($get_p1[0]->use_group == StaffStoreUser && $get_p[0]->use_group == StaffUser) {
                            $get_p2 = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $get_p1[0]->parent_id . '"');
                            if ($get_p1[0]->domain != '') {
                                $domain = $get_p2[0]->domain;
                            } else {
                                $parent = $get_p2[0]->sho_link;
                            }
                        }
                    }
                }
                break;

        }
        $body['domain'] = $domain;
        $body['parent'] = $parent;
        $this->load->view('home/account/income/provisional', $body);
    }

    function findParentByID($catid)
    {
        $this->load->model('category_model');
        if ($catid > 0) {
            $calv = $this->category_model->get('*', 'cat_id = ' . $catid);
            if ($calv && $calv->cat_level == 4) {
                $catlv3 = $this->category_model->get('*', 'cat_level = 3 AND cat_id = ' . $calv->parent_id);
                $catlv2 = $this->category_model->get('*', 'cat_level = 2 AND cat_id = ' . $catlv3->parent_id);
                $catlv1 = $this->category_model->get('*', 'cat_level = 1 AND cat_id = ' . $catlv2->parent_id);
                return $catlv1;
            } elseif ($calv && $calv->cat_level == 3) {
                $catlv2 = $this->category_model->get('*', 'cat_level = 2 AND cat_id = ' . $calv->parent_id);
                $catlv1 = $this->category_model->get('*', 'cat_level = 1 AND cat_id = ' . $catlv2->parent_id);
                return $catlv1;
            } elseif ($calv && $calv->cat_level == 2) {
                $catlv1 = $this->category_model->get('*', 'cat_level = 1 AND cat_id = ' . $calv->parent_id);
                return $catlv1;
            }
            return $calv;
        }
    }

    function isWed($date)
    {
        $isWed = date('D', $date);
        if ($isWed == 'Wed') {
            return $date;
        } else {
            return "";
        }
    }

    function provisional_income_store($page = 0)
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id != StaffUser && $group_id != NormalUser) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $isWed = date('D', time());
        if ($isWed == 'Wed') {
            $firstday = mktime(0, 0, 0, date("m"), date("d"), date("Y"));
            $currentday = mktime(23, 59, 59, date("m"), date("d"), date("Y"));
        } else {
            $startday = strtotime("-1 week");
            for ($i = $startday; $i <= time(); $i += 86400) {
                if ($this->isWed($i)) {
                    $firstday = mktime(0, 0, 0, date("m", $i), date("d", $i), date("Y", $i));
                    $currentday = mktime(23, 59, 59, date("m"), date("d"), date("Y"));
                    break;
                }
            }
        }

        if ($this->session->userdata('sessionGroup') == AffiliateStoreUser) {
            $tree = array();            
            $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN ('. BranchUser .','. StaffStoreUser .') AND use_status = 1 AND parent_id = "'. $this->session->userdata('sessionUser') .'"');
            if (! empty($sub_tructiep)) {
                foreach ($sub_tructiep as $key => $value) {
                    //Nếu là chi nhánh, lấy danh sách nhân viên
                    if ($value->use_group == StaffStoreUser) {
                        //Lấy danh sách CN dưới nó cua NVGH
                        $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                        if (! empty($sub_cn)) {
                            foreach ($sub_cn as $k => $vlue) {
                                $tree[] = $vlue->use_id;
                            }
                        }
                    } else {
                        $tree[] = $value->use_id;
                    }
                }
            }
            $id = implode(",", $tree);
            $saler = '((tbtt_showcart.shc_saler=' . (int)$this->session->userdata('sessionUser') . ' AND pro_of_shop=0)';
            if (!empty($id)) {
                $saler .= ' OR ((tbtt_showcart.shc_saler IN('. $id .')) AND pro_of_shop>0)';
            }
            $saler .= ')';
        } else {
            $saler = 'tbtt_showcart.shc_saler = ' . (int)$this->session->userdata('sessionUser');
        }
        $this->load->model('account_model');
        $this->db->select('tbtt_showcart.*, af_id, tbtt_product.af_rate, tbtt_product.af_amt, tbtt_product.pro_name, tbtt_product.pro_image, tbtt_product.pro_dir, tbtt_product.pro_cost, tbtt_product.pro_category, tbtt_category.cat_name, tbtt_category.cat_id');
        $this->db->from('tbtt_showcart');
        $this->db->join('tbtt_product', 'tbtt_showcart.shc_product = tbtt_product.pro_id');
        $this->db->join('tbtt_category', 'tbtt_showcart.pro_category = tbtt_category.cat_id', 'left');
        // $this->db->where('(tbtt_showcart.shc_saler = ', $id.')');
        $this->db->where_in('tbtt_showcart.shc_status', array('01', '02', '03', '98'));
        $this->db->where($saler);
        $this->db->where('tbtt_showcart.shc_change_status_date >= ', $firstday);
        $this->db->where('tbtt_showcart.shc_change_status_date <= ', $currentday);
        $query = $this->db->get();
        $body['provisional'] = $query->result();

        $query->free_result();
        $this->db->select('SUM(pro_price*shc_quantity) AS total_price, tbtt_showcart.*, tbtt_category.cat_name, tbtt_category.cat_id');
        $this->db->from('tbtt_showcart');
        $this->db->join('tbtt_product', 'tbtt_showcart.shc_product = tbtt_product.pro_id');
        $this->db->join('tbtt_category', 'tbtt_showcart.pro_category = tbtt_category.cat_id', 'left');
        $this->db->group_by('tbtt_showcart.pro_category');
        $this->db->where($saler);
        $this->db->where_in('tbtt_showcart.shc_status', array('01', '02', '03', '98'));
        // $this->db->where('pro_of_shop >', '0');
        $this->db->where('tbtt_showcart.shc_change_status_date >= ', $firstday);
        $this->db->where('tbtt_showcart.shc_change_status_date <= ', $currentday);
        $query = $this->db->get();
        $body['total_shc'] = $query->result();
        $query->free_result();
        $categories = array();
        foreach ($body['total_shc'] as $item) {
            $categories[] = $this->findParentByID($item->cat_id);
        }
        $body['categories'] = $categories;
	    $body['menuPanelGroup'] = 4;
        $body['menuSelected'] = 'income';
        $body['menuType'] = 'account';
        $get_u = $this->user_model->fetch_join('use_id, parent_id, use_group, sho_link, domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "'. $this->session->userdata('sessionUser') .'"');
        switch ($get_u[0]->use_group) {
            case AffiliateStoreUser:
            case BranchUser:
                if ($get_u[0]->domain != '') {
                    $domain = $get_u[0]->domain;
                } else {
                    $parent = $get_u[0]->sho_link;
                }
                break;
        }
        $body['domain'] = $domain;
        $body['parent'] = $parent;
        $this->load->view('home/account/income/provisional_store', $body);
    }

    function tamtinhGH($page = 0)
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id != StaffUser && $group_id != NormalUser) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $isWed = date('D', time());
        if ($isWed == 'Wed') {
            $firstday = mktime(0, 0, 0, date("m"), date("d"), date("Y"));
            $currentday = mktime(23, 59, 59, date("m"), date("d"), date("Y"));
        } else {
            $startday = strtotime("-1 week");
            for ($i = $startday; $i <= time(); $i += 86400) {
                if ($this->isWed($i)) {
                    $firstday = mktime(0, 0, 0, date("m", $i), date("d", $i), date("Y", $i));
                    $currentday = mktime(23, 59, 59, date("m"), date("d"), date("Y"));
                    break;
                }
            }
        }
        $tree = array();
        // $tree[] = (int)$this->session->userdata('sessionUser');
        $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . AffiliateUser . ',' . StaffStoreUser . ',' . StaffUser . ') AND use_status = 1 AND parent_id = "' . $this->session->userdata('sessionUser') . '"');
        if (!empty($sub_tructiep)) {
            foreach ($sub_tructiep as $key => $value) {
                //Nếu là chi nhánh, lấy danh sách nhân viên

                if ($value->use_group == StaffStoreUser || $value->use_group == StaffUser) {
                    //Lấy danh sách CN dưới nó cua NVGH
                    $sub_aff = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . AffiliateUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_aff)) {
                        foreach ($sub_aff as $k => $vlue) {
                            $tree[] = $vlue->use_id;
                        }
                    }
                } else {
                    $tree[] = $value->use_id;
                }
            }
        }
        $id = implode(",", $tree);
        $saler = '((tbtt_showcart.shc_saler=' . (int)$this->session->userdata('sessionUser') . ' AND pro_of_shop=0)';
        if (!empty($id)) {
            $saler .= ' OR (tbtt_showcart.af_id IN(' . $id . ') AND tbtt_showcart.shc_saler=' . (int)$this->session->userdata('sessionUser') . ')';
        }
        $saler .= ')';
        $this->load->model('account_model');
        $this->db->select('tbtt_showcart.*,tbtt_showcart.af_rate as af_rateshc, tbtt_showcart.af_amt as af_amtshc,af_id, tbtt_product.af_rate, tbtt_product.af_amt,tbtt_product.pro_name,tbtt_product.pro_image, tbtt_product.pro_dir, tbtt_product.pro_cost, tbtt_product.pro_category, tbtt_category.cat_name, tbtt_category.cat_id');
        $this->db->from('tbtt_showcart');
        $this->db->join('tbtt_product', 'tbtt_showcart.shc_product = tbtt_product.pro_id');
        $this->db->join('tbtt_category', 'tbtt_showcart.pro_category = tbtt_category.cat_id', 'left');
        // $this->db->where('(tbtt_showcart.shc_saler = ', $id.')');
        $this->db->where_in('tbtt_showcart.shc_status', array('01', '02', '03', '98'));
        $this->db->where($saler);
        $this->db->where('tbtt_showcart.shc_change_status_date >= ', $firstday);
        $this->db->where('tbtt_showcart.shc_change_status_date <= ', $currentday);
        $query = $this->db->get();
        $body['provisional'] = $query->result();

        $query->free_result();
        $this->db->select('sum(pro_price*shc_quantity) as total_price,tbtt_showcart.af_rate as af_rateshc, tbtt_showcart.af_amt as af_amtshc, tbtt_showcart.*,tbtt_category.cat_name, tbtt_category.cat_id');
        $this->db->from('tbtt_showcart');
        $this->db->join('tbtt_product', 'tbtt_showcart.shc_product = tbtt_product.pro_id');
        $this->db->join('tbtt_category', 'tbtt_showcart.pro_category = tbtt_category.cat_id', 'left');
        $this->db->group_by('tbtt_showcart.pro_category');
        $this->db->where($saler);
        $this->db->where_in('tbtt_showcart.shc_status', array('01', '02', '03', '98'));
        // $this->db->where('pro_of_shop >', '0');
        $this->db->where('tbtt_showcart.shc_change_status_date >= ', $firstday);
        $this->db->where('tbtt_showcart.shc_change_status_date <= ', $currentday);
        $query = $this->db->get();
        $body['total_shc'] = $query->result();
        $query->free_result();
        $categories = array();
        foreach ($body['total_shc'] as $item) {
            $categories[] = $this->findParentByID($item->cat_id);
        }
        $body['categories'] = $categories;
	    $body['menuPanelGroup'] = 4;
        $body['menuSelected'] = 'income';
        $body['menuType'] = 'account';
        $get_u = $this->user_model->fetch_join('use_id,parent_id, use_group, sho_link,domain', "LEFT", "tbtt_shop", "sho_user = use_id", 'use_id = "' . $this->session->userdata('sessionUser') . '"');
        switch ($get_u[0]->use_group) {
            case AffiliateStoreUser:
            case BranchUser:
                if ($get_u[0]->domain != '') {
                    $domain = $get_u[0]->domain;
                } else {
                    $parent = $get_u[0]->sho_link;
                }
                break;
        }
        $body['domain'] = $domain;
        $body['parent'] = $parent;
        $this->load->view('home/account/income/provisional_OfStore', $body);
    }

    function income_detail($id)
    {
        if ($id == '') {
            $id = $this->uri->segment('4');
        }
        $this->load->model('account_model');
        $money = $this->account_model->get("*", "id = " . $id);
        $data['money'] = $money;
        if ($this->session->userdata('sessionGroup') == 2) {
            $where = "af_id = " . (int)$this->session->userdata('sessionUser'); //AND not_enddate >= $currentDate
        } elseif ($this->session->userdata('sessionGroup') == 3) {
            $where = "shc_saler = " . (int)$this->session->userdata('sessionUser'); //AND not_enddate >= $currentDate
        }
        $where .= " AND shc_status = '98'";
        $sort = 'shc_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageSort = '';
        $pageUrl = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(5, $action);
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort

        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $totalRecord = count($this->showcart_model->fetch("shc_id", $where, 0, "", ""));
        $config['base_url'] = base_url() . 'account/income/detail/' . $id . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $data['sTT'] = $start + 1;
        #Fetch record
        if ($this->session->userdata('sessionGroup') == 2) {
            $select = "tbtt_product.pro_id, tbtt_product.pro_name ,tbtt_product.pro_sku ,tbtt_product.pro_category ,tbtt_showcart.shc_quantity,tbtt_showcart.shc_orderid, tbtt_showcart.shc_quantity, tbtt_showcart.shc_total, tbtt_showcart.pro_price, tbtt_showcart.af_rate, tbtt_showcart.af_amt, tbtt_shop.sho_name, tbtt_shop.sho_link";

            $money_create_date = strtotime($money->created_date);

            $m_end = strtotime('first day of this month', $money_create_date);
            $m_start = strtotime('first day of last month', $money_create_date);

            $where .= " AND shc_change_status_date >= " . $m_start . " AND shc_change_status_date <= " . $m_end;
            $limit = settingOtherAccount;
            $data['showcart'] = $this->showcart_model->fetch_join($select, "INNER", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", "INNER", "tbtt_shop", "tbtt_showcart.shc_saler = tbtt_shop.sho_user", $where, $sort, $by, $start, $limit);
            $totalRecord = count($this->showcart_model->fetch("shc_id", $where, 0, "", ""));
            $config['base_url'] = base_url() . 'account/income/detail/' . $id . $pageUrl . '/page/';
            $config['total_rows'] = $totalRecord;
            $config['per_page'] = settingOtherAccount;
            $config['num_links'] = 1;
            $config['uri_segment'] = 4;
            $config['cur_page'] = $start;
            $this->pagination->initialize($config);
            $data['linkPage'] = $this->pagination->create_links();
        } elseif ($this->session->userdata('sessionGroup') == 3) {
            $select = "tbtt_product.pro_id, tbtt_product.pro_name ,tbtt_product.pro_sku ,tbtt_product.pro_category,  tbtt_showcart.af_id ,tbtt_showcart.shc_quantity,tbtt_showcart.shc_orderid, tbtt_showcart.shc_quantity, tbtt_showcart.shc_total, tbtt_showcart.pro_price, tbtt_showcart.af_rate, tbtt_showcart.af_amt, tbtt_user.use_username, tbtt_user.use_id";
            $m_end = strtotime($money->created_date);
            $m_start = $m_end - 604800;
            $where .= " AND shc_change_status_date >= " . $m_start . " AND shc_change_status_date <= " . $m_end;
            $limit = 20;
            $totalRecord = count($this->showcart_model->fetch_join($select, "INNER", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", "LEFT", "tbtt_user", "tbtt_showcart.shc_buyer = tbtt_user.use_id", $where, $sort, $by, $start, ''));
            $config['base_url'] = base_url() . 'account/income/detail/' . $id . $pageUrl . '/page/';
            $config['total_rows'] = $totalRecord;
            $config['per_page'] = 20;
            $config['num_links'] = 5;
            $config['uri_segment'] = 5;
            $config['cur_page'] = $start;
            $this->pagination->initialize($config);
            $data['linkPage'] = $this->pagination->create_links();
            $data['showcart'] = $this->showcart_model->fetch_join($select, "INNER", "tbtt_product", "tbtt_showcart.shc_product = tbtt_product.pro_id", "LEFT", "tbtt_user", "tbtt_showcart.shc_buyer = tbtt_user.use_id", $where, $sort, $by, $start, $limit);


            //Get % discount for Shop
            $discountShop = $this->shop_model->get('sho_id, sho_discount_rate', 'sho_user = ' . (int)$this->session->userdata('sessionUser'));
            $data['discountShop'] = $discountShop->sho_discount_rate > 0 ? $discountShop->sho_discount_rate : 0;

        }
        $created_date = strtotime($money->created_date);
        $p = "SELECT * FROM `tbtt_revenue_store_category_weekly` where rsc_created_date_str = '" . date("d-m-Y", $created_date) . "' AND rsc_shop_id = " . (int)$this->session->userdata('sessionUser') . " AND rsc_type IN('02','05')";
        $queryp = $this->db->query($p);
        // echo $this->db->last_query(); die;
        $revenue = $queryp->result();

        $q = "SELECT DISTINCT c.cat_id, c.cat_name FROM tbtt_product as p left JOIN `tbtt_category` as c on c.cat_id = p.pro_category where p.pro_status = 1 and c.cat_id IS NOT NULL";
        $queryq = $this->db->query($q);
        $category_list = $queryq->result();
        $categories = array();
        foreach ($category_list as $items) {
            $categories[$items->cat_id] = $items->cat_name;
        }
        #Load view
        $data['m_start'] = $m_start;
        $data['m_end'] = $m_end;
        $data['revenue'] = $revenue;
        $data['categories'] = $categories;
        $data['menuSelected'] = 'income';
        $data['menuType'] = 'account';
        $this->load->view('home/account/income/detail', $data);
    }

    function comments($page)
    {
        $numlink = 3;
        $per_page = settingOtherAccount;

        $this->load->model('comment_model');
        $body = array();
        $userId = (int)$this->session->userdata('sessionUser');
        $group_id = (int)$this->session->userdata('sessionGroup');

        if($group_id == StaffStoreUser) {
            $oUser = $this->user_model->get("*","use_id = " . $userId  . ' AND use_status = 1');
            $userId = $oUser->parent_id;
        }

        $filter = array();
        $filter['not_user'] = $userId;
        $filter['limit'] = $per_page;
        $filter['page'] = $page;
        $body['comments'] = $this->comment_model->getCommenbyUser($filter);
        $config = array();
        $config['cur_page'] = $page;
        $config['total_rows'] = $this->comment_model->getNumCommenbyUser($filter);
        $config['base_url'] = base_url() . 'account/comments';
        $config['uri_segment'] = 5;
        $config['cur_tag_open'] = '<li><span class="current">';
        $config['cur_tag_close'] = '</span></li>';
        $config['per_page'] = $per_page;
        $config['num_links'] = $numlink;
        $config['suffix'] = '';
        $this->load->library('pagination');
        $this->pagination->initialize($config);
        $body['pager'] = $this->pagination->create_links();
	    $body['menuPanelGroup'] = 4;
        $body['menuSelected'] = 'news';
        $body['menuType'] = 'account';
        $this->load->view('home/account/comments/defaults', $body);
    }

    function del_comment()
    {
        $id = (int)$this->input->post('noc_id');
        $this->load->model('comment_model');
        $deleteRow = array('noc_id' => $id);
        $this->comment_model->delete($deleteRow);
        echo '1';
        exit();
    }

    function delete_promotion()
    {
        $id = (int)$this->input->post('id');
        // Delete old row
        $deleteRow = array('id' => $id);

        $this->product_promotion_model->deleteRow($deleteRow);
        echo json_encode(array('error' => false));
        exit();
    }
    
    function delete_detail_product(){
        $id = (int)$this->input->post('id');
        $pro_QC = $this->detail_product_model->fetch_join("tbtt_product.pro_dir, tbtt_detail_product.dp_pro_id, tbtt_detail_product.dp_images", "INNER", "tbtt_product", "tbtt_product.pro_id = tbtt_detail_product.dp_pro_id", "", "", "", "", "", "", "tbtt_detail_product.id = " . $id);
        if ($pro_QC) {
            
        // Delete old row
        $deleteRow = array('id' => $id);
        if($this->detail_product_model->delete($deleteRow)){
                $dir_image = $pro_QC[0]->pro_dir;
                $name_pic = $pro_QC[0]->dp_images;
                $this->load->library('ftp');
                $config['hostname'] = IP_CLOUDSERVER;
                $config['username'] = USER_CLOUDSERVER;
                $config['password'] = PASS_CLOUDSERVER;
                $config['port']     = PORT_CLOUDSERVER;                
                $config['debug']    = FALSE;
                $this->ftp->connect($config);
                $this->db->cache_delete_all();

                $pathImage = "/public_html/media/images/product/";
                $ldir = array();
                $lfile = array();
                $ldir = $this->ftp->list_files('/public_html/media/images/product');
                $lfile = $this->ftp->list_files('/public_html/media/images/product/'. $dir_image);

                if (in_array($dir_image, $ldir) && in_array($name_pic, $lfile)) {
                    $this->ftp->delete_file($pathImage . $dir_image . '/' . $name_pic);                
                    $this->ftp->delete_file($pathImage . $dir_image . '/thumbnail_1_' . $name_pic);
                    $this->ftp->delete_file($pathImage . $dir_image . '/thumbnail_2_' . $name_pic);
                    $this->ftp->delete_file($pathImage . $dir_image . '/thumbnail_3_' . $name_pic);
                    $this->ftp->close();
                    echo "1";
                    exit();
                }
            
            }
        }
        redirect(base_url() . 'account/product/edit/' . $this->uri->segment(4));
        echo json_encode(array('error' => false));
        exit();
    }

    function delete_detail_pro_row_qc()
    {
        $num = (int)$this->input->post('num');
        $dir_image = $this->input->post('pro_dir');
        $name_pic = $this->input->post('img_name');
        if ($name_pic != "" && $dir_image != "" && $num > 0) {
            $this->load->library('ftp');
            $config['hostname'] = IP_CLOUDSERVER;
            $config['username'] = USER_CLOUDSERVER;
            $config['password'] = PASS_CLOUDSERVER;
            $config['port']     = PORT_CLOUDSERVER;                
            $config['debug']    = FALSE;
            $this->ftp->connect($config);
            $this->db->cache_delete_all();
            
            $pathImage = "/public_html/media/images/product/";
            $ldir = array();
            $lfile = array();
            $ldir = $this->ftp->list_files('/public_html/media/images/product');
            $lfile = $this->ftp->list_files('/public_html/media/images/product/'. $dir_image);
                
            if (in_array($dir_image, $ldir) && in_array($name_pic, $lfile)) {
                $this->ftp->delete_file($pathImage . $dir_image . '/' . $name_pic);                
                $this->ftp->delete_file($pathImage . $dir_image . '/thumbnail_1_' . $name_pic);
                $this->ftp->delete_file($pathImage . $dir_image . '/thumbnail_2_' . $name_pic);
                $this->ftp->delete_file($pathImage . $dir_image . '/thumbnail_3_' . $name_pic);
                
                $get_sess_img_qc = $this->session->userdata('image_name_qc');
                $array = array();
                if (!empty($get_sess_img_qc)) {
                    $image_ = explode(',', $get_sess_img_qc);
                    //unset($image_[$num - 1]);
                    foreach($image_ as $key => $value){
                        if($value != $name_pic){
                            $array[] = $value;
                            echo $value;
                        }
                    }
                    $img_name_qc_del = implode(',', $array);
                }
                $image_name_qc = $this->session->set_userdata('image_name_qc', $img_name_qc_del);
                $this->ftp->close();
                echo "1";
                exit();
            }
            if (!file_exists('system/cache/index.html')) {
                $this->load->helper('file');
                @write_file('system/cache/index.html', '<p>Directory access is forbidden.</p>');
            }
            
            //echo "1";
           // exit();
        } else {
            echo "-1";
            exit();
        }
    }

    function updatePayment()
    {
        $id = $this->input->post('id', 0);
        $status = $this->input->post('status', 0);
        $return = array('error' => true, 'message' => 'Yêu cầu không hợp lệ');
        $uid = (int)$this->session->userdata('sessionUser');
        if ($id > 0 && $status > 0 && $uid > 0 && in_array($status, array(3, 4))) {
            $this->load->model('account_model');
            $return = $this->account_model->updatePayment($id, $status, $uid);
        }
        echo json_encode($return);
        exit();
    }

    public function ordersDonhang()
    {
        if ($this->input->server('REQUEST_METHOD') == 'POST') {
            if ($this->input->post('do') == "accept") {
                $this->_thanhtoan($this->input->post('order_id'));
            } elseif ($this->input->post('do') == "acceptcp") {
                $this->_thanhtoanCoupon($this->input->post('order_id'));
            // } elseif ($this->input->post('do') == "finish") {
            //     $this->_orderfinish($this->input->post('order_id'));
            } elseif ($this->input->post('do') == "cancel") {
                $this->_huydonhang($this->input->post('order_id'));
            } elseif ($this->input->post('do') == "testmode") {
                $this->_testmode($this->input->post('order_id'));
            }
        }
        die("-1");//loi
    }

    public function finishOrderShopGiao()
    {
        $order_id = (int)$this->input->post('order_id');
        if ($this->input->post('do') == "finish" && $order_id > 0) {
            if($this->session->userdata('sessionGroup') == StaffStoreUser) {
                $uid = $this->session->userdata('sessionUser');
                $parent_id = $this->user_model->get("parent_id", "use_id = $uid")->parent_id;
                $order_saler = $parent_id;
            } else {
                $order_saler = $this->session->userdata('sessionUser');
            }
            // $order_saler = $this->session->userdata('sessionUser');
            $orderClient = "AZB" . $order_id;
            $order_cart = $this->showcart_model->getDetailOrders(array('order_saler' => $order_saler, 'id' => $order_id, 'order_status' => '02'));
            $this->order_model->updateOrderCode($orderClient, '03', $order_saler, $order_id);
            $this->order_model->updateUserProcess($order_id, $this->session->userdata('sessionUser'));
            $_products = array();
            foreach ($order_cart as $vals) {
                $products[] = array('id' => $vals->pro_id, 'shc_quantity' => $vals->shc_quantity, 'pro_instock' => $vals->pro_instock, 'pro_buy' => $vals->pro_buy);
            }

            foreach ($products as $values) {
                if ($values['pro_buy'] > 0 || $values['pro_instock'] > 0) {
                    $this->product_model->updateProBuyInstock($values);
                }
            }
            if ($order_cart[0]->ord_semail) {
                $this->load->model("shop_mail_model");
                $this->shop_mail_model->sendingConfirmOrderEmailForCustomer($order_cart[0], $order_cart[0], $order_cart);
            }
            $logaction = "Chuyển trạng thái đơn hàng thành công";
            $this->session->set_flashdata('flash_message_success', $logaction);
            redirect(base_url() . 'account/order_detail/' . $order_id);
        }
    }

    private function _testmode($order_id)
    {
        $logaction = "Chuyển trạng thái test khiếu nại thành công";
        if($this->session->userdata('sessionGroup') == StaffStoreUser) {
            $uid = $this->session->userdata('sessionUser');
            $parent_id = $this->user_model->get("parent_id", "use_id = $uid")->parent_id;
            $order_saler = $parent_id;
        } else {
            $order_saler = $this->session->userdata('sessionUser');
        }
        $order_status = "02";
        $order_cart = $this->showcart_model->getDetailOrders(array('order_saler' => $order_saler, 'id' => $order_id, 'order_status' => $order_status));
        $this->order_model->updateOrderCode($order_cart[0]->order_clientCode, '03', $order_saler, $order_id);
        $this->order_model->updateUserProcess($order_id, $this->session->userdata('sessionUser'));

        $this->session->set_flashdata('flash_message_success', $logaction);
        redirect(base_url() . 'account/order_detail/' . $order_id);
    }

    function shop_tree()
    {
        if($this->session->userdata('sessionUser') == StaffStoreUser) {
            $user_id = $this->user_model->get("parent_id", "use_id = " . $this->session->userdata('sessionUser'))->parent_id;
        } else {
            $user_id = $this->session->userdata('sessionUser');
        }
        
        $tree = array();
        $this->getTreeInList($user_id, $tree);

        $shop_tree = array();
        $shop_tree[] = $this->getShop($user_id);
        if (count($tree) > 0) {
            foreach ($tree as $node) {
                $tmp = $this->getShop($node);
                if ($tmp != -1) {
                    //$shop_tree[] = $tmp;
                    if (!in_array($tmp, $shop_tree, true)) {
                        $shop_tree[0] = array_merge($shop_tree[0], $tmp);
                    }

                }
            }
        }

        return $shop_tree;
    }

    function getShop($userId)
    {
        // Code củ không xét điều kiên shop_status = 1
        //$user_detail = $this->user_model->get("*",array("use_id"=>$userId));
        //        $shop_detail = $this->user_model->fetch("*", array("use_group" => 3,"use_status" => 1, "parent_id" => $userId));
        $shop_detail = $this->user_model->fetch_join("use_id, use_username,  use_fullname, use_email, use_mobile, tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", array("use_group" => 3, "use_status" => 1, "parent_id" => $userId), "", "", "", "");
        $shopList = array();
        if (count($shop_detail) > 0) {
            foreach ($shop_detail as $shop) {
                $shopList[] = $shop->use_id;
            }
        }
        return $shopList;
    }

    private function _thanhtoan($order_id, $delivery = TRUE)
    {
        if($this->session->userdata('sessionGroup') == StaffStoreUser) {
            $uid = $this->session->userdata('sessionUser');
            $parent_id = $this->user_model->get("parent_id", "use_id = $uid")->parent_id;
            $order_saler = $parent_id;
        } else {
            $order_saler = $this->session->userdata('sessionUser');
        }
        if ($delivery == FALSE) {
            $order_status = "05";
            //05 - Đang khiếu nại
        } else {
            $order_status = "01";
            // 01 - Đơn hàng mới
        }

        $order_cart = $this->showcart_model->getDetailOrders(array('order_saler' => $order_saler, 'id' => $order_id, 'order_status' => $order_status));

        if (empty($order_cart)) {
            $this->session->set_flashdata('flash_message_error', $this->lang->line('order_tatus_can_not_be_manipulated'));
            redirect(base_url() . 'account/order_detail/' . $order_id);
        }

        $weight = 0;
        $quantity = 0;
        $_products = array();
        foreach ($order_cart as $vals) {
            $weight += $vals->pro_weight * $vals->shc_quantity;
            $quantity += $vals->shc_quantity;
            $products[] = array('id' => $vals->pro_id, 'shc_quantity' => $vals->shc_quantity, 'pro_instock' => $vals->pro_instock, 'pro_buy' => $vals->pro_buy);
            #BEGIN: Dùng cho GHTK
            $_products[] = array('name' => $vals->pro_name, 'weight' => $vals->pro_weight / 1000);
            #END: Dùng cho GHTK
        }

        if ($delivery) {
            $data['ClientOrderCode'] = $order_cart[0]->order_code;
            $change_status_order = '02';
            $cancel_date = 0;
        } else {
            $data['ClientOrderCode'] = time() . '_' . rand(100, 9999);
            $change_status_order = '99';
            $cancel_date = time();
        }

        $data['SenderName'] = $order_cart[0]->sho_name;
        $data['SenderPhone'] = $order_cart[0]->sho_mobile;
        $data['PickAddress'] = ($order_cart[0]->sho_kho_address) ? $order_cart[0]->sho_kho_address : $order_cart[0]->sho_address;
        $data['PickDistrictCode'] = ($order_cart[0]->sho_kho_district) ? $order_cart[0]->sho_kho_district : $order_cart[0]->sho_district;

        $data['RecipientName'] = $order_cart[0]->ord_sname;
        $data['RecipientPhone'] = $order_cart[0]->ord_smobile;
        $data['DeliveryAddress'] = $order_cart[0]->ord_saddress;
        $data['DeliveryDistrictCode'] = $order_cart[0]->ord_district;

        if ($delivery) {
            if ($order_cart[0]->payment_method == "info_cod") {
                $data['CODAmount'] = (double)($order_cart[0]->order_total);
                $data['cod_type'] = '3';
            } else {
                $data['CODAmount'] = '0';
                $data['cod_type'] = '1';
            }
        } else {
            $data['CODAmount'] = 0;
        }

        $data['ContentNote'] = $order_cart[0]->ord_note;
        $data['ServiceID'] = $order_cart[0]->order_serviceID;
        $data['Weight'] = $weight;
        $data['Length'] = 0;
        $data['Width'] = 0;
        $data['Height'] = 0;

        try {
            if ($order_cart[0]->shipping_method == 'VTP') {
                $this->load->model('viettelpost_model');
                $tinhthanh = $this->viettelpost_model->GetProvinceByDistrictCode($order_cart[0]->sho_kho_district);
                $link_web = base_url() . $order_cart[0]->pro_category . "/" . $order_cart[0]->pro_id . "/" . RemoveSign($order_cart[0]->pro_name);
                $order_data = array(
                    "ORDER_ID" => $order_id,
                    "MA_DOITAC" => "AZB",
                    "MA_SHOP" => $order_cart[0]->shc_id,
                    "TEN_KHGUI" => $order_cart[0]->sho_name,
                    "DIACHI_KHGUI" => $data['PickAddress'],
                    "EMAIL_KHGUI" => $order_cart[0]->pro_email,
                    "TEL_KHGUI" => $order_cart[0]->sho_mobile,
                    "TINH_KHGUI" => $tinhthanh->vtp_province_code,
                    "HUYEN_KHGUI" => $tinhthanh->vtp_code,
                    "PHUONGKHGUI" => 0,
                    "LATITUDE" => 0,
                    "LONGITUDE" => 0,
                    "TEN_KHNHAN" => $order_cart[0]->ord_sname,
                    "DIACHI_KHNHAN" => $order_cart[0]->ord_saddress,
                    "EMAIL_KHNHAN" => $order_cart[0]->ord_semail,
                    "TEL_KHNHAN" => $order_cart[0]->ord_smobile,
                    "TINH_KHNHAN" => strtoupper($order_cart[0]->ord_province),
                    "HUYEN_KHNHAN" => $order_cart[0]->ord_district,
                    "PHUONGKHNHAN" => 0,
                    "MOTA_SP" => $order_cart[0]->pro_descr,
                    "TIEN_HANG" => $data['CODAmount'],
                    "LINK_WEB" => $link_web,
                    "LOAI_VANDON" => $data['cod_type'],
                    "GHI_CHU" => $order_cart[0]->ord_note,
                    "MA_DV_VIETTEL" => $order_cart[0]->order_serviceID,
                    "TRONG_LUONG" => $weight,
                    "MA_LOAI_HANGHOA" => "HH",
                    "TONG_CUOC_VND" => 0,
                    "PHI_COD" => 0,
                    "PHI_VAS" => 0,
                    "BAO_HIEM" => 0,
                    "PHU_PHI" => 0,
                    "PHU_PHI_KHAC" => 0,
                    "TONG_VAT" => 0,
                    "TONG_TIEN" => 0,
                    "TIEN_THU_HO" => $data['CODAmount'],
                    "SO_LUONG" => $quantity,
                    "NGAY_LAY_HANG" => date('d/m/Y h:i:s')
                );
                $token = $this->viettelpost_model->Login();
                $order = $this->viettelpost_model->callMethod("InsertOrder", json_encode($order_data, true), $token, 'POST');
                $this->viettelpost_model->callMethod('Logoff', null, $token, 'POST');
                if ($order == 'SUCCESS') {
                    $return['code'] = 1;
                    $return['msg']['OrderCode'] = "AZB" . $order_id;
                    $return['msg']['TotalFee'] = $order_cart[0]->shipping_fee;
                }
            } elseif ($order_cart[0]->shipping_method == 'GHN') {
                $return = $this->CreateShippingOrder($data);
            } elseif ($order_cart[0]->shipping_method == 'GHTK') {
                $this->load->model('ghtietkiem_model');
                $disCode = ($order_cart[0]->sho_kho_district) ? $order_cart[0]->sho_kho_district : $order_cart[0]->sho_district;
                $disBuyer = $order_cart[0]->ord_district;
                $shopAddress = $this->ghtietkiem_model->GetProvinceByDistrictCode($disCode);
                $BuyerAddress = $this->ghtietkiem_model->GetProvinceByDistrictCode($disBuyer);

                $dataSend = array(
                    'products' => $_products,
                    'order' => array(
                        'id' => $order_id,
                        'pick_name' => $order_cart[0]->sho_name,
                        'pick_address' => ($order_cart[0]->sho_kho_address) ? $order_cart[0]->sho_kho_address : $order_cart[0]->sho_address,
                        'pick_province' => $shopAddress->ProvinceName,
                        'pick_district' => $shopAddress->DistrictName,
                        'pick_tel' => $order_cart[0]->sho_mobile,
                        'tel' => $order_cart[0]->ord_smobile,
                        'name' => $order_cart[0]->ord_sname,
                        'address' => $order_cart[0]->ord_saddress,
                        'province' => $BuyerAddress->ProvinceName,
                        'district' => $BuyerAddress->DistrictName,
                        'is_freeship' => 0,
                        'pick_date' => date('Y-m-d'),
                        'pick_money' => $order_cart[0]->order_total_no_shipping_fee,
                        'note' => 'Đơn vị azibai dùng là gram.',
                        'value' => 0
                    )
                );

                $result = $this->ghtietkiem_model->CreateOrder($dataSend);
                $res = json_decode($result);
                if ($res->success) {
                    $succ = 1;  //echo "Thành công!!";
                    $return['msg']['OrderCode'] = $res->order->label;
                } else {
                    $succ = 0; //echo "Thất bại!!";
                    $return['msg']['OrderCode'] = '';
                }
                $return['code'] = $succ;
                $return['msg']['TotalFee'] = $order_cart[0]->shipping_fee;
            } elseif ($order_cart[0]->shipping_method == 'SHO') {
                $return['code'] = 1;
                $return['msg']['OrderCode'] = "AZB" . $order_id;
                $return['msg']['TotalFee'] = $order_cart[0]->shipping_fee;
            }

            if ($return['code'] == 1) {
                $logaction = "Xác nhận đơn hàng thành công";
                $this->order_model->updateOrderCode($order_cart[0]->order_clientCode, $change_status_order, $order_saler, $order_id, NULL, $cancel_date);
                $this->order_model->updateUserProcess($order_id, $this->session->userdata('sessionUser'));
                if ($delivery) {
                    foreach ($products as $values) {
                        if ($values['pro_buy'] > 0 || $values['pro_instock'] > 0) {
                            $this->product_model->updateProBuyInstock($values);
                        }
                    }

                    if ($order_cart[0]->ord_semail) {
                        $this->load->model("shop_mail_model");
                        $this->shop_mail_model->sendingConfirmOrderEmailForCustomer($order_cart[0], $order_cart[0], $order_cart);
                    }

                } else {
                    $info_order_old = $this->order_model->DetailOrder($order_id, false);
                    unset($info_order_old->id);
                    $info_order_old->date = time();
                    $info_order_old->change_status_date = time();
                    $info_order_old->order_code = time() . '_' . rand(100, 9999);
                    $info_order_old->order_token = md5(time() . rand());
                    $info_order_old->cancel_date = 0;
                    $info_order_old->cancel_reason = null;
                    $info_order_old->order_clientCode = $return['msg']['OrderCode'];
                    $info_order_old->order_status = '02';

                    $order_id_new = $this->order_model->makeOrder($info_order_old);


                    if ($order_id_new > 0) {
                        $order_cart_list = $this->showcart_model->fetch('*', array('shc_orderid' => $order_id));

                        $dataInsert = array();
                        foreach ($order_cart_list as $vals) {
                            unset($vals->shc_id);
                            foreach ($vals as $key => $value)
                            {
                                $dataInsert[$key] = $value;
                            }

                           $dataInsert['shc_change_status_date'] = time();
                           $dataInsert['shc_buydate'] = time();
                           $dataInsert['shc_orderid'] = $order_id_new;
                           $this->showcart_model->add($dataInsert);
                        }

                        $this->load->model('user_receive_model');
                        $get_user_receive = $this->user_receive_model->get('*',array('order_id'=> $order_id));

                        $dataUserInsert = array();
                        if ($get_user_receive) {
                            foreach ($get_user_receive as $key => $value) {
                                $dataUserInsert[$key] = $value;
                            }
                            unset($dataUserInsert['id']);
                            $dataUserInsert['order_id'] = $order_id_new;
                            $this->user_receive_model->add($dataUserInsert);
                        }
                      
                        $order_cart = $this->showcart_model->getDetailOrders(array('id' => $order_id_new));
                        if ($order_cart[0]->ord_semail) {

                            // because sendmail -1
                            $order_cart[0]->order_status = '01';

                            $this->load->model("shop_mail_model");
                            $this->shop_mail_model->sendingConfirmOrderEmailForCustomer($order_cart[0], $order_cart[0], $order_cart);
                        }
                    }
                } 
                
            } else {
                $logaction = "Xác nhận đơn hàng thất bại " . $return['msg'];
            }
            $this->load->model('ghnapilog_model');
            $log = new stdClass();
            $log->OrderCode = $return['msg']['OrderCode'];
            $log->TotalFee = $return['msg']['TotalFee'];
            $log->owner = $order_saler;
            $log->logaction = $logaction;
            $log->lastupdated = date('Y-m-d H:i:s', time());
            $this->ghnapilog_model->create($log);//log giao dich
            if ($delivery) {
                $this->session->set_flashdata('flash_message_success', $logaction);
                redirect(base_url() . 'account/order_detail/' . $order_id);
            } else {
                return $return['msg']['OrderCode'];
            }
        } catch (Exception $e) {
            die("Lỗi tạo vận đơn");
        }
    }

    private function _thanhtoanCoupon($order_id, $delivery = TRUE)
    {
        $this->load->model('order_model');
        if($this->session->userdata('sessionGroup') == StaffStoreUser) {
            $uid = $this->session->userdata('sessionUser');
            $parent_id = $this->user_model->get("parent_id", "use_id = $uid")->parent_id;
            $order_saler = $parent_id;
        } else {
            $order_saler = $this->session->userdata('sessionUser');
        }
        // $userdata = $this->session->userdata;
        // $order_saler = $userdata['sessionUser'];
        if ($delivery == FALSE) {
            $order_status = "05";
            //05 - Đang khiếu nại
        } else {
            $order_status = "01";
            // 01 - Đơn hàng mới
        }
        $order_cart = $this->showcart_model->getDetailOrders(array('order_saler' => $order_saler, 'id' => $order_id, 'order_status' => $order_status));
        if (empty($order_cart)) {
            $logaction = "Xác nhận đơn hàng thất bại";
            $this->session->set_flashdata('flash_message_error', $logaction);
            redirect(base_url() . 'account/order_detail/' . $order_id);
        } else {
            $logaction = "Xác nhận đơn hàng thành công";
            $this->order_model->updateOrderCode("", "02", $order_saler, $order_id);
            $this->order_model->updateUserProcess($order_id, $this->session->userdata('sessionUser'));
            foreach ($products as $values) {
                if ($values['pro_buy'] > 0 || $values['pro_instock'] > 0) {
                    $this->product_model->updateProBuyInstock($values);
                }
            }

            if ($order_cart[0]->ord_semail) {
                $this->load->model("shop_mail_model");
                $this->shop_mail_model->sendingConfirmOrderEmailForCustomer($order_cart[0], $order_cart[0], $order_cart);
            }
        }

        $this->load->model('ghnapilog_model');
        $log = new stdClass();
        $log->OrderCode = "AZBCP" . $order_id;
        $log->TotalFee = 0;
        $log->owner = $order_saler;
        $log->logaction = $logaction;
        $log->lastupdated = date('Y-m-d H:i:s', time());
        $this->ghnapilog_model->create($log);//log giao dich

        $this->session->set_flashdata('flash_message_success', $logaction);
        redirect(base_url() . 'account/order_detail/' . $order_id);
    }

    private function _huydonhang($order_id)
    {
        if($this->session->userdata('sessionGroup') == StaffStoreUser) {
            $uid = $this->session->userdata('sessionUser');
            $parent_id = $this->user_model->get("parent_id", "use_id = $uid")->parent_id;
            $order_saler = $parent_id;
        } else {
            $order_saler = $this->session->userdata('sessionUser');
        }
        $order_cart = $this->order_model->get('shipping_fee, shipping_method, order_clientCode', 'order_saler = "' . $order_saler . '" AND id = "' . $order_id . '"');
        $products = $this->showcart_model->getDetailOrders(array('id' => $order_id));

        $info_cancel = $this->input->post('info_cancel');
        $this->load->model('shop_mail_model');
        $flag_success = TRUE;
        if ($order_cart->order_clientCode) {
            if ($order_cart->shipping_method == "GHN") {
                try {
                    $return = $this->_CancelOrder($order_cart);
                    if ($return['code'] == 1) {
                        $logaction = "Hủy đơn hàng thành công!";
                        $this->order_model->updateOrderCode($order_cart->order_clientCode, '99', $order_saler, $order_id, $info_cancel, time());
                        $this->order_model->updateUserProcess($order_id, $this->session->userdata('sessionUser'));
                        if ($products[0]->ord_semail) {
                            $this->shop_mail_model->sendingCancelOrderEmailForCustomer($products[0], $products[0], $products, $info_cancel);
                        }
                    } else {
                        $logaction = "Hủy đơn hàng thất bại " . $return['msg']['ErrorMessage'];
                        $flag_success = FALSE;
                    }
                } catch (Exception $e) {
                    die("Lỗi Api GHN");
                }
            } elseif ($order_cart->shipping_method == "GHTK") {
                try {
                    $this->load->model('ghtietkiem_model');
                    $result = $this->ghtietkiem_model->CancelOrder($order_id);
                    $res = json_decode($result);
                    if ($res->success) {
                        $this->ghtietkiem_model->GHTK_Update_Log($order_id, $order_cart->order_clientCode, "99", "Gian hàng tự hủy!");
                        $logaction = "Hủy đơn hàng thành công!";
                        $this->order_model->updateOrderCode($order_cart->order_clientCode, '99', $order_saler, $order_id, $info_cancel, time());
                        $this->order_model->updateUserProcess($order_id, $this->session->userdata('sessionUser'));
                        if ($products[0]->ord_semail) {
                            $this->shop_mail_model->sendingCancelOrderEmailForCustomer($products[0], $products[0], $products, $info_cancel);
                        }
                    } else {
                        $logaction = "Hủy đơn hàng thất bại, " . $res->message;
                        $flag_success = FALSE;
                    }
                } catch (Exception $e) {
                    die("Lỗi Api GHTK");
                }
            } 
        } else {
            $logaction = "Hủy đơn hàng thành công!";
            $this->order_model->updateOrderCode($order_cart->order_clientCode, '99', $order_saler, $order_id, $info_cancel, time());
            $this->order_model->updateUserProcess($order_id, $this->session->userdata('sessionUser'));
            if ($products[0]->ord_semail) {
                $this->shop_mail_model->sendingCancelOrderEmailForCustomer($products[0], $products[0], $products, $info_cancel);
            }
        }
        $this->load->model('ghnapilog_model');
        $log = new stdClass();
        $log->OrderCode = $order_cart->order_clientCode;
        $log->TotalFee = $order_cart->shipping_fee;
        $log->owner = $order_saler;
        $log->logaction = $logaction;
        $log->lastupdated = date('Y-m-d H:i:s', time());
        $this->ghnapilog_model->create($log);//log giao dich
        if ($flag_success) {
            $this->session->set_flashdata('flash_message_success', $logaction);
        } else {
            $this->session->set_flashdata('flash_message_error', $logaction);
        }
        redirect(base_url() . 'account/order_detail/' . $order_id);
    }

    private function CreateShippingOrder($order)
    {
        $this->load->library('RestApiClient');
        $this->RestApiClient = new RestApiClient();

        $serviceClient = $this->RestApiClient->connectGHN();
        $sessionToken = $serviceClient->SignIn();
        $serviceClient->SignOut();
        $arrProduct = array();
        //https://testapipds.ghn.vn:9999/UI/API/GetAccountFortest
        if ($sessionToken) {
            $responseCreateShippingOrder = $serviceClient->CreateShippingOrder($order);
            //print_r($responseCreateShippingOrder);exit;
            if ($responseCreateShippingOrder['ErrorMessage'] == '') {
                return array(
                    'code' => '1',
                    'msg' => $responseCreateShippingOrder
                );
            } else {
                return array(
                    'code' => '-1',
                    'msg' => $responseCreateShippingOrder['ErrorMessage']
                );
            }
        } else {
            print_r('Client and Password are incorrect - Liên hệ Admin');
            exit;
        }
    }

    private function _CancelOrder($order)
    {
        $this->load->library('RestApiClient');
        $this->RestApiClient = new RestApiClient();

        $serviceClient = $this->RestApiClient->connectGHN();
        $sessionToken = $serviceClient->SignIn();
        $serviceClient->SignOut();
        $arrProduct = array();
        // https://testapipds.ghn.vn:9999/UI/API/GetAccountFortest
        if ($sessionToken) {
            $GetOrderInfo = array(
                "SessionToken" => $sessionToken,
                'OrderCode' => $order->order_clientCode
            );

            $reponseGetOrderInfo = $serviceClient->GetOrderInfo($GetOrderInfo);

            if ($reponseGetOrderInfo['CurrentStatus'] == "ReadyToPick") {

                $_reponseGetOrderInfo = $serviceClient->CancelOrder($GetOrderInfo);
                if ($_reponseGetOrderInfo['ErrorMessage'] == "") {
                    return array(
                        'code' => '1',
                        'msg' => $_reponseGetOrderInfo
                    );
                } else {
                    return array(
                        'code' => '-1',
                        'msg' => $_reponseGetOrderInfo['ErrorMessage']
                    );
                }
            } else {
                return array(
                    'code' => '-1',
                    'msg' => $reponseGetOrderInfo['ErrorMessage']
                );
            }
        } else {
            print_r('Client and Password are incorrect - Liên hệ Admin');
            exit;
        }
    }

    public function getProvincesByArea($package = NULL, $shop_province = NULL)
    {
        if ($this->input->post('shop_package')) {
            $shop_package = $this->input->post('shop_package');
            $shop_province = $this->input->post('user_province_put');
        } else if ($package) {
            $shop_package = $package;
        }

        switch ($shop_package) {
            case 1:
                $prov = "";
                break;
            case 2:
                $prov = "";
                break;
            case 3:
                //goi silver
                $_province = $this->province_model->get('pre_area', "pre_status = 1 AND pre_id = " . $shop_province);
                $_area = $this->province_model->fetch('pre_id,pre_name', "pre_status = 1 AND pre_area = " . $_province->pre_area, '');

                if ($_area) {
                    $string_province = array();
                    foreach ($_area as $vals) {
                        $string_province[] = $vals->pre_id;
                    }
                    $prov = ' AND pre_id IN (' . implode(",", $string_province) . ')';
                } else {
                    $prov = "";
                }
                break;
            case 4:
                //goi gold
                $_province = $this->province_model->get('pre_area', "pre_status = 1 AND pre_id = " . $shop_province);
                switch ($_province->pre_area) {
                    case 1:
                        $_province_area = "(1,2)";
                        break;
                    case 2:
                        $_province_area = "(1,2)";
                        break;
                    case 3:
                        $_province_area = "(3,4)";
                        break;
                    case 4:
                        $_province_area = "(3,4)";
                        break;
                    case 5:
                        $_province_area = "(5,6)";
                        break;
                    case 6:
                        $_province_area = "(5,6)";
                        break;
                }

                $_area = $this->province_model->fetch('pre_id', "pre_status = 1 AND pre_area IN " . $_province_area);
                if ($_area) {
                    $string_province = array();
                    foreach ($_area as $vals) {
                        $string_province[] = $vals->pre_id;
                    }
                    $prov = ' AND pre_id IN (' . implode(",", $string_province) . ')';
                } else {
                    $prov = "";
                }
                break;
            case 5:
                //goi Platinum
                $_province = $this->province_model->get('pre_region', "pre_status = 1 AND pre_id = " . $shop_province);
                $_area = $this->province_model->fetch('pre_id,pre_name', "pre_status = 1 AND pre_region = " . $_province->pre_region, '');

                if ($_area) {
                    $string_province = array();
                    foreach ($_area as $vals) {
                        $string_province[] = $vals->pre_id;
                    }
                    $prov = ' AND pre_id IN (' . implode(",", $string_province) . ')';
                } else {
                    $prov = "";
                }

                break;
            case 6:
                $prov = "";
                break;
            case 7:
                $prov = "";
                break;
        }

        $list_province = $this->province_model->fetch("pre_id, pre_name", "pre_status = 1" . $prov, "pre_order", "ASC");
        $province = array();
        foreach ($list_province as $vals) {
            $province[$vals->pre_id] = $vals->pre_name;
        }

        if ($this->input->post('shop_package')) {
            echo json_encode($province);
            exit;
        } else if ($package) {
            return $province;
        }
    }

    public function changeDelivery()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser || $group_id == AffiliateUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
        ) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        #BEGIN: Menu
        $data['menuSelected'] = 'showcart';
        $data['menuType'] = 'account';
        $this->load->model('af_order_model');
        $data['successEditShopAccount'] = false;
        #BEGIN: Get shop
        $shop = $this->shop_model->get("*", "sho_user = " . (int)$this->session->userdata('sessionUser'));
        $data['shopid'] = $shop->sho_id;

        #END Counter
        #Define url for $getVar
        $action = array('search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #BEGIN: Search & Filter
        $where = "shc_saler = " . (int)$this->session->userdata('sessionUser');
        $sort = "shc_orderid";
        $by = "DESC";
        $sortUrl = '';
        $pageSort = '';
        $pageUrl = '';
        $keyword = '';
        #If search
        if ($getVar['search'] != FALSE && trim($getVar['search']) != '' && $getVar['keyword'] != FALSE && trim($getVar['keyword']) != '') {
            $keyword = $this->filter->html($getVar['keyword']);
            switch (strtolower($getVar['search'])) {
                case 'name':
                    $sortUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $pageUrl .= '/search/name/keyword/' . $getVar['keyword'];
                    $where .= " AND pro_name LIKE '%" . $this->filter->injection_html($getVar['keyword']) . "%'";
                    break;
            }
        }
        #If sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "shc_orderid";
                    break;
                case 'order_id':
                    $pageUrl .= '/sort/order_id';
                    $sort = "shc_orderid";
                    break;
                case 'user':
                    $pageUrl .= '/sort/user';
                    $sort = "use_fullname";
                    break;
                case 'cost':
                    $pageUrl .= '/sort/cost';
                    $sort = "pro_cost";
                    break;
                case 'quantity':
                    $pageUrl .= '/sort/quantity';
                    $sort = "shc_quantity";
                    break;
                case 'saler':
                    $pageUrl .= '/sort/saler';
                    $sort = "use_fullname";
                    break;
                case 'date':
                    $pageUrl .= '/sort/date';
                    $sort = "date";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "id";
            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & Filter
        #Keyword
        $data['keyword'] = $keyword;
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/order' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        $order_date = $this->input->post('daterange') ? $this->input->post('daterange') : NULL;
        $order_date = explode(' - ', $order_date);
        $strat_date_order = strtotime($order_date[0]);
        $end_date_order = strtotime($order_date[1]);
        #Count total record
        $params = array(
            'select' => 'tbtt_showcart.*, tbtt_order.*, pro_name, pro_sku, pro_image,ord_smobile,status_id, pro_dir, pro_quality, tbtt_user.use_id, tbtt_user.use_username, tbtt_user.use_fullname',
            'shc_saler' => $this->session->userdata('sessionUser'),
            'where' => $where,
            'sort' => $sort,
            'by' => $by,
            'start' => $start,
            'limit' => settingOtherAccount,
            'is_count' => true,
            'order_id' => $this->input->post('order_id') ? $this->input->post('order_id') : NULL,
            'username' => $this->input->post('username') ? $this->input->post('username') : NULL,
            'ordmobile' => $this->input->post('ordmobile') ? $this->input->post('ordmobile') : NULL,
            'ship_order' => $this->input->post('ship_order') ? $this->input->post('ship_order') : NULL,
            'start_date' => $strat_date_order,
            'end_date' => $end_date_order,
            'order_status' => $this->input->post('order_status') ? $this->input->post('order_status') : NULL,
        );

        $totalRecord = $this->order_model->list_order_by_id_shop($params, $data['viewbyparent']);
        $config['base_url'] = base_url() . 'account/order' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu

        $params['is_count'] = false;

        $data['showcart'] = $this->order_model->list_order_by_id_shop($params, $data['viewbyparent']);

        #Load view
        $this->load->view('home/account/showcart/changeDelivery', $data);
    }

    public function complaintsOrders()
    {
        $this->load->model('delivery_model');
        $this->load->model('delivery_comments_model');

        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == BranchUser
            || $group_id == StaffUser
            || $group_id == StaffStoreUser
            || $group_id == AffiliateStoreUser
            || $group_id == AffiliateUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
        ) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'requirements_change_delivery';
        $data['menuType'] = 'account';

        $this->load->model('delivery_comments_model');

        $data['listComplaintsOrders'] = $this->order_model->getListComplaintsOrders(array('status_id_delivery' => TRUE, 'user_id' => (int)$this->session->userdata('sessionUser')), array('key' => 'id', 'value' => 'DESC'));
        $this->load->view('home/account/showcart/complaintsOrders', $data);
    }

    public function complaintsOrdersForm($id_request = NULL)
    {
        $this->load->model('delivery_model');
        $this->load->model('delivery_comments_model');

        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser || $group_id == AffiliateUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == StaffStoreUser
        ) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        if ($id_request == NULL) {
            redirect(base_url() . "account", 'location');
        }

        $data['all_comments'] = $this->delivery_comments_model->fetch('*', 'id_request = ' . $id_request);
        if (empty($data['all_comments'])) {
            redirect(base_url() . "account", 'location');
        }
        foreach ($data['all_comments'] as $key => $vals) {
            if (in_array($vals->status_changedelivery, array("01", "03"))) {
                $thumb_user = 'thumbnail_d2ee8c3adc99e19e7a300355aaf9fab8.png';
                if ($vals->user_id > 0) {
                    $user = $this->user_model->get('use_fullname,avatar', 'use_id = ' . $vals->user_id);
                    if ($user->avatar) {
                        $thumb_user = $user->avatar;
                    }
                } else {
                    $thumb_user = 'thumbnail_d2ee8c3adc99e19e7a300355aaf9fab8.png';
                }
                $data['_thumb'][$key] = array(
                    'name' => $user->use_fullname,
                    'logo' => 'media/images/avatar/' . $thumb_user,
                    'link' => ""
                );

                if ($vals->bill) {
                    $data['_thumb'][$key]['bill'] = 'media/images/mauvandon/' . $vals->bill;
                }

            } else {
                $shop = $this->shop_model->get('sho_logo,sho_dir_logo,sho_link,sho_name', 'sho_user = ' . $vals->user_id);
                $data['_thumb'][$key] = array(
                    'name' => $shop->sho_name,
                    'logo' => 'media/shop/logos/' . $shop->sho_dir_logo . '/' . $shop->sho_logo,
                    'link' => $shop->sho_link.'.'.domain_site,
                    'bill' => ""
                );
            }

        }

        $data['menuSelected'] = 'showcart';
        $data['menuType'] = 'account';

        $data['delivery'] = $this->delivery_model->fetch('*', 'id = ' . $id_request);
        $this->load->view('home/account/showcart/complaintsOrdersForm', $data);
    }

    public function submitComplaintsOrdersForm()
    {
        $this->load->model('order_model');
        $this->load->model('delivery_model');
        $this->load->model('delivery_comments_model');

        $status_id = $this->input->post('status_changedelivery');
        $_delivery = $this->delivery_model->fetch('order_id,type_id,email', 'id = ' . $this->input->post('id_request'));

        if ($status_id == "04") {
            if ($_delivery[0]->type_id == "2") {
                $order_info = $this->order_model->get('*', 'id = ' . $_delivery[0]->order_id);
                $this->order_model->updateOrderCode($order_info->order_clientCode, "06", $order_info->order_saler, $order_info->id);
                $logaction = "Cập nhập thành công";
            } else {


                
                $where['client_code_new'] = $this->_thanhtoan($_delivery[0]->order_id, FALSE);
                $logaction = "Cập nhập thành công. Mã vận chuyển mới : " . $where['client_code_new'];
            }

        } else if ($status_id == "02") {
            if ($this->input->post('status_comment') == "2") {
                $status_id = "02";
            }
            $logaction = "Gởi tin nhắn thành công";
        }
        $where['status_id'] = $status_id;
        $where['lastupdated'] = date("Y-m-d H:i:s", time());
        $delivery_id = $this->delivery_model->update($where, 'id = ' . $this->input->post('id_request'));
        if($this->session->userdata('sessionGroup') == StaffStoreUser) {
            $comments = array(
                'id_request' => $this->input->post('id_request'),
                'status_changedelivery' => $where['status_id'],
                'user_id' => $this->user_model->get("parent_id", "use_id = " . $this->session->userdata('sessionUser'))->parent_id,
                'content' => $this->input->post('content'),
                'status_comment' => $this->input->post('status_comment'),
                'lastupdated' => date("Y-m-d H:i:s", time()),
                'user_id_process' => $this->session->userdata('sessionUser')
            );
        } else {
            $comments = array(
                'id_request' => $this->input->post('id_request'),
                'status_changedelivery' => $where['status_id'],
                'user_id' => $this->session->userdata('sessionUser'),
                'content' => $this->input->post('content'),
                'status_comment' => $this->input->post('status_comment'),
                'lastupdated' => date("Y-m-d H:i:s", time())
            );
        }
        $comments_id = $this->delivery_comments_model->add($comments);
        if ($delivery_id && $comments_id) {
            $_data['shop_info'] = $this->shop_model->get('sho_name', 'sho_user = ' . $this->session->userdata('sessionUser'));
            $_data['user_info'] = $this->user_model->get('use_email', 'use_id = ' . $this->session->userdata('sessionUser'));
            if ($_delivery[0]->email && $_data['user_info']->use_email) {
                $_data['content'] = $this->input->post('content');
                $_data['delivery_id'] = $_delivery[0]->order_id;
                $_data['order_info'] = $this->order_model->get('order_token', 'id = ' . $_delivery[0]->order_id);
                $content_email = $this->load->view('home/account/showcart/email', $_data, true);
                $this->sendEmail($_delivery[0]->email, $_data['user_info']->use_email, $content_email);//to from body
            }
            $this->session->set_flashdata('flash_message_success', $logaction);
            redirect(base_url() . 'account/complaintsOrdersForm/' . $this->input->post('id_request'));
        }
    }

    public function getShippingFee($order_id)
    {
        $this->load->library('RestApiClient');
        $this->RestApiClient = new RestApiClient();
        $serviceClient = $this->RestApiClient->connectGHN();
        $sessionToken = $serviceClient->SignIn();
        $serviceClient->SignOut();

        $result = array();
        if ($sessionToken) {

            $userdata = $this->session->userdata;
            $order_saler = $userdata['sessionUser'];
            $order_cart = $this->showcart_model->getDetailOrders(array('order_saler' => $order_saler, 'id' => $order_id));
            $totalWeight = 0;
            foreach ($order_cart as $vals) {
                $totalWeight += $vals->pro_weight * $vals->shc_quantity;
            }

            $items[] = array(
                "FromDistrictCode" => ($order_cart[0]->sho_kho_district) ? $order_cart[0]->sho_kho_district : $order_cart[0]->sho_district,
                "ServiceID" => $order_cart[0]->order_serviceID,
                "ToDistrictCode" => $order_cart[0]->ord_district,
                "Weight" => $totalWeight,
                "Length" => 0,
                "Width" => 0,
                "Height" => 0
            );

            $calculateServiceFeeRequest = array("SessionToken" => $sessionToken, "Items" => $items);
            $responseCalculateServiceFee = $serviceClient->CalculateServiceFee($calculateServiceFeeRequest);
            $result = reset($responseCalculateServiceFee['Items']);

            echo json_encode($result);
            exit;
        }
    }

    private function sendEmail($to, $from, $body, $attachment = '', $from_name = "Azibai.com", $subject = "Thông báo khiếu nại sản phẩm")
    {
        $this->load->model('shop_mail_model');
        $this->load->library('email');
        $config['useragent'] = $this->lang->line('useragen_mail_detail');
        $config['mailtype'] = 'html';
        $this->email->initialize($config);
        require_once($_SERVER['DOCUMENT_ROOT'] . folderWeb . '/PHPMailer/class.phpmailer.php');
        require_once($_SERVER['DOCUMENT_ROOT'] . folderWeb . '/PHPMailer/class.pop3.php');
        return $this->shop_mail_model->smtpmailer($to, $from, $from_name, $subject, $body, $attachment);
    }

    public function aziDirect()
    {
        $this->load->model('service_model');
        $bod = $this->service_model->getServiceList(array('tbtt_package_service.package_id' => $this->sho_package['id']));

        foreach ($bod as $item) {
            if ($item['group'] == 10) {
                $group = $item['group'];
            }
        }
        if ($group == '') {
            redirect(base_url() . "account", 'location');
        }

        $shop = $this->shop_model->get("*", 'sho_user = ' . (int)$this->session->userdata('sessionUser'));
        $currentDate = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        $user = $this->user_model->get("*", "use_id = " . (int)$this->session->userdata('sessionUser') . " AND use_status = 1 AND (use_enddate >= $currentDate OR use_enddate=0)");
        $data['shop'] = $shop;
        $data['user'] = $user;
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'landingpage';
        $this->load->view('home/account/toolmarketing/azidirect/registry.php', $data);
    }

    function update_company_code()
    {
        $company_code = $_POST["company_code"];
        $valid['isOk'] = $this->shop_model->update(array("sho_company_code" => $company_code), "sho_user = " . (int)$this->session->userdata('sessionUser'));
        echo json_encode($valid);
    }

    public function solvedOrders()
    {
        $this->load->model('delivery_model');
        $this->load->model('delivery_comments_model');

        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == BranchUser
            || $group_id == AffiliateStoreUser
            || $group_id == StaffUser
            || $group_id == StaffStoreUser
            || $group_id == AffiliateUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
        ) {

        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'requirements_change_delivery';
        $data['menuType'] = 'account';
        $data['listSolvedOrders'] = $this->order_model->getListComplaintsOrders(array('status_id_solved' => TRUE, 'user_id' => (int)$this->session->userdata('sessionUser')), array('key' => 'id', 'value' => 'DESC'));
        $this->load->view('home/account/showcart/solvedOrders', $data);
    }

    public function aziBranch()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        if (empty($this->sho_package) || $this->sho_package['id'] <= 2) {
            redirect(base_url() . "account", 'location');
        }

        $data['menuType'] = 'account';
        $data['menuSelected'] = 'landingpage';
        $this->load->view('home/account/azi/azi-branch', $data);
    }

    public function emailMarketing()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser || $group_id == AffiliateUser || $group_id == BranchUser || $group_id == StaffStoreUser) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        $this->load->model('service_model');
        $packId = $this->sho_package['id'];

        if ($group_id == BranchUser) {
            $UserID = (int)$this->session->userdata('sessionUser');
            $this->load->model('package_user_model');
            $u_pa = $this->user_model->get("use_id, use_group, parent_id", "use_id = " . $UserID . " AND use_status = 1 AND use_group = " . BranchUser);
            $pa_group = $this->user_model->get('use_id, use_username, use_group, parent_id', 'use_id = ' . $u_pa->parent_id . ' AND use_status = 1');
            if ($u_pa) {
                $pack = $this->package_user_model->getCurrentPackage($u_pa->parent_id);
                if ($pa_group->use_group == StaffStoreUser) {
                    $user_pa = $this->user_model->get('use_id, use_username, use_group, parent_id', 'use_id = ' . $pa_group->parent_id . ' AND use_status = 1');
                    $pack = $this->package_user_model->getCurrentPackage($user_pa->use_id);
                }
                $packId = $pack['id'];
            }
        }

        $bod = $this->service_model->getServiceList(array('tbtt_package_service.package_id' => $packId));

        foreach ($bod as $item) {
            if ($item['id'] == 5) {
                $group = $item['id'];
            }
        }

        if ($group == '') {
            redirect(base_url() . "account", 'location');
        }

        $data['menuType'] = 'account';

        $data['menuSelected'] = 'landingpage';
        $this->load->model("wallet_model");
        $sumwallet = array(
            'user_id' => $this->session->userdata('sessionUser')
        );
        $data['total_amount'] = $this->wallet_model->getSumWallet($sumwallet, '1');
        $data['total_amount'] = $data['total_amount'][0]->amount;
        $this->load->view('home/account/azi/email-marketing', $data);
    }

    public function accessEmailMarketing()
    {
        $group_id = $this->session->userdata('sessionGroup');
        $userId = (int)$this->session->userdata('sessionUser');
        if ($group_id == AffiliateStoreUser || $group_id == AffiliateUser) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        $user = $this->user_model->get("use_id, use_email, use_username, use_fullname, pw_emailmarketting", "use_id = {$userId}");
        if ($user->use_fullname == '') {
            $this->session->set_flashdata('flash_message_error', 'Bạn vui lòng cập nhật đầy đủ thông tin để tiếp tục!');
            redirect(base_url() . "account/edit", 'location');
            die();
        }
        if ($user->pw_emailmarketting == '') {
            require_once(FCPATH . 'api/email/examples/setup.php');
            $endpoint = new MailWizzApi_Endpoint_Customers();
            $response = $endpoint->create(array(
                'customer' => array(
                    'first_name' => $user->use_fullname,
                    'last_name' => $user->use_username,
                    'email' => $user->use_email,
                    'password' => $user->use_username . $user->use_id,
                    'timezone' => 'UTC',
                    'status' => 'active'
                ),
            ));

            if ($response->body['status'] == 'success') {
                if ($user->use_id > 0) {
                    $this->user_model->update(array('pw_emailmarketting' => $user->use_username . $user->use_id), "use_id = " . $user->use_id);
                }
                $pass = base64_encode($user->use_username . $user->use_id);
                redirect("http://emailapp.azibai.com/customer/index.php/guest/index?email=" . $user->use_email . "&pw=" . $pass, 'location');
            }
        } else {
            $pass = base64_encode($user->pw_emailmarketting);
            redirect("http://emailapp.azibai.com/customer/index.php/guest/index?email=" . $user->use_email . "&pw=" . $pass, 'location');
        }
    }

    public function aziPublisher()
    {
        $this->load->model('service_model');
        $bod = $this->service_model->getServiceList(array('tbtt_package_service.package_id' => $this->sho_package['id']));

        foreach ($bod as $item) {
            if ($item['id'] == 48) {
                $group = $item['id'];
            }
        }
        if ($group == '') {
            redirect(base_url() . "account", 'location');
        }
        $group_id = $this->session->userdata('sessionGroup');

        if ($group_id == AffiliateStoreUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'landingpage';
        $this->load->view('home/account/azi/azi-publisher', $data);
    }

    public function aziAffiliate()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser || $group_id == BranchUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'landingpage';
        $this->load->view('home/account/azi/azi-affiliate', $data);
    }

    public function aziManager()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'landingpage';
        $this->load->view('home/account/azi/azi-manager', $data);
    }

    //    public function historyRecharge(){
    //        $this->load->model('walletlog_model');
    //
    //        $group_id = $this->session->userdata('sessionGroup');
    //        if (!in_array($group_id,array(AffiliateUser,AffiliateStoreUser))) {
    //            redirect(base_url()."account", 'location');
    //        }
    //
    //
    //        $data['menuSelected']       = 'requirements_change_delivery';
    //        $data['menuType']           = 'account';
    //        $data['listHistoryRecharge']   = $this->walletlog_model->fetch('*','');
    //        $this->load->view('home/account/naptien/historyRecharge', $data);
    //    }

    /*
     * nap tien
     */

    public function historyRecharge()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if (!in_array($group_id, array(AffiliateUser, AffiliateStoreUser))) {
            redirect(base_url() . "account", 'location');
        }
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'recharge_and_spend_money';
        $data['menuType'] = 'account';

        $this->load->model('walletlog_model');
        $action = array('search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);

        $sort = "id";
        $by = "DESC";
        $sortUrl = '';
        $pageSort = '';
        $pageUrl = '';
        $keyword = '';

        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #BEGIN: Pagination
        $this->load->library('pagination');
        $params = array(
            'user_id' => $this->session->userdata('sessionUser'),
            'order_by' => array('key' => 'id', 'value' => 'DESC'),
            'start' => $start,
            'limit' => settingOtherAccount,
            'is_count' => true
        );

        $totalRecord = $this->walletlog_model->listWalletLog($params);
        $config['base_url'] = base_url() . 'account/historyRecharge/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        $params['is_count'] = false;
        $data['listHistoryRecharge'] = $this->walletlog_model->listWalletLog($params);
        $this->load->view('home/account/naptien/historyRecharge', $data);
    }

    public function historyRechargeNL()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if (!in_array($group_id, array(AffiliateUser, AffiliateStoreUser))) {
            redirect(base_url() . "account", 'location');
        }
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'recharge_and_spend_money';
        $data['menuType'] = 'account';

        $this->load->model('nganluong_model');
        $action = array('search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);

        $sort = "id";
        $by = "DESC";
        $sortUrl = '';
        $pageSort = '';
        $pageUrl = '';
        $keyword = '';

        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #BEGIN: Pagination
        $this->load->library('pagination');
        $params = array(
            'user_id' => $this->session->userdata('sessionUser'),
            'payment_status' => "1",
            'order_by' => array('key' => 'id', 'value' => 'DESC'),
            'start' => $start,
            'limit' => settingOtherAccount,
            'is_count' => true
        );

        $totalRecord = $this->nganluong_model->listWalletNLLog($params);
        $config['base_url'] = base_url() . 'account/historyRechargeNL/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        $params['is_count'] = false;
        $data['listHistoryRecharge'] = $this->nganluong_model->listWalletNLLog($params);
        $this->load->view('home/account/naptien/historyRechargeNL', $data);
    }

    public function addWallet()
    {

        $group_id = $this->session->userdata('sessionGroup');
        if (!in_array($group_id, array(AffiliateUser, AffiliateStoreUser, BranchUser))) {
            redirect(base_url() . "account", 'location');
        }
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'recharge_and_spend_money';
        $data['menuType'] = 'account';

        $this->load->view('home/account/naptien/addWallet', $data);
    }

    public function loadAddWallet()
    {
        if (isset($_REQUEST['addType']) && $_REQUEST['addType']) {
            if ($_REQUEST['addType'] == 5) {
                $content_type = $this->load->view('home/account/naptien/loadAddWalletBank', $_data, true);
            } else if ($_REQUEST['addType'] == 6) {
                $content_type = $this->load->view('home/account/naptien/loadAddWalletNL', $_data, true);
            }

            die($content_type);

        }
    }

    public function addWalletSubmit()
    {
        if ($this->input->server('REQUEST_METHOD') == 'POST') {
            $this->load->model('walletlog_model');

            $wallet_log = array(
                'bank_id' => $this->input->post('iBank'),
                'amount' => $this->input->post('amount'),
                'user_id' => $this->session->userdata('sessionUser'),
                'lastupdated' => date("Y-m-d H:i:s", time())
            );

            $id_wallet_log = $this->walletlog_model->add($wallet_log);
            redirect(base_url() . 'account/addWalletSuccess/' . $id_wallet_log);
        }
    }

    public function addWalletSuccess($id = NULL)
    {
        $group_id = $this->session->userdata('sessionGroup');
        if (!in_array($group_id, array(AffiliateUser, AffiliateStoreUser, BranchUser))) {
            redirect(base_url() . "account", 'location');
        }
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'recharge_and_spend_money';
        $data['menuType'] = 'account';
        $this->load->model('walletlog_model');
        $this->load->model('bank_model');

        if ($id) {
            $data['walletlog'] = $this->walletlog_model->get('*', 'id = ' . $id . ' AND user_id = ' . $this->session->userdata('sessionUser'));
            if (empty($data['walletlog'])) {
                redirect(base_url());
            }

            $data['bank_info'] = $this->bank_model->fetch(
                '*',
                'user_id = 0',
                'id',
                'ASC',
                0,
                1
            );
            $this->load->view('home/account/naptien/addWalletSuccess', $data);
        } else {
            redirect(base_url() . "account", 'location');
        }
    }

    function payment_nl()
    {
        $this->load->model('nganluong_model');
        $user_info = $this->user_model->get('*', 'use_id = ' . $this->session->userdata('sessionUser'));
        $payment_method = $_POST['option_payment'];
        $bank_code = $_POST['bankcode'];
        $total_amount = $_POST['amount'];
        $order_id = $this->nganluong_model->create_order_nl($user_info->use_id, $total_amount, "", $payment_method, $bank_code, "", $payment_status = 0);
        $return_url = base_url() . "account/nganluong_success/" . $order_id;
        $cancel_url = base_url() . "account/nganluong_cancel/" . $order_id;
        $array_items = array();
        $array_items[] = array('item_name1' => 'nạp tiền',
            'item_quantity1' => 1,
            'item_amount1' => $total_amount,
            'item_url1' => base_url() . "account/addWallet/");
        $fee_shipping = 0;
        $order_description = "";
        $order_code = $order_id;
        $payment_type = 1;
        $discount_amount = 0;
        $tax_amount = 0;
        $buyer_fullname = $user_info->use_fullname;
        $buyer_email = $user_info->use_email;
        $buyer_mobile = $user_info->use_mobile;
        $buyer_address = "";


        if ($payment_method != '' && $buyer_email != "" && $buyer_mobile != "" && $buyer_fullname != "" && filter_var($buyer_email, FILTER_VALIDATE_EMAIL)) {

            if ($payment_method == "VISA") {
                $nl_result = $this->nganluong_model->VisaCheckout($order_code, $total_amount, $payment_type, $order_description, $tax_amount, $fee_shipping, $discount_amount, $return_url, $cancel_url, $buyer_fullname, $buyer_email, $buyer_mobile, $buyer_address, $array_items);

            } elseif ($payment_method == "NL") {
                $nl_result = $this->nganluong_model->NLCheckout($order_code, $total_amount, $payment_type, $order_description, $tax_amount,
                    $fee_shipping, $discount_amount, $return_url, $cancel_url, $buyer_fullname, $buyer_email, $buyer_mobile,
                    $buyer_address, $array_items);
            } elseif ($payment_method == "ATM_ONLINE" && $bank_code != '') {
                $nl_result = $this->nganluong_model->BankCheckout($order_code, $total_amount, $bank_code, $payment_type, $order_description, $tax_amount,
                    $fee_shipping, $discount_amount, $return_url, $cancel_url, $buyer_fullname, $buyer_email, $buyer_mobile,
                    $buyer_address, $array_items);
            }
            if ($nl_result->error_code == '00') {
                $this->nganluong_model->update_payment_order_nl($order_id, 0, $nl_result->token, "payment method :" . $payment_method . " | bank code :" . $bank_code);

                //https://www.nganluong.vn/checkout.api.nganluong.post.php?cur_code=usd&function=SetExpressCheckout&version=3.1&merchant_id=24338&receiver_email=hoannet@gmail.com&merchant_password=f1bfd514f667cebd7595218b5a40d5b1&order_code=228&total_amount=0.1&payment_method=VISA&payment_type=&order_description=&tax_amount=0&fee_shipping=0&discount_amount=0&return_url=http://smiletouristvietnam.com/book/successpayment&cancel_url=http://smiletouristvietnam.com/book/successpayment&buyer_fullname=&buyer_email=&buyer_mobile=&buyer_address=&total_item=1&item_name1=228&item_quantity1=1&item_amount1=0.1&item_url1=http://nganluong.vn/

                redirect($nl_result->checkout_url);
            } else {
                $this->session->set_flashdata('flash_message_error', 'Không thể thao tác! Thử lại!');
                redirect(base_url() . 'account/addWallet/');


            }
        }
    }

    function nganluong_cancel($order_id)
    {
        $this->load->model('nganluong_model');
        $this->nganluong_model->update_payment_order_nl($order_id, 0);
        $this->load->view('home/account/naptien/nganluong_cancel');
    }

    public function nganluong_success($order_id)
    {
        $this->load->model('nganluong_model');
        $this->load->model('wallet_model');
        $payment_order_nl = $this->nganluong_model->getOrderNLDetail("*", 'id = ' . $order_id);
        $user_info = $this->user_model->get("*", "use_id = " . $payment_order_nl->order_user);
        $nl_result = $this->nganluong_model->GetTransactionDetail($payment_order_nl->token);        

        if ($nl_result) {
            $nl_errorcode = (string)$nl_result->error_code;
            $nl_transaction_status = (string)$nl_result->transaction_status;
            if ($nl_errorcode == '00') {
                if ($nl_transaction_status == '00' || $nl_transaction_status == '04') {
                    $this->nganluong_model->update_payment_order_nl($order_id, 1, "", " transaction_status : " . $nl_result->transaction_status . " | transaction_id : " . $nl_result->transaction_id);
                    $token = $this->wallet_model->get("*", array("token_nl" => $payment_order_nl->token));
                    if (count($token) == 0) {
                        $wallet = array(
                            'user_id' => $user_info->use_id,
                            'group_id' => $user_info->use_group,
                            'parent_id' => $user_info->parent_id,
                            'amount' => $payment_order_nl->order_total,
                            'type' => '1',
                            'description' => 'Nạp tiền Ngân Lượng',
                            'token_nl' => $payment_order_nl->token,
                            'created_date' => date("Y-m-d H:i:s"),
                            'month_year' => date("m-Y"),
                            'status' => '0'

                        );
                        $this->wallet_model->add($wallet);
                    }

                    //trạng thái thanh toán thành công
                }
                if ($nl_transaction_status == '01' || $nl_transaction_status == '02') {
                    $this->nganluong_model->update_nl_order($order_id, 0, "", "payment method :" . $nl_result->payment_method . " | bank code :" . $nl_result->bank_code . " | transaction_status : " . $nl_result->transaction_status . " | transaction_id : " . $nl_result->transaction_id);
                }

                $this->load->view('home/account/naptien/nganluong_success');
            } else {

                $this->load->view('home/account/naptien/nganluong_cancel');
            }
        }
    }

    public function spendingHistory($params1 = NULL)
    {

        $group_id = $this->session->userdata('sessionGroup');
        if (!in_array($group_id, array(AffiliateUser, AffiliateStoreUser))) {
            redirect(base_url() . "account", 'location');
        }
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'recharge_and_spend_money';
        $data['menuType'] = 'account';
        $this->load->model('wallet_model');

        $action = array('search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #BEGIN: Search & Filter
        //$where      = "user_id = " . (int)$this->session->userdata('sessionUser');
        $sort = "id";
        $by = "DESC";
        $sortUrl = '';
        $pageSort = '';
        $pageUrl = '';
        $keyword = '';

        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #BEGIN: Pagination
        $this->load->library('pagination');
        $params = array(
            'user_id' => $this->session->userdata('sessionUser'),
            'order_by' => array('key' => 'id', 'value' => 'DESC'),
            'start' => $start,
            'limit' => settingOtherAccount,
            'is_count' => true
        );

        $totalRecord = $this->wallet_model->getListWallet($params);
        $config['base_url'] = base_url() . 'account/spendingHistory/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        $params['is_count'] = false;
        $data['spendingHistory'] = $this->wallet_model->getListWallet($params);
        $sumwallet = array(
            'user_id' => $this->session->userdata('sessionUser')
        );
        $data['money'] = $this->wallet_model->getSumWallet($sumwallet, '1');
        $data['point'] = $this->wallet_model->getSumWallet($sumwallet, '2');
        $this->load->view('home/account/naptien/spendingHistory', $data);
    }

    function chuyentien_emailmarketing()
    {
        $total_amount = $_POST['amount'];
        $this->load->model('wallet_model');
        $value['isOk'] = false;
        $sumwallet = array(
            'user_id' => $this->session->userdata('sessionUser')
        );
        $data['total_amount'] = $this->wallet_model->getSumWallet($sumwallet, '1');
        if ($data['total_amount'][0]->amount < $total_amount || $total_amount < 0) {
            $value['msg'] = "Số dư không khả dụng";
        } else {
            $user_info = $this->user_model->get('use_id,use_group,parent_id,use_email', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
            $wallet = array(
                'user_id' => $user_info->use_id,
                'group_id' => $user_info->use_group,
                'parent_id' => $user_info->parent_id,
                'amount' => (0 - $total_amount),
                'type' => '1',
                'description' => 'chuyển tiền qua dịch vụ Email Marketing',
                'token_nl' => "",
                'created_date' => date("Y-m-d H:i:s"),
                'month_year' => date("m-Y"),
                'status' => '0'

            );
            $this->db->close();
            $this->wallet_model->add($wallet);


            $conn = new mysqli(email_hostname, email_username, email_password, email_database);

            // Check connection
            if ($conn->connect_error) {
                die("Connection failed: " . $conn->connect_error);
            }
            $query = "SELECT * FROM  mw_customer WHERE email like '%" . $user_info->use_email . "%'";
            $result = $conn->query($query);
            $amount = 0;
            if ($result->num_rows > 0) {
                // output data of each row
                while ($row = $result->fetch_assoc()) {
                    $amount = $row['wallet_amount'];
                }
            }
            $amount = $amount + $total_amount;
            $updateQuery = "UPDATE `azibai_emailapp`.`mw_customer` SET  `wallet_amount` =  " . $amount . " where email like '%" . $user_info->use_email . "%'";
            if ($conn->query($updateQuery) === TRUE) {
                $value['isOk'] = true;
                $value['msg'] = 'chuyển tiền thành công';
            }
            $conn->close();
        }

        echo json_encode($value);
        die;
    }

    function statisticalemployee()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        #BEGIN: Menu 1
        $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'task';
        $data['menuType'] = 'account';
        $this->load->model('staff_model');

        $pr_user = $this->session->userdata('sessionUser');

        $select = '';
        $where = '';
        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "use_fullname";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }

        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }

        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/staffs/all' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;

        $tree[] = (int)$this->session->userdata('sessionUser');
        $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group = '. StaffStoreUser . ' AND use_status = 1 AND parent_id = "' . $this->session->userdata('sessionUser') . '"');
        if (!empty($sub_tructiep)) {
            foreach ($sub_tructiep as $key => $value) {
                //Nếu là chi nhánh, lấy danh sách nhân viên
                $tree[] = $value->use_id;
            }
        }
        $id = implode(',', $tree);
        $groupP = 'use_group = ' . StaffStoreUser;
        $group = AffiliateUser;
        $urlPage = 'account/statisticalemployee';
        if ($this->uri->segment(2) == 'statisticalbran') {
            $group = BranchUser;
            $groupP = 'use_group = ' . StaffStoreUser;
            $urlPage = 'account/statisticalbran';
        }
        $where .= 'use_status = 1 and ( ' . $groupP . ') and parent_id IN(' . $id . ')';
        #END Create link sort

        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total records
        $limit = settingOtherAccount;
        $totalRecord = count($this->user_model->fetch("use_id", $where, "", ""));
        $config['base_url'] = base_url() . $urlPage . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $data['stt'] = $start + 1;
        $staffs = $this->user_model->fetch('use_id,parent_id, use_group, use_username, use_fullname, use_email, use_mobile, (SELECT COUNT(*) FROM tbtt_user u1 WHERE u1.parent_invited = u.use_id and u1.use_status = 1 and u1.use_group = ' . $group . ' ) as sl', $where, $sort, $by, $start, $limit);
        
        $data['staffs'] = $staffs;

        $LArray = array();
        if (!empty($staffs)) {
            foreach ($staffs as $key => $row) {
                $info = $this->get_my_shop($row->use_id);
                $LArray[] = array(
                    'info_parent' => $info['info_parent']
                );
            }
        }
        $data['info_parent'] = $LArray;
        #Load view
        $this->load->view('home/account/staff/statistemployee', $data);
    }

    function salesemployee0()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == BranchUser
            || $group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == StaffUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        $datefrom = $_REQUEST['datefrom'];
        $dateto = $_REQUEST['dateto'];
        $startdate = strtotime($datefrom);
        $enddate = strtotime($dateto);
        $enddatenull = mktime(0, 0, 0, 01, 01, 2006);

        $searchtime = '';
        $select = '';
        $where = '';
        $sort = '';
        $by = '';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);

        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";
            }

            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }

        }
        #END Search & sort
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }

        if ($datefrom != '' && $dateto != '') {
            $searchtime .= " AND s.shc_change_status_date >= " . (float)$startdate . " AND s.shc_change_status_date <= " . (float)$enddate;
        } else {
            $searchtime .= " AND s.shc_change_status_date >= " . (float)$enddatenull;
        }

        $select = 'use_id,use_username, use_fullname,use_email, use_mobile, (SELECT SUM(s.shc_total) FROM tbtt_showcart s INNER JOIN tbtt_user u ON s.af_id_parent = u.use_id WHERE s.af_id_parent = u.use_id AND s.shc_total > 0 ' . $searchtime . ') AS showcarttotal';


        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/salesemployee' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort

        $use_group_query = 'use_group = ' . StaffUser;
        $tree = array();
        $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . BranchUser . ',' . StaffStoreUser . ',' . StaffUser . ') AND use_status = 1 AND parent_id = "' . $this->session->userdata('sessionUser') . '"');
        if (!empty($sub_tructiep)) {
            foreach ($sub_tructiep as $key => $value) {
                $tree[] = $value->use_id;
                //Nếu là chi nhánh, lấy danh sách nhân viên
                if ($value->use_group == BranchUser) {
                    $sub_nv = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group = ' . StaffUser . ' AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_nv)) {
                        foreach ($sub_nv as $k => $v) {
                            $tree[] = $v->use_id;
                            $slAff = $v->sl;
                        }
                    }
                }

                if ($value->use_group == StaffStoreUser) {

                    $tree[] = $value->use_id;
                    //Lấy danh sách CN dưới nó cua NVGH
                    $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . BranchUser . ',' . StaffUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_cn)) {
                        foreach ($sub_cn as $k => $vlue) {
                            $tree[] = $vlue->use_id;

                            if ($vlue->use_group == BranchUser) {
                                // Lay DS NV-CN-NVGH
                                $sub_nv = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group = ' . StaffUser . ' AND use_status = 1 AND parent_id = ' . $vlue->use_id);
                                if (!empty($sub_nv)) {
                                    foreach ($sub_nv as $k => $v) {
                                        $tree[] = $v->use_id;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        $id = implode(',', $tree);       
        $where = 'use_status = 1 and (use_group =' . StaffStoreUser . ' or  use_group =' . StaffUser . ') and parent_id IN(' . $id . ')';

        #BEGIN: Pagination
        $this->load->library('pagination');#sTT - So thu tu
        #Count total record       
        $totalRecord = count($this->user_model->get_list_DSo_by_NVKD($select, $where, $sort, $by, $start, ''));

        $config['base_url'] = base_url() . 'account/salesemployee' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $limit = 1;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        $data['stt'] = $start;
        #END Pagination
        
        $liststoreAF = $this->user_model->fetch_join1($select, "", "", "", "", "", "", $where, $sort, $by, $start, $limit);
        $data['totalRecord'] = $totalRecord;
        $data['liststoreAF'] = $liststoreAF;

        //Tinh tong danh so
        $total = 0;
        foreach ($liststoreAF as $key => $items) {
            $total += $items->showcarttotal;
        }
        $data['total'] = $total;

        $data['menuSelected'] = 'statistic';
        $data['menuPanelGroup'] = 4;
        $data['menuType'] = 'account';

        $this->load->view('home/account/statistic/salesemployee', $data);
    }

    function salesemployee_goc()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == BranchUser
            || $group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == StaffUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        $datefrom = $_REQUEST['datefrom'];
        $dateto = $_REQUEST['dateto'];
        $startdate = strtotime($datefrom);
        $enddate = strtotime($dateto);
        $enddatenull = mktime(0, 0, 0, 01, 01, 2006);

        $searchtime = '';
        $select = '';
        $where = '';
        $sort = '';
        $by = '';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);

        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";
            }

            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }

        }
        #END Search & sort
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }

        if ($datefrom != '' && $dateto != '') {
            $searchtime .= " AND s.shc_change_status_date >= " . (float)$startdate . " AND s.shc_change_status_date <= " . (float)$enddate;
        } else {
            $searchtime .= " AND s.shc_change_status_date >= " . (float)$enddatenull;
        }


        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/salesemployee' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort

        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $use_group_query = 'use_group = ' . StaffUser;
        $tree = array();
        
        $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . BranchUser . ',' . StaffStoreUser . ',' . StaffUser . ',' . AffiliateUser . ') AND use_status = 1 AND parent_id = "' . $this->session->userdata('sessionUser') . '"');
        if (!empty($sub_tructiep)) {
            foreach ($sub_tructiep as $key => $value) {
                //Nếu là chi nhánh, lấy danh sách nhân viên
                $tree[] = $value->use_id;
                if ($value->use_group == StaffUser) {
                }
                if ($value->use_group == StaffStoreUser) {
                    //Lấy danh sách CN dưới nó cua NVGH
                    $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . BranchUser . ',' . StaffUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_cn)) {
                        foreach ($sub_cn as $k => $vlue) {
                            $tree[] = $vlue->use_id;
                            if ($vlue->use_group == BranchUser) {
                                $tree[] = $vlue->use_id;
                                //Lấy danh sách CN dưới nó cua NVGH
                                $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . StaffUser . ') AND use_status = 1 AND parent_id = ' . $vlue->use_id);
                                if (!empty($sub_cn)) {
                                    foreach ($sub_cn as $k => $v) {
                                        $tree[] = $v->use_id;
                                    }
                                }
                            }
                        }
                    }
                }
                if ($value->use_group == BranchUser) {
                    //Lấy danh sách CN dưới nó cua NVGH
                    $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . StaffUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_cn)) {
                        foreach ($sub_cn as $k => $v) {
                            $tree[] = $v->use_id;
                        }
                    }
                }
            }
        }
        $id = implode(',', $tree);
        if (empty($id)) {
            $id = (int)$this->session->userdata('sessionUser');
        } else {
            $shc_saler = '';
        }


        $select .= 'use_id,use_username, use_fullname,use_email, use_mobile, (SELECT SUM(s.shc_total) FROM tbtt_showcart s INNER JOIN tbtt_user u ON s.af_id_parent = u.use_id WHERE s.af_id_parent IN(' . $id . ') AND s.shc_total > 0 ' . $searchtime . ') AS showcarttotal';
        
        $where = 'use_status = 1 and (use_group =' . AffiliateUser . ' ) and parent_id IN(' . $id . ')';
        $where = 'use_status = 1 and (use_group =' . AffiliateUser . ' or  use_group =' . BranchUser . ') and parent_id IN(' . $id . ')';       

        //Chỉ lay doanh thu của GH cha k lấy doanh thu từ GH khác
        if ($this->session->userdata('sessionGroup') != StaffUser) {
            $shc_saler = ' and shc_saler IN(' . $id . ',' . $this->session->userdata('sessionUser') . ')';
        } else {
            $get_p = $this->user_model->get('parent_id', 'use_id = ' . $this->session->userdata('sessionUser'));
            $shc_saler = ' and shc_saler IN(' . $get_p->parent_id . ')';
        }
        //END lay doanh thu của GH cha k lấy doanh thu từ GH khác
        #sTT - So thu tu       
        $totalRecord = count($this->user_model->fetch_join1("use_id, tbtt_showcart.*,SUM(tbtt_showcart.shc_total) As showcarttotal,", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id OR tbtt_user.use_id = tbtt_showcart.shc_saler", $where . ' and shc_total != ""', $sort, $by, $start, '', false, 'parent_id'));
        $config['base_url'] = base_url() . 'account/salesemployee' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $limit = settingOtherAccount;
        $config['per_page'] = $limit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        $data['stt'] = $start;
        #END Pagination
        $liststoreAF = $this->user_model->get_list_DSo_by_NVKD($select, $where, $sort, $by, $start, $limit);       
        $liststoreAF = $this->user_model->fetch_join1("use_id,use_username, use_fullname,use_email,use_mobile,tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id,tbtt_showcart.*,SUM(tbtt_showcart.shc_total) As showcarttotal,", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id OR tbtt_user.use_id = tbtt_showcart.shc_saler", $where . ' and shc_total != ""' . $shc_saler, $sort, $by, $start, $limit, false, 'parent_id');
        $data['totalRecord'] = $totalRecord;
        $LArray = array();
        if (!empty($liststoreAF)) {
            foreach ($liststoreAF as $key => $row) {
                $Str = $this->user_model->get('use_username, use_fullname,use_email,use_mobile, use_group, parent_id, use_id', 'use_id = ' . $row->parent_id);
                $info_parent = '';
                $haveDomain = '';
                $pshop = '';

                $pgroup = $Str->use_group;
                if ($Str->use_group == 3) {
                    $checkDomain = $this->shop_model->get('sho_id, sho_link, domain', 'sho_user = ' . $Str->use_id);
                    if ($checkDomain) {
                        $haveDomain .= $checkDomain->domain;
                        $pshop .= $checkDomain->sho_link;
                    }
                } elseif ($Str->use_group == 14) {
                    $pa_cn = $this->user_model->get('use_username, use_fullname,use_email,use_mobile, use_group, parent_id, use_id', 'use_id = ' . $Str->parent_id);
                    $checkDomain = $this->shop_model->get('sho_id, sho_link, domain', 'sho_user = ' . $pa_cn->use_id);
                    if (!empty($pa_cn)) {
                        if ($pa_cn->use_group == AffiliateStoreUser) {
                        } else {
                            if ($pa_cn->use_group == StaffStoreUser) {
                                $p_group = $pa_cn->use_group;
                                $p_id = $pa_cn->use_id;
                                $parent_id = $pa_cn->parent_id;
                                $p_username = $pa_cn->use_username;
                                $p_fullname = $pa_cn->use_fullname;
                                $p_email = $pa_cn->use_email;
                                $p_mobile = $pa_cn - use_mobile;
                            }
                        }
                    }
                    if ($checkDomain) {
                        $haveDomain .= $checkDomain->domain;
                        $pshop .= $checkDomain->sho_link;
                    }
                } elseif ($Str->use_group == 15) {
                    $p_group = $Str->use_group;
                    $p_id = $Str->use_id;
                    $parent_id = $Str->parent_id;
                    $p_username = $Str->use_username;
                    $p_email = $Str->use_email;
                    $p_mobile = $Str->use_mobile;

                } elseif ($Str->use_group == 11) {
                    $p_group = $Str->use_group;
                    $p_id = $Str->use_id;
                    $parent_id = $Str->parent_id;
                    $p_fullname = $Str->use_fullname;
                    $p_username = $Str->use_username;
                    $p_email = $Str->use_email;
                    $p_mobile = $Str->use_mobile;
                    if (!empty($pa_nv) && $pa_nv->use_group == 14) {
                        $pa_cn = $this->user_model->get('use_username, use_fullname,use_email,use_mobile, use_group, parent_id, use_id', 'use_id = ' . $pa_nv->parent_id);
                        if (!empty($pa_cn)) {
                            if ($pa_cn->use_group == AffiliateStoreUser) {
                                $data['sho_link'] = $pa_cn->use_username;
                            } else {
                                if ($pa_cn->use_group == StaffStoreUser) {
                                    $p_group = $pa_cn->use_group;
                                    $p_id = $pa_cn->use_id;
                                    $parent_id = $pa_cn->parent_id;
                                    $p_username = $pa_cn->use_username;
                                    $p_fullname = $pa_cn->use_fullname;
                                    $p_email = $pa_cn->use_email;
                                    $p_mobile = $pa_cn - use_mobile;
                                }
                            }
                        }
                    } elseif (!empty($pa_nv) && $pa_nv->use_group == 3) {
                    }
                } else {
                }


                $LArray[] = array(
                    'use_id' => $p_id,
                    'use_group' => $p_group,
                    'use_username' => $p_username,
                    'use_fullname' => $p_fullname,
                    'use_email' => $p_email,
                    'use_mobile' => $p_mobile,
                    'parent_id' => $parent_id,
                    'showcarttotal' => $row->showcarttotal,
                    'haveDomain' => $haveDomain,
                    'pshop' => $pshop,
                    'pgroup' => $pgroup,
                    'info_parent' => $info_parent
                );
            }
        }

        $data['totalaff'] = $LArray;
        $data['liststoreAF'] = $LArray;

        //Tinh tong danh so
        $total = 0;
        foreach ($LArray as $key => $items) {
            if ($items['showcarttotal'] > 0 && isset($items['use_group'])) {
                $total += $items['showcarttotal'];
            }
        }
        $data['total'] = $total;

        $data['menuSelected'] = 'statistic';
        $data['menuPanelGroup'] = 4;
        $data['menuType'] = 'account';

        $this->load->view('home/account/statistic/salesemployee', $data);
    }

    function salesemployee()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == BranchUser
            || $group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == StaffUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        $datefrom = $_REQUEST['datefrom'];
        $dateto = $_REQUEST['dateto'];
        $startdate = strtotime($datefrom);
        $enddate = strtotime($dateto);
        $enddatenull = mktime(0, 0, 0, 01, 01, 2006);

        $searchtime = '';
        $select = '';
        $where = '';
        $sort = '';
        $by = '';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";
            }

            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }

        }
        #END Search & sort
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }

        if ($datefrom != '' && $dateto != '') {
            $searchtime .= " AND shc_change_status_date >= " . (float)$startdate . " AND shc_change_status_date <= " . (float)$enddate;
        } else {
            $searchtime .= " AND shc_change_status_date >= " . (float)$enddatenull;
        }

        $data['afsavedateto'] = $dateto;
        $data['afsavedatefrom'] = $datefrom;
        $data['searchtime'] = $searchtime;

        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/salesemployee' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort

        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $tree = array();
        $tree[] = (int)$this->session->userdata('sessionUser');
        $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . BranchUser . ',' . StaffStoreUser . ',' . StaffUser . ') AND use_status = 1 AND parent_id = "' . $this->session->userdata('sessionUser') . '"');
        $tree = $this->treestaff($sub_tructiep);
        $id = implode(',', $tree);
        if (empty($id)) {
            $id = (int)$this->session->userdata('sessionUser');
        }

        $where = 'use_status = 1 and use_group != 14 and use_id IN(' . $id . ')';       
        
        $liststoreAF = $this->user_model->fetch("parent_id,use_id,use_username,use_group,use_fullname,use_email,use_mobile", $where, $sort, $by, $start, '');
        $data['totalRecord'] = $totalRecord;
        $LArray = array();
        if (!empty($liststoreAF)) {
            $left3 = "LEFT";
            $tb3 = "tbtt_product";
            $join3 = "tbtt_showcart.shc_product = tbtt_product.pro_id"; //join bang de dat dieu kien pro_of_shop
            $join_4 = "LEFT";
            $table_4 = "tbtt_order";
            $on_4 = "tbtt_showcart.shc_orderid = tbtt_order.id"; //join bang de dat dieu kien pro_of_shop
            //$groupBy = 'id,tbtt_showcart.af_id,pro_id';
            $groupBy = '';
            $saler = '';
            if ($this->session->userdata('sessionGroup') == AffiliateStoreUser || $this->session->userdata('sessionGroup') == StaffStoreUser) {
                $GH = (int)$this->session->userdata('sessionUser');
                $tree1 = array();
                //  $tree[] = (int)$this->session->userdata('sessionUser');
                if ($this->session->userdata('sessionGroup') == StaffStoreUser) {
                    $getp = $this->user_model->fetch('use_id,parent_id', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
                    $tree1[] = $GH = (int)$getp[0]->parent_id;
                }
                /*$sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . BranchUser . ',' . StaffStoreUser . ') AND use_status = 1 AND parent_id = "' . $this->session->userdata('sessionUser') . '"');
                if (!empty($sub_tructiep)) {
                    foreach ($sub_tructiep as $key => $value) {
                        //Nếu là chi nhánh, lấy danh sách nhân viên
                        if ($value->use_group == StaffStoreUser) {
                            //Lấy danh sách CN dưới nó cua NVGH
                            $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                            if (!empty($sub_cn)) {
                                foreach ($sub_cn as $k => $vlue) {
                                    $tree1[] = $vlue->use_id;
                                }
                            }
                        } else {
                            $tree1[] = $value->use_id;
                        }
                    }
                }*/
                $arrbran = $this->treebranch((int)$this->session->userdata('sessionUser'));
                $id = implode(",", $arrbran);
                $saler .= ' AND ((tbtt_showcart.shc_saler=' . $GH . ' AND pro_of_shop=0)';
                if (!empty($id)) {
                    $saler .= ' OR ((tbtt_showcart.shc_saler IN(' . $id . ')) AND pro_of_shop>0)';
                }
                $saler .= ')';
            } else {
                if ($this->session->userdata('sessionGroup') == BranchUser) {
                    $saler .= ' AND tbtt_showcart.shc_saler = ' . (int)$this->session->userdata('sessionUser');
                    $id .= ','.(int)$this->session->userdata('sessionUser');
                }
            }
            $total = 0;
            $staffhavemoney = array();
            foreach ($liststoreAF as $key => $row) {
                //echo 'use_group IN (15,14, 11,2) AND use_status = 1 AND parent_id = "' . $row->use_id . '"'.'<br/>';
                $sub_tructiep = $this->user_model->get_list_user('use_id, use_group', 'use_status = 1 AND parent_id = "' . $row->use_id . '"');//use_group IN (15,14, 11,2) AND 
                $arrstaff = $this->treestaff($sub_tructiep);
                $staffid = implode(',', $arrstaff);
                if($staffid != ''){
                    $id = $id.','.$staffid;
                }
                if ($id != '') {
                    $shc_saler = ' and shc_saler IN(' . $id . ') and parent_id IN(' . $id . ',' . $row->use_id . ')';
                    if ($row->use_group == StaffUser) {
                        //$shc_saler = ' and (shc_saler IN(' . $row->parent_id . ') and parent_id IN(' . $row->parent_id . '))';
                    }
                    $get_aff = $this->user_model->get('use_group,parent_id', 'parent_id IN(' . $id . ') and use_group = ' . AffiliateUser);
                    if (!empty($get_aff)) {
                        foreach ($get_aff as $vl) {
                            $get_p = $this->user_model->get('use_group,parent_id', 'use_id = "' . $vl->parent_id . '"');
                            if ($get_p->use_group == StaffUser) {
                                $id .= ',' . $get_p->parent_id;
                            }
                        }
                    }
                    $where_af = 'use_status = 1 and shc_status IN(01,02,03,98) and (use_group =' . AffiliateUser . ' or  use_group =' . BranchUser . ')' . $shc_saler . $searchtime . $saler;
                    $ds = $this->user_model->fetch_join4("use_id,parent_id as pid,use_group,use_username, (SELECT use_group FROM tbtt_user WHERE use_id = pid) as gp,SUM(tbtt_showcart.shc_total) As showcarttotal,", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", "tbtt_user.use_id = tbtt_showcart.af_id or tbtt_user.use_id = tbtt_showcart.shc_saler", $left3, $tb3, $join3, $join_4, $table_4, $on_4, $where_af, $sort, $by, $start, '', false, 'parent_id');
                    foreach($ds as $at => $item){
                        if($item->showcarttotal > 0 && $item->gp != 14){
                            $staffhavemoney[$item->pid] = $item->pid;
                            $moneyofcn[$item->pid] = $item->showcarttotal;
                        }
                    }
                    //$moneyNV = $ds[0]->showcarttotal;

                    //$liststoreAF[$key]['doanhso'] = $moneyNV;

                    //$total += $moneyNV;
                    
//                    $info = $this->get_my_shop($row->use_id);
//                    $LArray[] = array(
//                        'use_id' => $row->use_id,
//                        'use_group' => $row->use_group,
//                        'use_username' => $row->use_username,
//                        'use_fullname' => $row->use_fullname,
//                        'use_email' => $row->use_email,
//                        'use_mobile' => $row->use_mobile,
//                        'parent_id' => $row->parent_id,
//                        'showcarttotal' => $moneyofcn[$row->use_id],
//                        'info_parent' => $info['info_parent'],
//                        'pshop' => $info['pshop'],
//                        'link_gh' => $info['link_gh']
//                    );

                }
                
            }
        }
        $limit = settingOtherAccount;
        $arrstaffmn = array();
        foreach ($staffhavemoney as $at => $value){
            $arrstaffmn[] = $value;
        }
        $idstaff = implode(',',$arrstaffmn);
        if($idstaff != ''){
            $where = 'use_status = 1 and use_id IN(' . $idstaff . ')';
            $liststaffmn = $this->user_model->fetch("parent_id,use_id,use_username,use_group,use_fullname,use_email,use_mobile", $where, $sort, $by, $start, $limit);
            foreach ($liststaffmn as $key => $row) {
                $total += $moneyofcn[$row->use_id];
                $info = $this->get_my_shop($row->use_id);
                $LArray[] = array(
                    'use_id' => $row->use_id,
                    'use_group' => $row->use_group,
                    'use_username' => $row->use_username,
                    'use_fullname' => $row->use_fullname,
                    'use_email' => $row->use_email,
                    'use_mobile' => $row->use_mobile,
                    'parent_id' => $row->parent_id,
                    'showcarttotal' => $moneyofcn[$row->use_id],
                    'info_parent' => $info['info_parent'],
                    'pshop' => $info['pshop'],
                    'link_gh' => $info['link_gh']
                );
            }
        }
        $data['liststoreAF'] = $LArray;

        //Tinh tong danh so
        $data['total'] = $total;
        $data['tree'] = $id;
	
	$data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'statistic';
        $data['menuType'] = 'account';
        
        //$where = 'use_status = 1 and (use_group =' . StaffStoreUser . ' or  use_group =' . StaffUser . ') and parent_id IN(' . $id . ')';
        #sTT - So thu tu       
        $totalRecord = count($this->user_model->fetch("parent_id,use_id,use_username, use_fullname,use_email,use_mobile", $where, $sort, $by, $start, ''));
        $config['base_url'] = base_url() . 'account/salesemployee' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        $data['stt'] = $start;
        #END Pagination
        
        //Tinh tong danh so
        //$data['saler'] = $saler;
        $this->load->view('home/account/statistic/salesemployee', $data);
    }

    function salesemployee_Store()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == BranchUser
            || $group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == StaffUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        $datefrom = $_REQUEST['datefrom'];
        $dateto = $_REQUEST['dateto'];
        $startdate = strtotime($datefrom);
        $enddate = strtotime($dateto);
        $enddatenull = mktime(0, 0, 0, 01, 01, 2006);

        $searchtime = '';
        $select = '';
        $where = '';
        $sort = '';
        $by = '';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";
            }

            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }

        }
        #END Search & sort
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }

        if ($datefrom != '' && $dateto != '') {
            $searchtime .= " AND shc_change_status_date >= " . (float)$startdate . " AND shc_change_status_date <= " . (float)$enddate;
        } else {
            $searchtime .= " AND shc_change_status_date >= " . (float)$enddatenull;
        }

        $data['afsavedateto'] = $dateto;
        $data['afsavedatefrom'] = $datefrom;
        $data['searchtime'] = $searchtime;

        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/salesemployee' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort

        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $tree = array();
        $tree[] = (int)$this->session->userdata('sessionUser');
        $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . StaffStoreUser . ',' . StaffUser . ') AND use_status = 1 AND parent_id = "' . $this->session->userdata('sessionUser') . '"');
        if (!empty($sub_tructiep)) {
            foreach ($sub_tructiep as $key => $value) {
                //Nếu là chi nhánh, lấy danh sách nhân viên
                $tree[] = $value->use_id;
                if ($value->use_group == StaffStoreUser) {
                    //Lấy danh sách CN dưới nó cua NVGH
                    $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . StaffUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_cn)) {
                        foreach ($sub_cn as $k => $vlue) {
                            $tree[] = $vlue->use_id;
                            if ($vlue->use_group == BranchUser) {
                                //Lấy danh sách CN dưới nó cua NVGH
                                $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . StaffUser . ') AND use_status = 1 AND parent_id = ' . $vlue->use_id);
                                if (!empty($sub_cn)) {
                                    foreach ($sub_cn as $k => $v) {
                                        $tree[] = $v->use_id;
                                    }
                                }
                            }
                        }
                    }
                }
                if ($value->use_group == BranchUser) {
                    //Lấy danh sách CN dưới nó cua NVGH
                    $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . StaffUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_cn)) {
                        foreach ($sub_cn as $k => $v) {
                            $tree[] = $v->use_id;
                        }
                    }
                }
            }
        }
        $id = implode(',', $tree);
        if (empty($id)) {
            $id = (int)$this->session->userdata('sessionUser');
        } else {
            $shc_saler = '';            
        }
        $where = 'use_status = 1 and (use_group =' . StaffStoreUser . ' or  use_group =' . StaffUser . ') and parent_id IN(' . $id . ')';
        #sTT - So thu tu        
        $totalRecord = count($this->user_model->fetch("parent_id,use_id,use_username, use_fullname,use_email,use_mobile", $where, $sort, $by, $start, ''));
        $config['base_url'] = base_url() . 'account/salesemployee' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $limit = settingOtherAccount;
        $config['per_page'] = $limit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        // $data['linkPage'] = $this->pagination->create_links();
        $data['stt'] = $start;
        #END Pagination
        $liststoreAF = $this->user_model->fetch("parent_id,use_id,use_username, use_fullname,use_email,use_mobile", $where, $sort, $by, $start, $limit);
        $data['totalRecord'] = $totalRecord;
        $LArray = array();
        if (!empty($liststoreAF)) {
            foreach ($liststoreAF as $key => $row) {
                $info = $this->get_my_shop($row->use_id);
                $LArray[] = array(
                    'use_id' => $row->use_id,
                    'use_group' => $row->use_group,
                    'use_username' => $row->use_username,
                    'use_fullname' => $row->use_fullname,
                    'use_email' => $row->use_email,
                    'use_mobile' => $row->use_mobile,
                    'parent_id' => $row->parent_id,
                    'showcarttotal' => $row->showcarttotal,
                    'info_parent' => $info['info_parent'],
                    'pshop' => $info['pshop'],
                    'link_gh' => $info['link_gh']
                );
            }
        }

        $data['liststoreAF'] = $LArray;
        //Tinh tong danh so
        $total = 0;
        $data['total'] = $total;

        $data['tree'] = $id;
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'statisticStore';
        $data['menuType'] = 'account';

        $saler = '';
        if ($this->session->userdata('sessionGroup') == AffiliateStoreUser || $this->session->userdata('sessionGroup') == StaffStoreUser) {
            $GH = (int)$this->session->userdata('sessionUser');
            $tree1 = array();
            //  $tree[] = (int)$this->session->userdata('sessionUser');
            if ($this->session->userdata('sessionGroup') == StaffStoreUser) {
                $getp = $this->user_model->fetch('use_id,parent_id', 'use_id = ' . (int)$this->session->userdata('sessionUser'));
                $tree1[] = $GH = (int)$getp[0]->parent_id;
            }
            $sub_tructiep = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN (' . BranchUser . ',' . StaffStoreUser . ') AND use_status = 1 AND parent_id = "' . $this->session->userdata('sessionUser') . '"');
            if (!empty($sub_tructiep)) {
                foreach ($sub_tructiep as $key => $value) {
                    //Nếu là chi nhánh, lấy danh sách nhân viên
                    if ($value->use_group == StaffStoreUser) {
                        //Lấy danh sách CN dưới nó cua NVGH
                        $sub_cn = $this->user_model->get_list_user('use_id, use_username, use_group', 'use_group IN(' . BranchUser . ') AND use_status = 1 AND parent_id = ' . $value->use_id);
                        if (!empty($sub_cn)) {
                            foreach ($sub_cn as $k => $vlue) {
                                $tree1[] = $vlue->use_id;
                            }
                        }
                    } else {
                        $tree1[] = $value->use_id;
                    }
                }
            }
            $id = implode(",", $tree1);
            $saler .= ' AND ((tbtt_showcart.shc_saler=' . $GH . ' AND pro_of_shop=0)';
            if (!empty($id)) {
                $saler .= ' OR ((tbtt_showcart.shc_saler IN(' . $id . ')) AND pro_of_shop>0)';
            }
            $saler .= ')';
        } else {
            if ($this->session->userdata('sessionGroup') == BranchUser) {
                $saler .= ' AND tbtt_showcart.shc_saler = ' . (int)$this->session->userdata('sessionUser');
            }
        }
        //Tinh tong danh so
        $total = 0;
        $data['saler'] = $saler;
        $this->load->view('home/account/statistic/salesemployee', $data);
    }

    function listbranch()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == StaffStoreUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        #BEGIN: Menu
        $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'chinhanh';
        $data['menuType'] = 'account';
        $data['group_id'] = $group_id;
        #END: Menu
        #BEGIN: Variables
        $select = '';
        $where = '';
        $sort = 'u.use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        $by = '';
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'linkgh':
                    $pageUrl .= '/sort/linkgh';
                    $sort = "tbtt_shop.sho_link";
                    break;
                case 'sl':
                    $pageUrl .= '/sort/sl';
                    $sort = "sl";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #END Search & sort

        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }

        // get list id nvgh
        // $tree = array();
        // $get_idnvgh = $this->user_model->fetch('use_id', 'parent_id =' . $this->session->userdata('sessionUser') . ' and use_group = ' . StaffStoreUser, "", "", "", "");
        // $tree[] = $this->session->userdata('sessionUser');
        // foreach ($get_idnvgh as $key => $value) {
        //     $tree[] = $value->use_id;
        // }
        // $parent_bran = implode($tree, ',');
        $parent_bran = $this->session->userdata('sessionUser');
        if ($group_id == StaffStoreUser) {
           $get_idnvgh = $this->user_model->fetch_join('tbtt_user.parent_id, p.use_group as p_use_group', "LEFT", "tbtt_user as p", "p.use_id = tbtt_user.parent_id", 'tbtt_user.use_id =' . $this->session->userdata('sessionUser') . ' AND p.use_group= 3',"");

           if(!empty($get_idnvgh)) {
                $parent_bran = $get_idnvgh[0]->parent_id;
           }else{
                redirect(base_url() . "account", 'location');
                die();
           }
        }


        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/dsbran' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort

        $select = "use_id,use_username, use_fullname, use_email, use_mobile, use_message, tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id, (SELECT COUNT(*) FROM tbtt_user u1 WHERE u1.parent_id = tbtt_user.use_id and u1.use_status = 1 and use_group = 2 ) as sl";
        $where = "u.use_status = 1 AND u.use_group = " . BranchUser . " AND u.parent_id =" . $parent_bran;

        #BEGIN: Pagination
        $this->load->library('pagination');
        $this->load->model('branch_model');
        #Count total record
        $limmit = 20;
        $totalRecord = count($this->branch_model->fetch_join1("u.use_id", "LEFT", "tbtt_shop", 'u.use_id = tbtt_shop.sho_user', $where, '', '', '', ''));
        $config['base_url'] = base_url() . 'account/dsbran' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limmit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        $data['sTT'] = $start + 1;
        #END Pagination
        $where = "use_status = 1 AND use_group = " . BranchUser . " AND parent_id =" . $parent_bran;
        $branchs = $this->user_model->fetch_join($select, "LEFT", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", $where, $sort, $by, $start, $limmit);
        $LArray = array();
        if (!empty($branchs)) {
            foreach ($branchs as $key => $row) {
                $info = $this->get_my_shop($row->use_id);
                $LArray[] = array(
                    'use_id' => $row->use_id,
                    'use_username' => $row->use_username,
                    'use_fullname' => $row->use_fullname,
                    'use_email' => $row->use_email,
                    'use_mobile' => $row->use_mobile,
                    'use_message' => $row->use_message,
                    'parent_id' => $row->parent_id,
                    'sho_link' => $row->sho_link,
                    'sho_name' => $row->sho_name,
                    'sho_user' => $row->sho_user,
                    'shc_id' => $row->shc_id,
                    'shc_product' => $row->shc_id,
                    'pro_category' => $row->pro_category,
                    'shc_orderid' => $row->shc_orderid,
                    'shc_quantity' => $row->shc_quantity,
                    'shc_saler_store_type' => $row->shc_saler_store_type,
                    'shc_saler' => $row->shc_saler,
                    'shc_buyer' => $row->shc_buyer,
                    'shc_buyer_group' => $row->shc_buyer_group,
                    'shc_saler_parent' => $row->shc_saler_parent,
                    'shc_buyer_parent' => $row->shc_buyer_parent,
                    'af_id' => $row->af_id,
                    'af_id_parent' => $row->af_id_parent,
                    'shc_process' => $row->shc_process,
                    'pro_price' => $row->pro_price,
                    'pro_price_original' => $row->pro_price_original,
                    'pro_price_rate' => $row->pro_price_rate,
                    'pro_price_amt' => $row->pro_price_amt,
                    'af_rate' => $row->af_rate,
                    'af_amt' => $row->af_amt,
                    'dc_amt' => $row->dc_amt,
                    'dc_rate' => $row->dc_rate,
                    'affiliate_discount_amt' => $row->affiliate_discount_amt,
                    'affiliate_discount_rate' => $row->affiliate_discount_rate,
                    'shc_buydate' => $row->shc_buydate,
                    'shc_change_status_date' => $row->shc_change_status_date,
                    'shc_status' => $row->shc_status,
                    'shc_payment_stutus' => $row->shc_payment_stutus,
                    'em_discount' => $row->em_discount,
                    'shc_total' => $row->shc_total,
                    'showcarttotal' => $row->showcarttotal,
                    'sl' => $row->sl,
                    'info_parent' => $info['info_parent'],
                    'pshop' => $info['pshop'],
                    'link_gh' => $info['link_gh']
                );
            }
        }

        $data['branchs'] = $LArray;
        $data['totalRecord'] = $totalRecord;
        #Load view
        $this->load->view('home/account/branch/listbranch', $data);
    }
    function allaffiliateunder()
    {
        //Create by Bao Tran
        $group_id = $this->session->userdata('sessionGroup');
        $user_id = (int)$this->session->userdata('sessionUser');
        #Check session user
        if ($this->session->userdata('sessionUser') > 0) {
        } else {
            redirect(base_url() . 'login', 'location');
            die();
        }
        #init variable
        $select = '';
        $where = '';
        $sort = '';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';

        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);

        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'sho_name':
                    $pageUrl .= '/sort/sho_name';
                    $sort = "sho_name";
                    break;
                case 'sho_link':
                    $pageUrl .= '/sort/sho_link';
                    $sort = "sho_link";
                    break;

                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";
            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/allaffiliateunder' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        $where = '';
        #END Create link sort
        
        $list_sub = array();

        $filter_user = $this->input->post('chinhanh');
        $data_filter = $this->user_model->get_list_user('use_id, use_username, use_group', '(use_group = 15 OR use_group = 14) AND use_status = 1 AND (parent_shop = ' . $user_id . ' OR parent_id = ' . $user_id . ' )' );
        if (!empty($data_filter)) {
            foreach ($data_filter as $k1 => $v1) {
                $list_sub[$k1]->id = $v1->use_id;
                $list_sub[$k1]->name = $v1->use_username;
                $list_sub[$k1]->group = $v1->use_group;
            }
        }
        if (isset($filter_user) && $filter_user > 0) {
            //$user_id = $filter_user
            $get_nv_cn = $this->user_model->get('use_id, use_username, use_group', 'use_status = 1 AND use_id = ' . $filter_user);

            if ($get_nv_cn->use_group == 15) {
                $condition = 'AND ( parent_id = '. $user_id .' OR parent_shop = '. $user_id .') && parent_invited = '. $filter_user;
            } else {
                $condition = 'AND parent_id = '. $filter_user .' AND parent_shop = '. $user_id;
            }
        }else{
            $condition = 'AND ( parent_id = '. $user_id .' OR parent_shop = '. $user_id .')';
        }

        
        $select .= 'use_id, use_username, use_fullname, use_group, use_email, use_mobile,use_message, parent_id, sho_id, sho_link, sho_name, sho_user, domain';
        $where .= 'use_group = 2 AND use_status = 1 '.$condition;
       
        #BEGIN: Pagination
        $limmit = 20;
        $this->load->library('pagination');
        $totalRecord = count($this->user_model->fetch_join("use_id", 'INNER', "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", $where, $sort, $by, $start, ''));
        $config['cur_page'] = $start;
        $config['base_url'] = base_url() . 'account/allaffiliateunder' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limmit;
        $config['num_links'] = 5;
        $config['uri_segment'] = 3;
        $config['cur_page'] = $start;
        $data['sTT'] = $start;

        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        $model_aff = $this->user_model->fetch_join($select, "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", $where, $sort, $by, $start, $limmit);
        // Get thong tin Chi Nhanh or Nhan vien cho tung Affiliate
        $LArray = array();
        if (!empty($model_aff)) {
            $infoP = array();
            foreach ($model_aff as $key => $row) {
                $info = $this->get_my_shop($row->use_id);

                $LArray[] = array(
                    'use_id' => $row->use_id,
                    'use_username' => $row->use_username,
                    'use_fullname' => $row->use_fullname,
                    'use_email' => $row->use_email,
                    'use_mobile' => $row->use_mobile,
                    'use_message' => $row->use_message,
                    'parent_id' => $row->parent_id,
                    'sho_link' => $row->sho_link,
                    'sho_name' => $row->sho_name,
                    'sho_user' => $row->sho_user,
                    'pshop' => $info['pshop'],
                    'link_gh' => $info['link_gh']
                );
                $infoP[] = array(
                    'info_parent' => $info['info_parent']
                );
            }
        }

        $data['totalaff'] = $LArray;
        $data['totalRecord'] = $totalRecord;
        $data['list_sub'] = $list_sub;
        if ($group_id != CoreAdminUser && $group_id != CoreMemberUser && $group_id != Partner1User && $group_id != Partner2User && $group_id != Developer1User && $group_id != Developer2User) {
        } else {
            $infoP = array();
            for ($i = 0; $i < count($model_aff); $i++) {
                $this->db->cache_off();
                $parentUser = $this->user_model->get("use_id, use_username", "use_id = " . $model_aff[$i]->parent_id);
                $infoP[] = array(
                    'info_parent' => $parentUser->use_username
                );
            }
        }
        $data['info_parent'] = $infoP;
        $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'affiliate';
        $data['menuType'] = 'account';
        #Load View
        $this->load->view('home/account/tree/allaffiliateunder', $data);
    }

    function statisticlistbran0()
    {
        //Create by Bao Tran
        //Dev by Ngoc Tran
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser || $group_id == StaffStoreUser) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $dateto = $_REQUEST['datefromshop'];
        $datefrom = $_REQUEST['datetoshop'];
        $this->session->set_userdata('datetoshop', $dateto);
        $this->session->set_userdata('datefromshop', $datefrom);
        $data['savedateto'] = $dateto;
        $data['savedatefrom'] = $datefrom;
        $monthsto = date('m', strtotime($dateto));
        $dayto = date('d', strtotime($dateto));
        $yearto = date('y', strtotime($dateto));

        $monthsfrom = date('m', strtotime($datefrom));
        $dayfrom = date('d', strtotime($datefrom));
        $yearfrom = date('y', strtotime($datefrom));
        $startdate = mktime(0, 0, 0, $monthsto, $dayto, $yearto);
        $enddate = mktime(23, 59, 59, $monthsfrom, $dayfrom, $yearfrom);
        $enddatenull = mktime(0, 0, 0, 01, 01, 2006);

        $use_id = (int)$this->input->post('use_id');
        $shop_id = (int)$this->input->post('shop_id');
        if (isset($use_id) && $use_id > 0) {
            $this->db->cache_off();
            $this->user_model->update(array('parent_id' => $use_id), 'use_id = ' . $shop_id);
            echo '1';
            exit();
        }
        $tree = array();
        $this->getTreeInList($this->session->userdata('sessionUser'), $tree);
        if (count($tree) > 0) {
            $tree_list = $this->user_model->fetch("use_id, use_username", "use_id IN (" . implode(',', $tree) . ")", "", "");
        }
        $data['tree_list'] = $tree_list;

        $tree[] = $this->session->userdata('sessionUser');
        $tree = implode(',', $tree);

        $data['menuSelected'] = 'statistic';
        $data['menuPanelGroup'] = 4;
        $data['menuType'] = 'account';
        $sort = 'use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'hoten':
                    $pageUrl .= '/sort/hoten';
                    $sort = "use_fullname";
                    break;
                case 'shopname':
                    $pageUrl .= '/sort/shopname';
                    $sort = "sho_name";
                    break;
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }

        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/statisticlistshop' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;

        $tree = array();
        //Lấy danh sách các vị trí CN và NV của GH
        $sub_tructiep = $this->user_model->get_list_user('use_id, use_group', 'use_group IN (' . BranchUser . ',' . StaffStoreUser . ') AND use_status = 1 AND parent_id = "' . (int)$this->session->userdata('sessionUser') . '"');
        if (!empty($sub_tructiep)) {
            foreach ($sub_tructiep as $key => $value) {
                if ($value->use_group == BranchUser) {
                    $tree[] = $value->use_id;
                    $sub_nv = $this->user_model->get_list_user('use_id, use_group', 'use_group IN (11) AND use_status = 1 AND parent_id = ' . $value->use_id);
                }
                //lay id neu NVGH
                if ($value->use_group == StaffStoreUser) {
                    $sub_nv = $this->user_model->get_list_user('use_id, use_group', 'use_group IN (14,11) AND use_status = 1 AND parent_id = ' . $value->use_id);
                    if (!empty($sub_nv)) {
                        foreach ($sub_nv as $k => $v) {
                            $tree[] = $v->use_id;
                            if ($v->use_group == BranchUser) {
                                $tree[] = $value->use_id;
                                $tree[] = $v->use_id;
                                $sub_nvcn = $this->user_model->get_list_user('use_id, use_group', 'use_group IN (11) AND use_status = 1 AND parent_id = ' . $v->use_id);
                            }
                        }
                    }
                }
            }
        }
        $tree = implode(',', $tree);
        $where = 'use_status = 1 and ( use_group = ' . AffiliateUser . ' or use_group = ' . BranchUser . ') and parent_id IN(' . $tree . ')';
        //Chỉ lay doanh thu của GH cha k lấy doanh thu từ GH khác
        $get_u = $this->user_model->get('use_id, use_group', 'use_status = 1 AND use_id = ' . (int)$this->session->userdata('sessionUser'));
        if ($this->session->userdata('sessionGroup') == AffiliateStoreUser) {
            $where .= ' and shc_saler IN(' . $tree . ',' . $this->session->userdata('sessionUser') . ')';
        }
        //END lay doanh thu của GH cha k lấy doanh thu từ GH khác
        //Lưu trữ session để xem chi tiết các đơn hàng của Aff
        $this->session->set_userdata('tree_array', $tree);
        $parentID = $this->session->userdata('sessionUser');
        if ($dateto != '' && $datefrom != '') {
            $where .= " AND shc_change_status_date >= " . (float)$startdate . " AND shc_change_status_date <= " . (float)$enddate;
        } else {
            $where .= " AND shc_change_status_date >=" . (float)$enddatenull;
        }
        #END Create link sort
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $limmit = 20;
        $staffssum = $this->user_model->fetch_join1("use_id,use_username, use_fullname,use_email,use_mobile,tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id,tbtt_showcart.*,SUM(tbtt_showcart.shc_total) As showcarttotal,", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", "LEFT", "tbtt_showcart", " tbtt_user.use_id = tbtt_showcart.af_id OR tbtt_user.use_id = tbtt_showcart.shc_saler", $where, $sort, $by, $start, '');
        $totalRecord = count($staffssum);
        $config['base_url'] = base_url() . 'account/statisticlistbran' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limmit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $total_sum_staff = 0;
        foreach ($staffssum as $key => $items) {
            $total_sum_staff += $items->showcarttotal;
        }
        $data['total_sum_staff'] = $total_sum_staff;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu       
        $staffs = $this->user_model->fetch_join1("use_id, use_group,use_username, use_fullname,use_email,use_mobile,tbtt_shop.sho_link, tbtt_shop.sho_name, parent_id,tbtt_showcart.*,SUM(tbtt_showcart.shc_total) As showcarttotal,", "INNER", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user,tbtt_showcart", "", "", "", '(tbtt_user.use_id = tbtt_showcart.af_id or tbtt_user.use_id = tbtt_showcart.shc_saler) AND ' . $where, $sort, $by, $start, $limmit);
        $data['staffs'] = $staffs;
        for ($i = 0; $i < count($staffs); $i++) {
            $this->db->cache_off();
            $parentUser = $this->user_model->get("use_id, use_username, use_fullname,use_email,use_mobile, use_group", "use_id = " . $staffs[$i]->parent_id);
            $parentShop = $this->shop_model->get("sho_name, sho_link", "sho_user = " . $staffs[$i]->parent_id);
            $staffs[$i]->shoname_parent = $parentShop->sho_name;
            $staffs[$i]->sholink_parent = $parentShop->sho_link;
            $staffs[$i]->group_parent = $parentUser->use_group;
            $staffs[$i]->username_parent = $parentUser->use_username;
            $staffs[$i]->userid_parent = $parentUser->use_id;
            $staffs[$i]->fullname_parent = $parentUser->use_fullname;
            $staffs[$i]->email_parent = $parentUser->use_email;
            $staffs[$i]->mobile_parent = $parentUser->use_mobile;
        }

        #Load view
        $this->load->view('home/account/statistic/statisticlistbran', $data);
    }

    function statisticlistbran()
    {
        $parent_id = 0;
        $parent_group = 0;
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == BranchUser
            || $group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == StaffUser
            || $group_id == StaffStoreUser
        ) {            
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'statistic';
        $data['menuType'] = 'account';

        $datefrom = $_REQUEST['datefrom'];
        $dateto = $_REQUEST['dateto'];
        $startdate = strtotime($datefrom);
        $enddate = strtotime($dateto);
        $enddatenull = mktime(0, 0, 0, 01, 01, 2006);
        $data['afsavedateto'] = $dateto;
        $data['afsavedatefrom'] = $datefrom;

        $searchtime = '';
        $select = '';
        if($group_id == StaffStoreUser) {
            $uid = $this->session->userdata('sessionUser');
            $parent_id = $this->user_model->get("parent_id", "use_id = $uid")->parent_id;
            $parent_group = $this->user_model->get("use_group", "use_id = $parent_id")->use_group;
            if($parent_group != BranchUser) {
                $where = 'u1.use_group = 14 AND u1.parent_id = '. $parent_id .' AND u1.use_status = 1';
            } else {
                redirect(base_url() . "account", 'location');
                die();
            }
        } else {
            $where = 'u1.use_group = 14 AND u1.parent_id = '. $this->session->userdata('sessionUser') .' AND u1.use_status = 1';
        }
        $sort = '';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'name':
                    $pageUrl .= '/sort/name';
                    $sort = "use_username";
                    break;
                case 'doanhthu':
                    $pageUrl .= '/sort/doanhthu';
                    $sort = "showcarttotal";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";
            }

            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #END Search & sort
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }

        if ($datefrom != '' && $dateto != '') {
            $searchtime .= " AND shc_change_status_date >= ". (float)$startdate ." AND shc_change_status_date <= ". (float)$enddate;
        } else {
            $searchtime .= " AND shc_change_status_date >= ". (float)$enddatenull;
        }
        $data['searchtime'] = $searchtime;

        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() .'account/statisticlistbran'. $sortUrl .'/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort           
        if($group_id == StaffStoreUser) {
            $id = $this->stringMyBranch($parent_id);
        } else {
            $id = $this->stringMyBranch($this->session->userdata('sessionUser'));
        }

        #BEGIN: Pagination
        $this->load->library('pagination');     
        if($group_id == StaffStoreUser) {
            $totalRecord = count($this->user_model->fetch('use_id', 'use_group = 14 AND parent_id = '. $parent_id .' AND use_status = 1'));
        } else {
            $totalRecord = count($this->user_model->fetch('use_id', 'use_group = 14 AND parent_id = '. $this->session->userdata('sessionUser') .' AND use_status = 1'));
        }
        $config['base_url'] = base_url() .'account/salesemployee'. $pageUrl .'/page/';
        $config['total_rows'] = $totalRecord;
        $limit = settingOtherAccount;
        $config['per_page'] = $limit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);       
        $data['stt'] = $start;
        #END Pagination
        $listbranch = $this->order_model->fetch_join('u1.parent_id, u1.use_id, u1.use_username, u1.use_fullname, u1.use_email, u1.use_mobile, (SELECT u2.use_username FROM tbtt_user AS u2 WHERE u1.parent_id = u2.use_id) AS info_parent', 'INNER', 'tbtt_user AS u1', 'u1.use_id = tbtt_order.order_saler', $where, $sort, $by, $start, $limit, $distinct, $group_by = "u1.use_id");
        foreach ($listbranch as $key => $value) {
            $where_order = "(tbtt_showcart.shc_saler = " .$value->use_id . " AND tbtt_product.pro_of_shop > 0) AND tbtt_showcart.shc_status IN (01,02,03,98)";
            $total_dt = $this->order_model->fetch_join3('SUM(shc_total) AS order_total', 'INNER', 'tbtt_showcart', 'tbtt_showcart.shc_orderid = tbtt_order.id', 'LEFT', 'tbtt_product', 'tbtt_showcart.shc_product = tbtt_product.pro_id', $where_order , '', '', '', '', '', '');
            if(!empty($total_dt)) {
                $total_dt = $total_dt[0]->order_total;
            } else {
                $total_dt = 0;
            }
            $listbranch[$key]->order_total = $total_dt;
        }
        $data['listbranch'] = $listbranch;
	    #Load view
        $this->load->view('home/account/statistic/statisticlistbran', $data);
    }

    // get ds nhan vien gian hang
    function liststaffstore()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        if (strtolower($this->uri->segment(3)) == 'delete') {
            $id = (int)$this->uri->segment(4);
            $this->user_model->delete($id);
            redirect(base_url() . "account/liststaffstore");
        }
        #BEGIN: Menu
        $data['menuSelected'] = 'staffstore';
        $data['menuType'] = 'account';
        #END: Menu
        #BEGIN: Variables
        $select = '';
        $where = '';
        $sort = 'u.use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);

        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'use_username':
                    $pageUrl .= '/sort/use_username';
                    $sort = "use_username";
                    break;
                case 'use_fullname':
                    $pageUrl .= '/sort/use_fullname';
                    $sort = "use_fullname";
                    break;
                case 'sl':
                    $pageUrl .= '/sort/sl';
                    $sort = "sl";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #END Search & sort

        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }

        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/liststaffstore' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        $select .= 'u.use_id, u.use_username, u.use_fullname, u.use_email, u.use_mobile,u.use_message, (SELECT COUNT(*) FROM tbtt_user u1 WHERE u1.parent_id = u.use_id and u1.use_status = 1 and u1.use_group = 2 ) as sl';
        $where .= "u.use_status = 1 AND u.use_group = " . StaffStoreUser . " AND u.parent_id = " . (int)$this->session->userdata('sessionUser');

        #BEGIN: Pagination
        $this->load->library('pagination');
        $this->load->model('branch_model');
        #Count total record
        $totalRecord = count($this->branch_model->fetch_join1($select, "LEFT", "tbtt_shop", 'u.use_id = tbtt_shop.sho_user', $where, $sort, $by));
        $config['base_url'] = base_url() . 'account/liststaffstore' . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = settingOtherAccount;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $limmit = 20;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        $data['sTT'] = $start + 1;
        #END Pagination
        #sTT - So thu tu
        $branchs = $this->branch_model->fetch_join1($select, "LEFT", "tbtt_shop", 'u.use_id = tbtt_shop.sho_user', $where, $sort, $by, $start, $limmit);
        $data['branchs'] = $branchs;
        #Load View
        // $this->load->view('home/account/tree/listaffiliate', $data);
        $this->load->view('home/account/staffstore/liststaffstore', $data);
    }

    // get thông tin aff cua nhan vien gian hang
    function listaffiliatestore()
    {
        $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser
            || $group_id == Developer2User
            || $group_id == Developer1User
            || $group_id == Partner2User
            || $group_id == Partner1User
            || $group_id == CoreMemberUser
            || $group_id == CoreAdminUser
            || $group_id == AffiliateUser
            || $group_id == StaffUser
            || $group_id == BranchUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        $uid = $this->uri->segment(3);
        if ($uid > 0) {
            $u_parent = $uid;
            $user_staff = $this->user_model->get(" use_id , use_username ", "use_id = " . $uid);
            $data['user_staff'] = $user_staff;
        } else {
            $u_parent = (int)$this->session->userdata('sessionUser');
        }

        //$use_group_query = '';
        $use_group_query = '(use_group = ' . StaffStoreUser . ')';
        $tree = array();
        $this->getTreeInList($this->session->userdata('sessionUser'), $tree);
        $tree[] = $this->session->userdata('sessionUser');
        $tree = implode(',', $tree);

        if ($uid > 0) {
            $wherestore = 'use_status = 1 and use_group = 2 and parent_id = ' . $u_parent;
        } else {
            $wherestore = 'use_status = 1 and use_group = 2 and parent_id IN (' . $tree . ')';
        }
        $where = $use_group_query . ' AND use_status = 1 AND parent_id =' . (int)$this->session->userdata('sessionUser');
        $where_shop = 'use_status = 1 AND use_group = 3 AND parent_id = ' . (int)$this->session->userdata('sessionUser');
        //$where = $use_group_query . ' AND use_status = 1 AND parent_id =' . $u_parent;

        #BEGIN: Get own domain of shop for link Aff
        $link_parent = '';
        if ($group_id == AffiliateStoreUser) {
            $link_parent .= ", (SELECT sho_link FROM tbtt_shop WHERE sho_user = " . (int)$this->session->userdata('sessionUser') . ") as pshop";
        }
        #END: Get own domain of shop for link Aff

        $liststore = $this->user_model->fetch_join("use_id, use_username, use_fullname, use_email, use_mobile, tbtt_shop.sho_link, tbtt_shop.sho_name,  tbtt_shop.sho_user" . $link_parent, "LEFT", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", $wherestore, '', '', '', '');

        $staffs = $this->user_model->fetch_join('use_id, use_username, use_fullname, use_email, use_mobile, use_group, parent_shop, tbtt_shop.sho_link, tbtt_shop.sho_name', "LEFT", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", $wherestore, '', '', '', '');

        $list_shop = $this->user_model->fetch_join("use_id, use_username, tbtt_shop.sho_id", "LEFT", "tbtt_shop", "tbtt_user.use_id = tbtt_shop.sho_user", $where_shop, '', '', 0, 0);

        $data['group_id'] = $group_id;
        $data['liststore'] = $liststore;
        $data['staffs'] = $staffs;
        $data['list_shop'] = $list_shop;

        //UPdate parent user for affiliate
        $use_id = (int)$this->input->post('use_id');
        $shop_id = (int)$this->input->post('parent_shop_id');
        if (isset($use_id) && $use_id > 0) {
            $this->user_model->update(array('parent_shop' => $shop_id), 'use_id = ' . $use_id);
            echo '1';
            return false;
            exit();
        }
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'task';
        $data['menuType'] = 'account';

        #Load view
        $this->load->view('home/account/tree/listaffiliate', $data);
    }

    /*
    function domain()
    {
        $group_id = (int)$this->session->userdata('sessionGroup');
        $user_id = (int)$this->session->userdata('sessionUser');
        if ($group_id == AffiliateStoreUser
            || $group_id == BranchUser
            || $group_id == AffiliateUser
            || $group_id == Developer2User
        ) {
        } else {
            redirect(base_url() .'account', 'location');
            die();
        }
        $data['menuPanelGroup'] = 4; 
	    $data['menuSelected'] = 'shop';
        $data['menuType'] = 'account';

        #BEGIN: Get shop
        $shop = $this->shop_model->get('*', 'sho_user = '. $user_id .' AND sho_status = 1');

        $fileName = "domain.txt";
        if ($this->input->post('txtdomain')) {
            $domain = trim($this->filter->injection_html($this->input->post('txtdomain')));
            $get_ip_domain = gethostbynamel($domain);
            foreach ($get_ip_domain as $v) {
                $ip = $v;
                break;
            }
            if ($ip != $_SERVER['SERVER_ADDR']) {
                $this->session->set_flashdata('ErrorMessage', 'Tên miền của bạn chưa trỏ về Server IP ' . $_SERVER['SERVER_ADDR']);
                redirect(base_url() . "account/shop/domain", "location");
            }

            $start = 0;
            if (strpos($domain, ':') > 0) {
                $start = strpos($domain, '/') + 2;
            }
            $domain = substr($domain, $start, strlen($domain));
            $strdomain = '';
            foreach (file($fileName) as $key => $values) {
                $arr = explode(' ', $values);
                foreach ($arr as $key => $value) {
                    // tim domain trong domain.txt, thay thế domain
                    if (strpos($value, $domain) !== false) {
                        $strdomain = $arr[$key] . " " . $arr[$key + 1];
                        $thaythe = $domain . " " . $shop->sho_link;
                        if ($key + 1 < count($arr)) {
                            $thaythe .= "\r\n";
                        }
                    }
                    // tim sho_link trong domain.txt, thay the sho_link
                    if (strpos($value, $shop->sho_link) !== false) {
                        $strdomain = $arr[$key - 1] . " " . $shop->sho_link;
                        $thaythe = $domain . " " . $shop->sho_link;
                    }
                }
            }

            $dem = explode(' ', $strdomain);
            if (count($dem) > 1) {
                $contents = file_get_contents($fileName);
                $contents = str_replace($strdomain, $thaythe, $contents);
                file_put_contents($fileName, $contents);
            } else {
                $fp = fopen($fileName, 'a+') or die("Can't open file");
                $str = "\r\n" . $domain . " " . $shop->sho_link;
                fwrite($fp, $str);
                fclose($fp);
            }
            $this->shop_model->update(array("domain" => $domain), "sho_id = " . (int)$shop->sho_id);
            $data['msg'] = "Cập nhật thành công !";
        }
        $data['shop'] = $shop;

        #Load View
        $this->load->view('home/account/shop/domain', $data);
    }*/

    function domain()
    {
        $fileName = 'domains.conf';
        $group_id = (int)$this->session->userdata('sessionGroup');
        $user_id = (int)$this->session->userdata('sessionUser');
        if ($group_id == AffiliateStoreUser
            || $group_id == BranchUser
            || $group_id == AffiliateUser
            || $group_id == Developer2User
        ) {
        } else {
            redirect(base_url() .'account', 'location');
            die();
        }
        $data['menuPanelGroup'] = 4; 
        $data['menuSelected'] = 'shop';
        $data['menuType'] = 'account';

        #BEGIN: Get shop
        $shop = $this->shop_model->get('*', 'sho_user = '. $user_id .' AND sho_status = 1');
        $oUser = $this->user_model->get('*', 'use_id = '. $user_id);
        if($oUser->use_group == 14) {
            $result = $this->package_user_model->getPackageDomain($user_id,iDomainBranchShop);
        }else {
            $result = $this->package_user_model->getPackageDomain($user_id,iDomainShop);
        }
        
 
        if(!empty($result)) {
            if ($this->input->post('txtdomain')) {
                $domain = trim($this->filter->injection_html($this->input->post('txtdomain')));
                $get_ip_domain = gethostbynamel($domain);
                foreach ($get_ip_domain as $v) {
                    $ip = $v;
                    break;
                }

                // Check env
                if (ENVIRONMENT == 'production') {                
                    if ($ip != SERVER_LOADBALANCER) {                
                        $data['msg'] = 'Tên miền của bạn chưa trỏ về Server có IP là: '. SERVER_LOADBALANCER;
                    } else {
                        $this->load->model('domains_model');
                        $_exist = $this->domains_model->get('*', 'domain = "'. $domain .'"');
                        if ($_exist) {
                            $data['msg'] = 'Tên miền này đã tồn tại trên hệ thống vui lòng kiểm tra lại!';                   
                        } else {
                            $dataDomain = array(
                                'domain' => $domain,
                                'shoplink' => $shop->sho_link,
                                'status' => 0,
                                'userid' => $user_id,                
                                'shopid' => (int)$shop->sho_id,
                                'note' => 'Chưa xử lý...'
                            );

                            if ($this->domains_model->add($dataDomain)) {
                                $this->shop_model->update(array('domain' => $domain), 'sho_id = '. (int)$shop->sho_id);
                                $data['msg'] = "Cập nhật thành công. Vui lòng đợi 5 - 10 phút để hệ thống đồng bộ dữ liệu.";
                            } else {
                                $data['msg'] = "Cập nhật không thành công. Vui lòng thử lại!";
                            }

                            /**
                                Continue, a script name "crossdomain.php" into root dir of server .48(loadbalancing), will run loop 5'/time to update.
                            **/
                        }
                    }   
                } else {
                    $ip = '::1';
                    if ($ip != $_SERVER['SERVER_ADDR']) {                    
                        $data['msg'] = 'Tên miền của bạn chưa trỏ về Server IP '.$_SERVER['SERVER_ADDR'];                    
                    } else {
                        $this->load->model('domains_model');
                        $_exist = $this->domains_model->get('*', 'domain = "'. $domain .'"');
                        if ($_exist) {
                            $data['msg'] = 'Tên miền này đã tồn tại trên hệ thống vui lòng kiểm tra lại!';                   
                        }else {
                            $dataDomain = array(
                                'domain' => $domain,
                                'shoplink' => $shop->sho_link,
                                'status' => 0,
                                'userid' => $user_id,                
                                'shopid' => (int)$shop->sho_id,
                                'note' => 'Chưa xử lý...'
                            );

                            if ($this->domains_model->add($dataDomain)) {
                                $this->shop_model->update(array('domain' => $domain), 'sho_id = '. (int)$shop->sho_id);
                                $data['msg'] = 'Cập nhật thành công !';
                            } else {
                                $data['msg'] = "Cập nhật không thành công. Vui lòng thử lại!";
                            }
                        }
                    }
                }
            } 
        }else {
            //Nếu không có, thông báo không cho mở, và tạo link mua gói DV này
            $data['msg'] = 'Gian hàng của bạn hiện không sử dụng dịch vụ cấu hình tên miền. Hãy click <a href="' . base_url() . 'shop/service">vào đây</a> để mua!';
        }
        
        $data['shop'] = $shop;

        #Load View
        $this->load->view('home/account/shop/domain', $data);
    }

    // get ds nhan vien hanh chinh
    function listsubadmin()
    {
		$group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }

        if (strtolower($this->uri->segment(3)) == 'delete') {
            $id = (int)$this->uri->segment(4);
            $this->user_model->delete($id);
            redirect(base_url() . "account/listsubadmin");
        }       

        #BEGIN: Menu
	    $data['menuPanelGroup'] = 4;
        $data['menuSelected'] = 'hanhchinh';
        $data['menuType'] = 'account';
        #END: Menu
        #BEGIN: Variables
        $select = '';
        $where = '';
        $sort = 'u.use_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageUrl = '';
        $pageSort = '';
        $action = array('detail', 'search', 'keyword', 'sort', 'by', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);

        #If have sort
        if ($getVar['sort'] != FALSE && trim($getVar['sort']) != '') {
            switch (strtolower($getVar['sort'])) {
                case 'use_username':
                    $pageUrl .= '/sort/use_username';
                    $sort = "use_username";
                    break;
                case 'use_fullname':
                    $pageUrl .= '/sort/use_fullname';
                    $sort = "use_fullname";
                    break;
                case 'sl':
                    $pageUrl .= '/sort/sl';
                    $sort = "sl";
                    break;
                default:
                    $pageUrl .= '/sort/id';
                    $sort = "use_id";

            }
            if ($getVar['by'] != FALSE && strtolower($getVar['by']) == 'desc') {
                $pageUrl .= '/by/desc';
                $by = "DESC";
            } else {
                $pageUrl .= '/by/asc';
                $by = "ASC";
            }
        }
        #END Search & sort

        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }

        #BEGIN: Create link sort
        $data['sortUrl'] = base_url() . 'account/listsubadmin' . $sortUrl . '/sort/';
        $data['pageSort'] = $pageSort;
        #END Create link sort
        $select .= 'use_id, use_username, use_fullname, use_email, use_mobile, use_message, (SELECT COUNT(*) FROM tbtt_user u1 WHERE u1.parent_id = use_id and u1.use_status = 1 and u1.use_group = 2 ) as sl';
        $where .= "use_status = 1 AND use_group = 16 AND parent_id = " . (int)$this->session->userdata('sessionUser');

        #BEGIN: Pagination
        $this->load->library('pagination');
        $limit = settingOtherAccount;       
        #Count total record        
        $totalRecord = count($this->user_model->fetch($select, $where, $sort, $by));       
        $config['base_url'] = base_url() .'account/listsubadmin'. $pageUrl .'/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limit;
        $config['num_links'] = 1;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);
        $data['linkPage'] = $this->pagination->create_links();
        $data['sTT'] = $start + 1;
        #END Pagination
        #sTT - So thu tu
        $subadmin = $this->user_model->fetch($select, $where, $sort, $by, $start, $limit);       
        $data['subadmin'] = $subadmin;
        #Load View
        $this->load->view('home/account/staffsubadmin/listsubadmin', $data);
    }
    
    function configsubadmin($postuid)
    {
        $data['menuType'] = 'account';
        $data['menuSelected'] = 'hanhchinh';
	    $group_id = $this->session->userdata('sessionGroup');
        if ($group_id == AffiliateStoreUser) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
	    $get_u = $this->user_model->get('use_username', 'use_id = ' . $postuid);

	    # Get list permission menu
        $this->load->model('permission_menu_model');
        $this->load->model('list_permission_menu_model');
        $lipm = $this->list_permission_menu_model->fetch('*', 'lpm_status = 1');
        $data['lipm'] = $lipm;
        $getpm = $this->permission_menu_model->get('*', 'pm_userid = '.(int)$postuid);
        if($this->input->post('update') == 1){	
	    $arr_listmenu = $this->input->post('permission');  
	    $listmenu = implode(',', $arr_listmenu);
	    $datapost = array('pm_listmenu' => $listmenu,'pm_userid'=> $postuid,'pm_parentuser' => $this->session->userdata('sessionUser'));
	    if(count($getpm) > 0){
		$this->permission_menu_model->update($datapost, 'pm_userid = '.(int)$postuid);
		$this->session->set_flashdata('flash_message_success', 'Bạn vừa phân quyền truy cập cho '.$get_u->use_username.' thành công!');
		redirect(base_url() . 'account/listsubadmin', 'location');
	    }
        } else {
            $this->session->set_flashdata('flash_message_error', 'Phân quyền truy cập không thành công. Vui lòng thử lại!!');
        }
    	$data['username'] = $get_u->use_username;
    	$arr = explode(',', $getpm->pm_listmenu);
    	$data['permission'] = $arr;
    	$data['updatesuccess'] = $note;

        # Load view
    	$this->load->view('home/account/staffsubadmin/configsubadmin', $data);
    }
    
    //Bo suu tap
    
    function collection()
    {
        $group_id = $this->session->userdata('sessionGroup');
        $userid = (int)$this->session->userdata('sessionUser');
        // Set group id
        $data['group_id'] = $group_id;
        if ($group_id == AffiliateStoreUser || $group_id == BranchUser
        ) {
        } else {
            redirect(base_url() . "account", 'location');
            die();
        }
        $this->load->model('collection_model');
        
        #Define url for $getVar
        $action = array('edit', 'search', 'keyword', 'sort', 'by', 'status', 'id', 'page');
        $getVar = $this->uri->uri_to_assoc(3, $action);
        
        $data['menuType'] = 'account';
        $data['menuPanelGroup'] = 4;
        #BEGIN: CHECK GROUP
        if ((int)$this->session->userdata('sessionGroup') == 1) {
            redirect(base_url() . 'account', 'location');
            die();
        }
        #END CHECK GROUP
        
        $sort = 'tbtt_product.pro_id';
        $by = 'DESC';
        $sortUrl = '';
        $pageSort = '';
        $pageUrl = '';
        
        #If have page
        if ($getVar['page'] != FALSE && (int)$getVar['page'] > 0) {
            $start = (int)$getVar['page'];
            $pageSort .= '/page/' . $start;
        } else {
            $start = 0;
        }
        #END Search & sort
        
        $where = 'collection_proid != "" AND collection_user = ' . $userid;
        if($this->input->post('keyword')){
            $where .= ' AND collection_name like "%' . $this->input->post('keyword') . '%"';
            $data['keyword'] = $this->input->post('keyword');
        }
        
        #Keyword

        #BEGIN: UPDATE ACTIVE (Status)
        if ($getVar['status'] != FALSE && trim($getVar['status']) != '' && $getVar['id'] != FALSE && (int)$getVar['id'] > 0) {
            switch (strtolower($getVar['status'])) {
                case 'active':
                    $this->collection_model->update(array('collection_status' => 1), "collection_id = " . (int)$getVar['id']);
                    break;

                case 'deactive':
                    $this->collection_model->update(array('collection_status' => 0), "collection_id = " . (int)$getVar['id']);
                    break;
            }
            redirect(base_url() . 'account/collection', 'location');
        }
        
        #END UPDATE ACTIVE (Status)
        $join_1 = 'LEFT';
        $table_1 = 'tbtt_category';
        $on_1 = 'tbtt_product.pro_category = tbtt_category.cat_id';
        $join_2 = '';
        $table_2 = '';
        $on_2 = '';
        $wherepro = "pro_user = " . (int)$this->session->userdata('sessionUser') . ' AND pro_status = 1';
        $product = $this->product_model->fetch_join("pro_category", $join_1, $table_1, $on_1, $join_2, $table_2, $on_2, "", "", "", $wherepro);
        $arrcat = array();
        foreach($product as $item){
            $arrcat[] = $item->pro_category;
        }
        $strcat = implode(',',$arrcat);
        if($strcat != ''){
            $cat = $this->category_model->fetch("cat_id, cat_name", "cat_status = 1 AND cat_id IN(" . $strcat . ")", "cat_name", "ASC");
        }
        $data['cat'] = $cat;
        #BEGIN: Pagination
        $this->load->library('pagination');
        #Count total record
        $totalRecord = count($this->collection_model->fetch('*', $where));

        $limit = settingOtherAccount;
        $config['base_url'] = base_url() . 'account/product' . $linkactive . $pageUrl . '/page/';
        $config['total_rows'] = $totalRecord;
        $config['per_page'] = $limit;
        $config['num_links'] = 5;
        $config['uri_segment'] = 4;
        $config['cur_page'] = $start;
        $this->pagination->initialize($config);

        $data['linkPage'] = $this->pagination->create_links();
        #END Pagination
        #sTT - So thu tu
        $data['sTT'] = $start + 1;
        #Fetch record
        
        $data['collection'] = $this->collection_model->fetch('*', $where, '','', $start, $limit);
        if($this->input->post('btnsave') == 1){
            $collname = $this->input->post('collection_name');

            $checkone = $this->input->post('checkone');

            $collpro = implode(',',$checkone);
            
            if($this->input->post('image')){
            
                $this->load->library('upload');
                $this->load->library('image_lib');

                $this->load->library('ftp');
                $config['hostname'] = IP_CLOUDSERVER;
                $config['username'] = USER_CLOUDSERVER;
                $config['password'] = PASS_CLOUDSERVER;
                $config['port']     = PORT_CLOUDSERVER;
                $config['debug']    = FALSE;
                $this->ftp->connect($config);
                #Create folder
                $pathImage = 'media/images/collection/';
                $path = '/public_html/media/images/collection';
                $dir_image = $this->session->userdata('sessionUsername');
                $dir = date('dmY');
                // Upload to other server cloud
                $ldir = array();
                $ldir = $this->ftp->list_files($path);
                
                // if $my_dir name exists in array returned by nlist in current '.' dir
                if (! in_array($dir, $ldir)) {
                    $this->ftp->mkdir($path . '/' . $dir, 0775);
                }

                if (!is_dir($pathImage . $dir_image)) {
                    @mkdir($pathImage . $dir_image, 0775);
                    $this->load->helper('file');
                    @write_file($pathImage . $dir_image . '/index.html', '<p>Directory access is forbidden.</p>');
                }

                $config['upload_path'] = $pathImage . $dir_image . '/';
                $config['allowed_types'] = 'gif|jpg|jpeg|png';
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                
                if ($this->upload->do_upload('image')) {
                    $uploadData = $this->upload->data();
                }
            }
            $collstatus = ($this->input->post('collection_status') == 1) ? 1 : 0;
            if($collname && $collname != '' && $checkone && count($checkone) > 0){
                $addcollection = array(
                    'collection_name' => $collname,
                    'collection_image' => $this->input->post('image'),
                    'collection_desc' => $this->input->post('collection_desc'),
                    'collection_proid' => $collpro,
                    'collection_status' => $collstatus,
                    'collection_user' => $userid
                );
                if($this->input->post('collid') > 0){
                    
                    $product = $this->product_model->fetch('pro_id, pro_collection', 'pro_collection = ' . (int)$this->input->post('collid'));
                    $arrpro = array();
                    foreach($product as $value){
                        $arrpro[] = $value->pro_id;
                    }
                    $huychon = implode(',',array_diff($arrpro, $checkone));
                    if($this->collection_model->update($addcollection,'collection_id = ' . (int)$this->input->post('collid'))){
                        $this->product_model->update(array('pro_collection' => (int)$this->input->post('collid')), 'pro_id IN(' . $collpro . ')');
                        if($huychon != ''){
                            $product = $this->product_model->update(array('pro_collection' => 0), 'pro_id IN(' . $huychon . ')');
                        }
                    }
                    
                }else{
                    $addcollection['collection_date'] = time();
                    if($this->collection_model->add($addcollection)){
                        $this->product_model->update(array('pro_collection' => $this->db->insert_id()), 'pro_id IN('.$collpro.')');
                    }
                }
                $this->session->unset_userdata('image_name');
                redirect(base_url() . 'account/collection', 'location');
            }
        }
        
        $this->load->view('home/account/collection/default', $data);
    }
    
    function procoll(){
        $sort = 'tbtt_product.pro_id';
        $by = 'DESC';
        $join_1 = 'LEFT';
        $table_1 = 'tbtt_category';
        $on_1 = 'tbtt_product.pro_category = tbtt_category.cat_id';
        $join_2 = '';
        $table_2 = '';
        $on_2 = '';
        $where = "pro_user = " . (int)$this->session->userdata('sessionUser') . ' AND pro_status = 1';
        $collect = '';
        if($this->input->post('collection_id') > 0){
            $sort = '(pro_collection = ' . (int)$this->input->post('collection_id') . ')';
            $this->load->model('collection_model');
            $collect = $this->collection_model->get('*','collection_id = ' . (int)$this->input->post('collection_id'));
        }
        if($this->input->post('protype') != ''){
            $where .= ' AND pro_type = ' . (int)$this->input->post('protype');
        }
        
        if($this->input->post('srsaleoff') > 0){
            if($this->input->post('srsaleoff')  == 1){
                $where .= ' AND pro_saleoff_value > 0 AND begin_date_sale <= '.mktime(0,0,0,date("m/d/Y")).' AND end_date_sale >= '.mktime(23,59,59,date("m/d/Y"));
            }
            if($this->input->post('srsaleoff')  == 2){
                $where .= ' AND (pro_saleoff_value = 0 OR (pro_saleoff_value > 0 AND end_date_sale < ' . mktime(23,59,59,date("m/d/Y")) . '))';
            }
        }
        if($this->input->post('sraff')  == 1){
            $where .= ' AND is_product_affiliate > 0';
        }
        if($this->input->post('sraff')  == 2){
            $where .= ' AND is_product_affiliate = 0';
        }
        if($this->input->post('srcat') > 0){
            $where .= ' AND pro_category = ' . $this->input->post('srcat');
        }
        
        $select .= "pro_type, pro_id, pro_name, pro_descr, pro_category, pro_dir, pro_image, pro_collection, pro_begindate, pro_enddate, pro_status, pro_view, pro_cost, pro_instock, pro_saleoff_value, pro_type_saleoff, pro_order, cat_name, is_product_affiliate, af_amt, af_rate, pro_of_shop";
        $product = $this->product_model->fetch_join($select, $join_1, $table_1, $on_1, $join_2, $table_2, $on_2, "", "", "", $where, $sort, $by, $start, $limit);
            
        $htmltb = '<table class="table table-bordered" width="100%" border="0" cellpadding="0" cellspacing="0">
                    <thead>                
                    <tr>
                        <th class="col-xs-1 col-sm-1 col-md-1 text-center">STT</th>
                        <th class="col-xs-1 col-sm-1 col-md-1 text-center">
                            <input type="checkbox" name="checkall" id="checkall" value="0" onclick="DoCheck(this.checked,'."'frmCollection'".',0)" />
                        </th>
                        <th class="col-xs-1 col-sm-1 col-md-1 text-center">
                           Hình ảnh
                        </th>
                        <th class="col-xs-1 col-sm-1 col-md-3 text-center">
                            Tên sản phẩm
                        </th>
                        <th width="100" class="col-xs-1 col-sm-1 col-md-1 text-center">
                            SL
                        </th>
                        <th width="150" class="col-xs-1 col-sm-1 col-md-1 text-center">
                            Giá
                        </th>
                        <th class="col-xs-1 col-sm-1 col-md-2 text-center">
                            Danh mục
                        </th>
                        <th class="col-xs-1 col-sm-1 col-md-1 text-center">
                            Ctv<br/><small style="font-size:10px">(Cho ctv bán)</small>
                        </th>
                    </tr>
                </thead><tbody></tbody></table>';
        if(count($product) > 0){
            $html = '<div class="rowitem"><table class="table table-bordered">';
            $arrhtml = array();
            foreach($product as $keys => $item){
                $subhtml = '';
                if($item->pro_type == 2){
                    $pro_type = 'coupon';
                }
                else{
                    if($item->pro_type == 0){
                        $pro_type = 'product';
                    }
                }
                if ($keys > 0 && $keys % 20 == 0) {
                    $subhtml .= '</table></div><div class="rowitem"><table class="table table-bordered">';
                }
                $stt = $keys + 1;
                $filename = DOMAIN_CLOUDSERVER .'media/images/product/'.$item->pro_dir.'/thumbnail_1_'. explode(',', $item->pro_image)[0];
                $imglager = DOMAIN_CLOUDSERVER .'media/images/product/'.$item->pro_dir.'/thumbnail_3_'. explode(',', $item->pro_image)[0];

                $subhtml .= '<tr>';
                //stt
                $subhtml .= '<td width="50" class="text-center">'.$stt.'</td>';
                $checked = '';
                if($this->input->post('collection_id') > 0 && $this->input->post('collection_id') == $item->pro_collection){
                    $checked = 'checked';
                }
                //checkbox
                $subhtml .= '<td width="50" class="text-center">
                                <input type="checkbox" name="checkone[]" id="checkone" '.$checked.' value="'.$item->pro_id.'" onclick="DoCheckOne('."'frmCollection'".')" />
                            </td>';
                //ảnh sp
                $subhtml .= '<td width="100" class="img_prev text-center">';
                if($filename != ''){
                    $subhtml .= '<a target="_blank" href="/'.$item->pro_category.'/'.$item->pro_id.'/'.RemoveSign($item->pro_name).'">
                            <img style="width: 70px" src="'.$filename.'" />
                        </a>';
                }else{
                    $subhtml .= '<a target="_blank" class="menu_1" href="/'.$item->pro_category.'/'.$item->pro_id.'/'.RemoveSign($item->pro_name).'" >
                            <img style="width: 70px" src="'.base_url().'media/images/no_photo_icon.png" />
                        </a>';
                }
                $subhtml .= '</td>';
                //end ảnh sp

                //ngay dang
                $subhtml .= '<td class="col-md-4">'
                        . '<a class="menu_1" target="_blank" href="/'.$item->pro_category.'/'.$item->pro_id.'/'.RemoveSign($item->pro_name).'">
                        '.sub($item->pro_name, 100).'</a>'
                        . '<p style="font-size:85%">
                            <i>Ngày đăng: '.date('d/m/Y', $item->pro_begindate).'</i>
                        </p></td>';
                //end ngay dang

                //so luong
                $subhtml .= '<td width="100" class="text-center">'.number_format($item->pro_instock).'</td>';
                //gia
                $subhtml .= '<td width="150" class="" style="text-align:right;"><span class="product_price">'.number_format($item->pro_cost,0,",",".").' đ</span>';

                //khuyen mai
                if($item->pro_saleoff_value > 0 && ($item->begin_date_sale <= mktime(0,0,0,date("m/d/Y")) && $item->end_date_sale >= mktime(23,59,59,date("m/d/Y")))){
                    $subhtml .= '<div class="product_discount"> - ';
                    if($item->pro_type_saleoff == 1 && $item->pro_saleoff_value > 0){  
                        $subhtml .= $item->pro_saleoff_value." %";
                    }elseif($item->pro_type_saleoff == 2 && $item->pro_saleoff_value > 0){
                        $subhtml .= number_format($item->pro_saleoff_value,0,",",".")." đ";
                    }
                    $subhtml .= '</div>';
                }
                //end khuyen mai
                $subhtml .= '</td>';

                //ten danh muc
                $subhtml .= '<td class="text-center">'.$item->cat_name.'</td>';
                //sp CTV
                $subhtml .= '<td width="70" class="hidden-xs hidden-sm" style="text-align:center;">';
                if((int)$item->is_product_affiliate == 1){
                    $subhtml .= '<img src="'.base_url().'templates/home/images/public.png" style="width: 18px" border="0" title="Là sản phẩm Cộng Tác Viên Online" alt="Tắt kích hoạt" />';
                }else{
                    $subhtml .= '<img src="'.base_url().'templates/home/images/unpublic.png" style="width: 18px" border="0" title="Không phải sản phẩm Cộng Tác Viên Online" alt="Kích hoạt" />';
                }
                $subhtml .= '</td>';
                //end sp CTV

                $subhtml .= '</tr>';
                $stt++;
                $arrhtml[] = $subhtml;
            }
            $tbhtml = implode('',$arrhtml) . '</table></div>';
        }else{
            $html = '';
            $tbhtml = '<div class="text-center">Bạn phải tạo sản phẩm và sản phẩm phải ở trạng thái kích hoạt để chọn vào bộ sưu tập</div>';
        }
        $jshtml = array('collect' => $collect, 'tbtitle' => $htmltb, 'html' => $html . $tbhtml, 'total' => count($product), 'where'=> $where);
        echo json_encode($jshtml); exit();
    }
    
    function delcoll(){
        if($this->input->post('collid') > 0){
            $product = $this->product_model->fetch('pro_id, pro_collection', 'pro_collection = ' . (int)$this->input->post('collid'));
            $arrpro = array();
            foreach($product as $value){
                $arrpro[] = $value->pro_id;
            }
            $proOfcoll = implode(',',$arrpro);
            if($proOfcoll != ''){
                if($this->product_model->update(array('pro_collection' => 0), 'pro_id IN(' . $proOfcoll . ')')){
                    $this->load->model('collection_model');
                    $this->collection_model->delete((int)$this->input->post('collid'));
                    echo 1; exit();
                }
            }
        }
        echo 0; exit();
    }
    
    //End Bo suu tap
    
    public function getMainDomain()
    {
        $result = base_url();
        $sub = $this->getShopLink();
        if ($sub != '') {
            $result = str_replace('//' . $sub . '.', '//', $result);
        }
        return $result;
    }

    public function getShopLink()
    {
        $result = '';
        $arrUrl = explode('.', $_SERVER['HTTP_HOST']);
        if (count($arrUrl) === 3) {
            $result = $arrUrl[0];
        }
        return $result;
    }

    ## Get my company or my Branch, I am CTV online
    function get_id_shop_in_tree($userId)
    {
        #Get user
        $id_my_parent = $info_parent = '';
        $get_u = $this->user_model->get('use_id, use_username, use_group, parent_id, parent_shop', 'use_id = ' . $userId . ' AND use_group = 2 AND use_status = 1');
        if ($get_u) {
            #Get my parent
            $get_p = $this->user_model->get('use_id, use_username, use_group, parent_id', 'use_id = ' . $get_u->parent_id . ' AND use_status = 1');
            if ($get_p && ($get_p->use_group == 3 || $get_p->use_group == 14)) {
                $id_my_parent = $get_p->use_id;

            } elseif ($get_p && ($get_p->use_group == 11 || $get_p->use_group == 15)) {
                #Get parent of parent
                $get_p_p = $this->user_model->get('use_id, use_username, use_group, parent_id', 'use_id = ' . $get_p->parent_id . ' AND use_status = 1');
                if ($get_p_p && ($get_p_p->use_group == 3 || $get_p_p->use_group == 14)) {
                    $id_my_parent = $get_p_p->use_id;
                }
            } else {
                $id_my_parent = $get_u->parent_shop;
            }
        }
        return $id_my_parent;
    }

    ##Get my company, I am Branch or Staff or StaffStore
    function get_my_shop($userId)
    {
        $protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off' || $_SERVER['SERVER_PORT'] == 443) ? "https://" : "http://";
        $domainName = $_SERVER['HTTP_HOST'];
        $pshop = $link = '';
        $p_userddd = $this->user_model->get('use_id,use_username, use_group, parent_id, use_status', 'use_status = 1 AND use_id = ' . (int)$userId);
        $linksp = '';

        switch ($p_userddd->use_group) {
            case AffiliateStoreUser:

                $checkDomain = $this->shop_model->get('sho_id, sho_link, domain', 'sho_user = ' . (int)$p_userddd->use_id);
                $domain_p = $checkDomain->sho_link . '.' . $domainName;
                if ($checkDomain->domain != '') {
                    $domain_p = $checkDomain->domain;
                }
                $pshop = $checkDomain->sho_link;
                $link = $protocol . $domain_p;
                break;

            case StaffUser:

                $user_p = $this->user_model->get("use_id,use_username, use_group, parent_id", "use_status = 1 AND use_id = " . (int)$p_userddd->parent_id);
                $userID = $user_p->use_id;
                if ($user_p->use_group == BranchUser) {
                    $info_parent = 'CN: ' . $user_p->use_username;
                    $checkDomain_parent = $this->shop_model->get('sho_id, sho_link, domain', 'sho_user = ' . (int)$user_p->use_id);

                    $user_p_p = $this->user_model->get("use_id,use_username, use_group, parent_id", "use_status = 1 AND use_id = " . (int)$user_p->parent_id);
                    $userID = $user_p_p->use_id;
                    if ($user_p_p->use_group == StaffStoreUser) {
                        $info_parent .= ' ,NVGH: ' . $user_p_p->use_username;
                        $checkDomain_parent = $this->shop_model->get('sho_id, sho_link, domain', 'sho_user = ' . (int)$user_p_p->parent_id);

                        $user_p_p_p = $this->user_model->get("use_id,use_username, use_group, parent_id", "use_status = 1 AND use_id = " . (int)$user_p_p->parent_id);
                        $userID = $user_p_p_p->use_id;
                        $info_parent .= ', GH: ' . $user_p_p_p->use_username;
                    } else {
                        $info_parent .= ', GH: ' . $user_p_p->use_username;
                    }
                } else {
                    $info_parent = 'GH: ' . $user_p->use_username;
                }
                break;

            case BranchUser:

                $checkDomain = $this->shop_model->get('sho_id, sho_link, domain', 'sho_user = ' . (int)$p_userddd->use_id);
                $user_p = $this->user_model->get("use_id,use_username, use_group, parent_id", "use_status = 1 AND use_id = " . (int)$p_userddd->parent_id);
                $userID = $user_p->use_id;
                $info_parent = 'GH: ' . $user_p->use_username;
                $checkDomain_p = $this->shop_model->get('sho_id, sho_link, domain', 'sho_user = ' . (int)$user_p->use_id);
                if ($user_p->use_group == StaffStoreUser) {
                    $user_p_p = $this->user_model->get("use_id,use_username, use_group, parent_id", "use_status = 1 AND use_id = " . (int)$user_p->parent_id);
                    $userID = $user_p_p->use_id;
                    $info_parent = 'NVGH: ' . $user_p->use_username . ', GH: ' . $user_p_p->use_username;
                    $checkDomain_p = $this->shop_model->get('sho_id, sho_link, domain', 'sho_user = ' . (int)$user_p_p->use_id);
                }
                
                $domain_p = $checkDomain_p->sho_link . '.' . $domainName;
               
                if ($checkDomain_p->domain != '') {
                    $domain_p = $checkDomain_p->domain;
                }
                $pshop = $checkDomain->sho_link;
                $link = $protocol . $checkDomain->sho_link.'.'.$domainName;
                if($checkDomain->domain != '') {
                    $link = $protocol . $checkDomain->domain;
                }                
                
                break;

            case StaffStoreUser:
                $user_p = $this->user_model->get("use_id,use_username, use_group, parent_id", "use_status = 1 AND use_id = " . (int)$p_userddd->parent_id);
                $userID = $user_p->use_id;
                $info_parent = 'GH: ' . $user_p->use_username;
                break;

            case AffiliateUser:               
                $sho_aff = $this->shop_model->get('sho_id, sho_link, domain', 'sho_user = ' . (int)$p_userddd->use_id);
                $user_p = $this->user_model->get("use_id,use_username, use_group, parent_id", "use_status = 1 AND use_id = " . (int)$p_userddd->parent_id);
                $userID = $user_p->use_id;
                $info_parent = 'GH: ' . $user_p->use_username;
                switch ($user_p->use_group) {
                    case StaffUser:
                        $info_parent = 'NV: ' . $user_p->use_username;
                        $user_p1 = $this->user_model->get("use_id,use_username, use_group, parent_id", "use_status = 1 AND use_id = " . $user_p->parent_id);
                        $userID = $user_p1->use_id;
                        $checkDomain = $this->shop_model->get('sho_id, sho_link, domain', 'sho_user = ' . $user_p1->use_id);
                        if ($user_p1->use_group == BranchUser) {
                            $info_parent .= ', CN: ' . $user_p1->use_username;

                            $user_p_p = $this->user_model->get("use_id,use_username, use_group, parent_id", "use_status = 1 AND use_id = " . $user_p1->parent_id);
                            $userID = $user_p_p->use_id;
                            if ($user_p_p->use_group == StaffStoreUser) {
                                $info_parent .= ' ,NVGH: ' . $user_p_p->use_username;

                                $user_p_p_p = $this->user_model->get("use_id,use_username, use_group, parent_id", "use_status = 1 AND use_id = " . $user_p_p->parent_id);
                                $userID = $user_p_p_p->use_id;
                                $info_parent .= ', GH: ' . $user_p_p_p->use_username;
                            } else {
                                $info_parent .= ', GH: ' . $user_p_p->use_username;
                            }
                        } else {
                            $info_parent .= ', GH: ' . $user_p1->use_username;;
                        }
                        break;
                    case BranchUser:
                        $checkDomain = $this->shop_model->get('sho_id, sho_link, domain', 'sho_user = ' . $user_p->use_id);
                        $user_p1 = $this->user_model->get("use_id,use_username, use_group, parent_id", "use_status = 1 AND use_id = " . $user_p->parent_id);
                        $userID = $user_p->use_id;
                        $info_parent = 'CN: ' . $user_p->use_username . ', GH: ' . $user_p1->use_username;

                        if ($user_p1->use_group == StaffStoreUser) {
                            $user_p_p = $this->user_model->get("use_id,use_username, use_group, parent_id", "use_status = 1 AND use_id = " . $user_p1->parent_id);
                            $userID = $user_p_p->use_id;

                            $info_parent = 'CN: ' . $user_p->use_username . ', NVGH: ' . $user_p1->use_username . ', GH: ' . $user_p_p->use_username;
                        }
                        break;
                    case StaffStoreUser:
                        $user_p_p = $this->user_model->get("use_id,use_username, use_group, parent_id", "use_status = 1 AND use_id = " . $user_p->parent_id);
                        $userID = $user_p_p->use_id;

                        $info_parent = 'NVGH: ' . $user_p->use_username . ', GH: ' . $user_p_p->use_username;
                        $checkDomain = $this->shop_model->get('sho_id, sho_link, domain', 'sho_user = ' . $user_p_p->use_id);
                        break;

                    default:
                        $checkDomain = $this->shop_model->get('sho_id, sho_link, domain', 'sho_user = ' . $user_p->use_id);
                        break;
                }

                $pshop = $checkDomain->sho_link;
                $link = $protocol . $checkDomain->sho_link . '.' . $domainName;
                if ($checkDomain->domain != '') {
                    $pshop = $checkDomain->domain;
                    $link = $protocol . $checkDomain->domain;
                }

                if($sho_aff->domain != '') {
                    $link = $protocol. $sho_aff->domain;
                }else {
                    $link = $protocol. $sho_aff->sho_link . '.' .$domainName;
                }

                $linksp = $link;

                

                break;

            default:

                break;
        }
        $info = array(
            'info_parent' => $info_parent,
            'pshop' => $pshop,
            'link_gh' => $link,
            'link_sp' => $linksp);
        return $info;
    }   
    
    function delete_avatar_customer(){
        $cus_avartar = $this->input->post('cus_avartar');
        $not_dir_image = $this->input->post('not_dir_image');        
        if($cus_avartar != ''){
            $filepath = '/public_html/media/images/content' . $not_dir_image;
            $this->load->library('ftp');
            $config['hostname'] = IP_CLOUDSERVER;
            $config['username'] = USER_CLOUDSERVER;
            $config['password'] = PASS_CLOUDSERVER;
            $config['port']     = PORT_CLOUDSERVER;                
            $config['debug']    = FALSE;
            $this->ftp->connect($config);
            $this->ftp->delete_file($filepath.'/'.$cus_avartar);
            $this->ftp->close();
        }
        echo 1;
        exit();  
    }
    function delete_video(){
        $not_video_url1 = $this->input->post('not_video_url1');      
        $not_id = (int)$this->input->post('not_id');      
        if($not_video_url1 != ''){
            // xoa video tren server
            $filepath = '/public_html/video/' . $not_video_url1;
            $this->load->library('ftp');
            $config['hostname'] = IP_CLOUDSERVER;
            $config['username'] = USER_CLOUDSERVER;
            $config['password'] = PASS_CLOUDSERVER;
            $config['port']     = PORT_CLOUDSERVER;                
            $config['debug']    = FALSE;
            $this->ftp->connect($config);
            $this->ftp->delete_file($filepath);
            $this->ftp->close();            
            // cap nhat data
            $data = array(
                'not_video_url1' => '',
            );
            $this->db->where('not_id', $not_id);
            $this->db->update('tbtt_content', $data);
        }
        echo 1;
        exit();  
    }


    function updateShop($user, $parent_old = false ,$child = false) {
        if (!empty($user)) {

            $getParent = $this->user_model->get('use_id, use_group, parent_id, parent_shop, parent_invited', 'use_id ='.$user->parent_id);

            if(!empty($getParent))
            {
                $update_data = array('parent_shop' => $getParent->use_id);
                if (!$child) {
                    $parent_old = $user->parent_id;
                } 
                else if ($user->use_group == 14)
                {
                    $update_data = array(
                        'parent_shop' => $getParent->use_id,
                        'parent_id'   => $getParent->use_id,
                        'parent_invited' => $parent_old
                    );
                }

                if($getParent->use_group == 3)
                {  
                    $this->user_model->update($update_data, "use_id = ".(int)$user->use_id); 
                }
                else if (in_array($getParent->use_group, [14, 15])) 
                { 
                   $user->parent_id = $getParent->parent_id;
                   $this->updateShop($user, $parent_old, true);
                }
            }
        }
    }


    function coverdata(){
        $sub_tructiep = $this->user_model->get_list_user('use_id, use_group, parent_id, parent_shop, parent_invited', 'use_group IN (14,15)');
        $array = array();
        foreach ($sub_tructiep as $key => $value) {
           $this->updateShop($value);
        }
        die;
    }   

    function findAll_User_System($userId_Giang) {
        $results = $this->user_model->fetch("use_id","parent_shop = $userId_Giang OR parent_id = $userId_Giang");
        return $results;
    }

    public function link_check($url)
    {
        if (!filter_var($url, FILTER_VALIDATE_URL)){
            $this->form_validation->set_message('link_check', '%s không đúng định dạng liên kết');
            return FALSE;
        }
        return TRUE;
    }
}

